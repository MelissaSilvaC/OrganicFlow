
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model RolePermission
 * 
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>
/**
 * Model Denuncia
 * 
 */
export type Denuncia = $Result.DefaultSelection<Prisma.$DenunciaPayload>
/**
 * Model Linha
 * 
 */
export type Linha = $Result.DefaultSelection<Prisma.$LinhaPayload>
/**
 * Model Prod_Agri
 * 
 */
export type Prod_Agri = $Result.DefaultSelection<Prisma.$Prod_AgriPayload>
/**
 * Model Embalagem
 * 
 */
export type Embalagem = $Result.DefaultSelection<Prisma.$EmbalagemPayload>
/**
 * Model Transporte
 * 
 */
export type Transporte = $Result.DefaultSelection<Prisma.$TransportePayload>
/**
 * Model Armazenamento
 * 
 */
export type Armazenamento = $Result.DefaultSelection<Prisma.$ArmazenamentoPayload>
/**
 * Model Varejo
 * 
 */
export type Varejo = $Result.DefaultSelection<Prisma.$VarejoPayload>
/**
 * Model Produto
 * 
 */
export type Produto = $Result.DefaultSelection<Prisma.$ProdutoPayload>
/**
 * Model Feed
 * 
 */
export type Feed = $Result.DefaultSelection<Prisma.$FeedPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs>;

  /**
   * `prisma.denuncia`: Exposes CRUD operations for the **Denuncia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Denuncias
    * const denuncias = await prisma.denuncia.findMany()
    * ```
    */
  get denuncia(): Prisma.DenunciaDelegate<ExtArgs>;

  /**
   * `prisma.linha`: Exposes CRUD operations for the **Linha** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Linhas
    * const linhas = await prisma.linha.findMany()
    * ```
    */
  get linha(): Prisma.LinhaDelegate<ExtArgs>;

  /**
   * `prisma.prod_Agri`: Exposes CRUD operations for the **Prod_Agri** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prod_Agris
    * const prod_Agris = await prisma.prod_Agri.findMany()
    * ```
    */
  get prod_Agri(): Prisma.Prod_AgriDelegate<ExtArgs>;

  /**
   * `prisma.embalagem`: Exposes CRUD operations for the **Embalagem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Embalagems
    * const embalagems = await prisma.embalagem.findMany()
    * ```
    */
  get embalagem(): Prisma.EmbalagemDelegate<ExtArgs>;

  /**
   * `prisma.transporte`: Exposes CRUD operations for the **Transporte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transportes
    * const transportes = await prisma.transporte.findMany()
    * ```
    */
  get transporte(): Prisma.TransporteDelegate<ExtArgs>;

  /**
   * `prisma.armazenamento`: Exposes CRUD operations for the **Armazenamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Armazenamentos
    * const armazenamentos = await prisma.armazenamento.findMany()
    * ```
    */
  get armazenamento(): Prisma.ArmazenamentoDelegate<ExtArgs>;

  /**
   * `prisma.varejo`: Exposes CRUD operations for the **Varejo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Varejos
    * const varejos = await prisma.varejo.findMany()
    * ```
    */
  get varejo(): Prisma.VarejoDelegate<ExtArgs>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<ExtArgs>;

  /**
   * `prisma.feed`: Exposes CRUD operations for the **Feed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feeds
    * const feeds = await prisma.feed.findMany()
    * ```
    */
  get feed(): Prisma.FeedDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Role: 'Role',
    UserRole: 'UserRole',
    Permission: 'Permission',
    RolePermission: 'RolePermission',
    UserPermission: 'UserPermission',
    Denuncia: 'Denuncia',
    Linha: 'Linha',
    Prod_Agri: 'Prod_Agri',
    Embalagem: 'Embalagem',
    Transporte: 'Transporte',
    Armazenamento: 'Armazenamento',
    Varejo: 'Varejo',
    Produto: 'Produto',
    Feed: 'Feed'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'role' | 'userRole' | 'permission' | 'rolePermission' | 'userPermission' | 'denuncia' | 'linha' | 'prod_Agri' | 'embalagem' | 'transporte' | 'armazenamento' | 'varejo' | 'produto' | 'feed'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>,
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
      Denuncia: {
        payload: Prisma.$DenunciaPayload<ExtArgs>
        fields: Prisma.DenunciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DenunciaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DenunciaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          findFirst: {
            args: Prisma.DenunciaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DenunciaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          findMany: {
            args: Prisma.DenunciaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>[]
          }
          create: {
            args: Prisma.DenunciaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          createMany: {
            args: Prisma.DenunciaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DenunciaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          update: {
            args: Prisma.DenunciaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          deleteMany: {
            args: Prisma.DenunciaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DenunciaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DenunciaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          aggregate: {
            args: Prisma.DenunciaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDenuncia>
          }
          groupBy: {
            args: Prisma.DenunciaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DenunciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DenunciaCountArgs<ExtArgs>,
            result: $Utils.Optional<DenunciaCountAggregateOutputType> | number
          }
        }
      }
      Linha: {
        payload: Prisma.$LinhaPayload<ExtArgs>
        fields: Prisma.LinhaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LinhaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LinhaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LinhaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LinhaPayload>
          }
          findFirst: {
            args: Prisma.LinhaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LinhaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LinhaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LinhaPayload>
          }
          findMany: {
            args: Prisma.LinhaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LinhaPayload>[]
          }
          create: {
            args: Prisma.LinhaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LinhaPayload>
          }
          createMany: {
            args: Prisma.LinhaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LinhaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LinhaPayload>
          }
          update: {
            args: Prisma.LinhaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LinhaPayload>
          }
          deleteMany: {
            args: Prisma.LinhaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LinhaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LinhaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LinhaPayload>
          }
          aggregate: {
            args: Prisma.LinhaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLinha>
          }
          groupBy: {
            args: Prisma.LinhaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LinhaGroupByOutputType>[]
          }
          count: {
            args: Prisma.LinhaCountArgs<ExtArgs>,
            result: $Utils.Optional<LinhaCountAggregateOutputType> | number
          }
        }
      }
      Prod_Agri: {
        payload: Prisma.$Prod_AgriPayload<ExtArgs>
        fields: Prisma.Prod_AgriFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Prod_AgriFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Prod_AgriPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Prod_AgriFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Prod_AgriPayload>
          }
          findFirst: {
            args: Prisma.Prod_AgriFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Prod_AgriPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Prod_AgriFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Prod_AgriPayload>
          }
          findMany: {
            args: Prisma.Prod_AgriFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Prod_AgriPayload>[]
          }
          create: {
            args: Prisma.Prod_AgriCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Prod_AgriPayload>
          }
          createMany: {
            args: Prisma.Prod_AgriCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Prod_AgriDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Prod_AgriPayload>
          }
          update: {
            args: Prisma.Prod_AgriUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Prod_AgriPayload>
          }
          deleteMany: {
            args: Prisma.Prod_AgriDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Prod_AgriUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Prod_AgriUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Prod_AgriPayload>
          }
          aggregate: {
            args: Prisma.Prod_AgriAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProd_Agri>
          }
          groupBy: {
            args: Prisma.Prod_AgriGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Prod_AgriGroupByOutputType>[]
          }
          count: {
            args: Prisma.Prod_AgriCountArgs<ExtArgs>,
            result: $Utils.Optional<Prod_AgriCountAggregateOutputType> | number
          }
        }
      }
      Embalagem: {
        payload: Prisma.$EmbalagemPayload<ExtArgs>
        fields: Prisma.EmbalagemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmbalagemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmbalagemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmbalagemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmbalagemPayload>
          }
          findFirst: {
            args: Prisma.EmbalagemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmbalagemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmbalagemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmbalagemPayload>
          }
          findMany: {
            args: Prisma.EmbalagemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmbalagemPayload>[]
          }
          create: {
            args: Prisma.EmbalagemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmbalagemPayload>
          }
          createMany: {
            args: Prisma.EmbalagemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmbalagemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmbalagemPayload>
          }
          update: {
            args: Prisma.EmbalagemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmbalagemPayload>
          }
          deleteMany: {
            args: Prisma.EmbalagemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmbalagemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmbalagemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmbalagemPayload>
          }
          aggregate: {
            args: Prisma.EmbalagemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmbalagem>
          }
          groupBy: {
            args: Prisma.EmbalagemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmbalagemGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmbalagemCountArgs<ExtArgs>,
            result: $Utils.Optional<EmbalagemCountAggregateOutputType> | number
          }
        }
      }
      Transporte: {
        payload: Prisma.$TransportePayload<ExtArgs>
        fields: Prisma.TransporteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransporteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransporteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportePayload>
          }
          findFirst: {
            args: Prisma.TransporteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransporteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportePayload>
          }
          findMany: {
            args: Prisma.TransporteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportePayload>[]
          }
          create: {
            args: Prisma.TransporteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportePayload>
          }
          createMany: {
            args: Prisma.TransporteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransporteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportePayload>
          }
          update: {
            args: Prisma.TransporteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportePayload>
          }
          deleteMany: {
            args: Prisma.TransporteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransporteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransporteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportePayload>
          }
          aggregate: {
            args: Prisma.TransporteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransporte>
          }
          groupBy: {
            args: Prisma.TransporteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransporteGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransporteCountArgs<ExtArgs>,
            result: $Utils.Optional<TransporteCountAggregateOutputType> | number
          }
        }
      }
      Armazenamento: {
        payload: Prisma.$ArmazenamentoPayload<ExtArgs>
        fields: Prisma.ArmazenamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArmazenamentoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArmazenamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArmazenamentoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArmazenamentoPayload>
          }
          findFirst: {
            args: Prisma.ArmazenamentoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArmazenamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArmazenamentoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArmazenamentoPayload>
          }
          findMany: {
            args: Prisma.ArmazenamentoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArmazenamentoPayload>[]
          }
          create: {
            args: Prisma.ArmazenamentoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArmazenamentoPayload>
          }
          createMany: {
            args: Prisma.ArmazenamentoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ArmazenamentoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArmazenamentoPayload>
          }
          update: {
            args: Prisma.ArmazenamentoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArmazenamentoPayload>
          }
          deleteMany: {
            args: Prisma.ArmazenamentoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ArmazenamentoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ArmazenamentoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArmazenamentoPayload>
          }
          aggregate: {
            args: Prisma.ArmazenamentoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArmazenamento>
          }
          groupBy: {
            args: Prisma.ArmazenamentoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArmazenamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArmazenamentoCountArgs<ExtArgs>,
            result: $Utils.Optional<ArmazenamentoCountAggregateOutputType> | number
          }
        }
      }
      Varejo: {
        payload: Prisma.$VarejoPayload<ExtArgs>
        fields: Prisma.VarejoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VarejoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VarejoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VarejoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VarejoPayload>
          }
          findFirst: {
            args: Prisma.VarejoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VarejoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VarejoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VarejoPayload>
          }
          findMany: {
            args: Prisma.VarejoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VarejoPayload>[]
          }
          create: {
            args: Prisma.VarejoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VarejoPayload>
          }
          createMany: {
            args: Prisma.VarejoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VarejoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VarejoPayload>
          }
          update: {
            args: Prisma.VarejoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VarejoPayload>
          }
          deleteMany: {
            args: Prisma.VarejoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VarejoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VarejoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VarejoPayload>
          }
          aggregate: {
            args: Prisma.VarejoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVarejo>
          }
          groupBy: {
            args: Prisma.VarejoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VarejoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VarejoCountArgs<ExtArgs>,
            result: $Utils.Optional<VarejoCountAggregateOutputType> | number
          }
        }
      }
      Produto: {
        payload: Prisma.$ProdutoPayload<ExtArgs>
        fields: Prisma.ProdutoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findMany: {
            args: Prisma.ProdutoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          create: {
            args: Prisma.ProdutoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          createMany: {
            args: Prisma.ProdutoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProdutoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          update: {
            args: Prisma.ProdutoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduto>
          }
          groupBy: {
            args: Prisma.ProdutoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCountArgs<ExtArgs>,
            result: $Utils.Optional<ProdutoCountAggregateOutputType> | number
          }
        }
      }
      Feed: {
        payload: Prisma.$FeedPayload<ExtArgs>
        fields: Prisma.FeedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>
          }
          findFirst: {
            args: Prisma.FeedFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>
          }
          findMany: {
            args: Prisma.FeedFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>[]
          }
          create: {
            args: Prisma.FeedCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>
          }
          createMany: {
            args: Prisma.FeedCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeedDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>
          }
          update: {
            args: Prisma.FeedUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>
          }
          deleteMany: {
            args: Prisma.FeedDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeedUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeedUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>
          }
          aggregate: {
            args: Prisma.FeedAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeed>
          }
          groupBy: {
            args: Prisma.FeedGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeedGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedCountArgs<ExtArgs>,
            result: $Utils.Optional<FeedCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    UserRole: number
    UserPermission: number
    Denuncia: number
    Relatorio1: number
    Relatorio2: number
    Relatorio3: number
    Relatorio4: number
    Relatorio5: number
    Feed: number
    Produto: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    UserRole?: boolean | UserCountOutputTypeCountUserRoleArgs
    UserPermission?: boolean | UserCountOutputTypeCountUserPermissionArgs
    Denuncia?: boolean | UserCountOutputTypeCountDenunciaArgs
    Relatorio1?: boolean | UserCountOutputTypeCountRelatorio1Args
    Relatorio2?: boolean | UserCountOutputTypeCountRelatorio2Args
    Relatorio3?: boolean | UserCountOutputTypeCountRelatorio3Args
    Relatorio4?: boolean | UserCountOutputTypeCountRelatorio4Args
    Relatorio5?: boolean | UserCountOutputTypeCountRelatorio5Args
    Feed?: boolean | UserCountOutputTypeCountFeedArgs
    Produto?: boolean | UserCountOutputTypeCountProdutoArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRoleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserPermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDenunciaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DenunciaWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRelatorio1Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Prod_AgriWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRelatorio2Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmbalagemWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRelatorio3Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransporteWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRelatorio4Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ArmazenamentoWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRelatorio5Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VarejoWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FeedWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProdutoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
  }



  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    UserRole: number
    RolePermission: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    UserRole?: boolean | RoleCountOutputTypeCountUserRoleArgs
    RolePermission?: boolean | RoleCountOutputTypeCountRolePermissionArgs
  }

  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserRoleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountRolePermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }



  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    RolePermission: number
    UserPermission: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    RolePermission?: boolean | PermissionCountOutputTypeCountRolePermissionArgs
    UserPermission?: boolean | PermissionCountOutputTypeCountUserPermissionArgs
  }

  // Custom InputTypes

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolePermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountUserPermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }



  /**
   * Count Type LinhaCountOutputType
   */

  export type LinhaCountOutputType = {
    Relatorio1: number
    Relatorio2: number
    Relatorio3: number
    Relatorio4: number
    Relatorio5: number
  }

  export type LinhaCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Relatorio1?: boolean | LinhaCountOutputTypeCountRelatorio1Args
    Relatorio2?: boolean | LinhaCountOutputTypeCountRelatorio2Args
    Relatorio3?: boolean | LinhaCountOutputTypeCountRelatorio3Args
    Relatorio4?: boolean | LinhaCountOutputTypeCountRelatorio4Args
    Relatorio5?: boolean | LinhaCountOutputTypeCountRelatorio5Args
  }

  // Custom InputTypes

  /**
   * LinhaCountOutputType without action
   */
  export type LinhaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinhaCountOutputType
     */
    select?: LinhaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LinhaCountOutputType without action
   */
  export type LinhaCountOutputTypeCountRelatorio1Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Prod_AgriWhereInput
  }


  /**
   * LinhaCountOutputType without action
   */
  export type LinhaCountOutputTypeCountRelatorio2Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmbalagemWhereInput
  }


  /**
   * LinhaCountOutputType without action
   */
  export type LinhaCountOutputTypeCountRelatorio3Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransporteWhereInput
  }


  /**
   * LinhaCountOutputType without action
   */
  export type LinhaCountOutputTypeCountRelatorio4Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ArmazenamentoWhereInput
  }


  /**
   * LinhaCountOutputType without action
   */
  export type LinhaCountOutputTypeCountRelatorio5Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VarejoWhereInput
  }



  /**
   * Count Type ProdutoCountOutputType
   */

  export type ProdutoCountOutputType = {
    Linha: number
  }

  export type ProdutoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Linha?: boolean | ProdutoCountOutputTypeCountLinhaArgs
  }

  // Custom InputTypes

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     */
    select?: ProdutoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeCountLinhaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LinhaWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    password: string | null
    email: string | null
    cnpj: string | null
    photo: string | null
    local: string | null
    telefone: string | null
    gerente: boolean | null
    fiscal: boolean | null
    ban: boolean | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    password: string | null
    email: string | null
    cnpj: string | null
    photo: string | null
    local: string | null
    telefone: string | null
    gerente: boolean | null
    fiscal: boolean | null
    ban: boolean | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    password: number
    email: number
    cnpj: number
    photo: number
    local: number
    telefone: number
    gerente: number
    fiscal: number
    ban: number
    created_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    cnpj?: true
    photo?: true
    local?: true
    telefone?: true
    gerente?: true
    fiscal?: true
    ban?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    cnpj?: true
    photo?: true
    local?: true
    telefone?: true
    gerente?: true
    fiscal?: true
    ban?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    cnpj?: true
    photo?: true
    local?: true
    telefone?: true
    gerente?: true
    fiscal?: true
    ban?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string | null
    password: string
    email: string
    cnpj: string | null
    photo: string | null
    local: string | null
    telefone: string | null
    gerente: boolean
    fiscal: boolean
    ban: boolean
    created_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    cnpj?: boolean
    photo?: boolean
    local?: boolean
    telefone?: boolean
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: boolean
    UserRole?: boolean | User$UserRoleArgs<ExtArgs>
    UserPermission?: boolean | User$UserPermissionArgs<ExtArgs>
    Denuncia?: boolean | User$DenunciaArgs<ExtArgs>
    Relatorio1?: boolean | User$Relatorio1Args<ExtArgs>
    Relatorio2?: boolean | User$Relatorio2Args<ExtArgs>
    Relatorio3?: boolean | User$Relatorio3Args<ExtArgs>
    Relatorio4?: boolean | User$Relatorio4Args<ExtArgs>
    Relatorio5?: boolean | User$Relatorio5Args<ExtArgs>
    Feed?: boolean | User$FeedArgs<ExtArgs>
    Produto?: boolean | User$ProdutoArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    cnpj?: boolean
    photo?: boolean
    local?: boolean
    telefone?: boolean
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    UserRole?: boolean | User$UserRoleArgs<ExtArgs>
    UserPermission?: boolean | User$UserPermissionArgs<ExtArgs>
    Denuncia?: boolean | User$DenunciaArgs<ExtArgs>
    Relatorio1?: boolean | User$Relatorio1Args<ExtArgs>
    Relatorio2?: boolean | User$Relatorio2Args<ExtArgs>
    Relatorio3?: boolean | User$Relatorio3Args<ExtArgs>
    Relatorio4?: boolean | User$Relatorio4Args<ExtArgs>
    Relatorio5?: boolean | User$Relatorio5Args<ExtArgs>
    Feed?: boolean | User$FeedArgs<ExtArgs>
    Produto?: boolean | User$ProdutoArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      UserRole: Prisma.$UserRolePayload<ExtArgs>[]
      UserPermission: Prisma.$UserPermissionPayload<ExtArgs>[]
      Denuncia: Prisma.$DenunciaPayload<ExtArgs>[]
      Relatorio1: Prisma.$Prod_AgriPayload<ExtArgs>[]
      Relatorio2: Prisma.$EmbalagemPayload<ExtArgs>[]
      Relatorio3: Prisma.$TransportePayload<ExtArgs>[]
      Relatorio4: Prisma.$ArmazenamentoPayload<ExtArgs>[]
      Relatorio5: Prisma.$VarejoPayload<ExtArgs>[]
      Feed: Prisma.$FeedPayload<ExtArgs>[]
      Produto: Prisma.$ProdutoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string | null
      password: string
      email: string
      cnpj: string | null
      photo: string | null
      local: string | null
      telefone: string | null
      gerente: boolean
      fiscal: boolean
      ban: boolean
      created_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    UserRole<T extends User$UserRoleArgs<ExtArgs> = {}>(args?: Subset<T, User$UserRoleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findMany'> | Null>;

    UserPermission<T extends User$UserPermissionArgs<ExtArgs> = {}>(args?: Subset<T, User$UserPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Denuncia<T extends User$DenunciaArgs<ExtArgs> = {}>(args?: Subset<T, User$DenunciaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findMany'> | Null>;

    Relatorio1<T extends User$Relatorio1Args<ExtArgs> = {}>(args?: Subset<T, User$Relatorio1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'findMany'> | Null>;

    Relatorio2<T extends User$Relatorio2Args<ExtArgs> = {}>(args?: Subset<T, User$Relatorio2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'findMany'> | Null>;

    Relatorio3<T extends User$Relatorio3Args<ExtArgs> = {}>(args?: Subset<T, User$Relatorio3Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'findMany'> | Null>;

    Relatorio4<T extends User$Relatorio4Args<ExtArgs> = {}>(args?: Subset<T, User$Relatorio4Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'findMany'> | Null>;

    Relatorio5<T extends User$Relatorio5Args<ExtArgs> = {}>(args?: Subset<T, User$Relatorio5Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'findMany'> | Null>;

    Feed<T extends User$FeedArgs<ExtArgs> = {}>(args?: Subset<T, User$FeedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findMany'> | Null>;

    Produto<T extends User$ProdutoArgs<ExtArgs> = {}>(args?: Subset<T, User$ProdutoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly cnpj: FieldRef<"User", 'String'>
    readonly photo: FieldRef<"User", 'String'>
    readonly local: FieldRef<"User", 'String'>
    readonly telefone: FieldRef<"User", 'String'>
    readonly gerente: FieldRef<"User", 'Boolean'>
    readonly fiscal: FieldRef<"User", 'Boolean'>
    readonly ban: FieldRef<"User", 'Boolean'>
    readonly created_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.UserRole
   */
  export type User$UserRoleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }


  /**
   * User.UserPermission
   */
  export type User$UserPermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }


  /**
   * User.Denuncia
   */
  export type User$DenunciaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    where?: DenunciaWhereInput
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    cursor?: DenunciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }


  /**
   * User.Relatorio1
   */
  export type User$Relatorio1Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    where?: Prod_AgriWhereInput
    orderBy?: Prod_AgriOrderByWithRelationInput | Prod_AgriOrderByWithRelationInput[]
    cursor?: Prod_AgriWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Prod_AgriScalarFieldEnum | Prod_AgriScalarFieldEnum[]
  }


  /**
   * User.Relatorio2
   */
  export type User$Relatorio2Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    where?: EmbalagemWhereInput
    orderBy?: EmbalagemOrderByWithRelationInput | EmbalagemOrderByWithRelationInput[]
    cursor?: EmbalagemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmbalagemScalarFieldEnum | EmbalagemScalarFieldEnum[]
  }


  /**
   * User.Relatorio3
   */
  export type User$Relatorio3Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    where?: TransporteWhereInput
    orderBy?: TransporteOrderByWithRelationInput | TransporteOrderByWithRelationInput[]
    cursor?: TransporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransporteScalarFieldEnum | TransporteScalarFieldEnum[]
  }


  /**
   * User.Relatorio4
   */
  export type User$Relatorio4Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    where?: ArmazenamentoWhereInput
    orderBy?: ArmazenamentoOrderByWithRelationInput | ArmazenamentoOrderByWithRelationInput[]
    cursor?: ArmazenamentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArmazenamentoScalarFieldEnum | ArmazenamentoScalarFieldEnum[]
  }


  /**
   * User.Relatorio5
   */
  export type User$Relatorio5Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    where?: VarejoWhereInput
    orderBy?: VarejoOrderByWithRelationInput | VarejoOrderByWithRelationInput[]
    cursor?: VarejoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VarejoScalarFieldEnum | VarejoScalarFieldEnum[]
  }


  /**
   * User.Feed
   */
  export type User$FeedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    where?: FeedWhereInput
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[]
    cursor?: FeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedScalarFieldEnum | FeedScalarFieldEnum[]
  }


  /**
   * User.Produto
   */
  export type User$ProdutoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    cursor?: ProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    UserRole?: boolean | Role$UserRoleArgs<ExtArgs>
    RolePermission?: boolean | Role$RolePermissionArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    UserRole?: boolean | Role$UserRoleArgs<ExtArgs>
    RolePermission?: boolean | Role$RolePermissionArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RolePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      UserRole: Prisma.$UserRolePayload<ExtArgs>[]
      RolePermission: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      description: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }


  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleCreateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    UserRole<T extends Role$UserRoleArgs<ExtArgs> = {}>(args?: Subset<T, Role$UserRoleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findMany'> | Null>;

    RolePermission<T extends Role$RolePermissionArgs<ExtArgs> = {}>(args?: Subset<T, Role$RolePermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly name: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }


  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }


  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }


  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }


  /**
   * Role.UserRole
   */
  export type Role$UserRoleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }


  /**
   * Role.RolePermission
   */
  export type Role$RolePermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }


  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
  }



  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_role: number | null
  }

  export type UserRoleSumAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_role: number | null
  }

  export type UserRoleMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_role: number | null
    responsavel_email: string | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_role: number | null
    responsavel_email: string | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    id_user: number
    id_role: number
    responsavel_email: number
    _all: number
  }


  export type UserRoleAvgAggregateInputType = {
    id?: true
    id_user?: true
    id_role?: true
  }

  export type UserRoleSumAggregateInputType = {
    id?: true
    id_user?: true
    id_role?: true
  }

  export type UserRoleMinAggregateInputType = {
    id?: true
    id_user?: true
    id_role?: true
    responsavel_email?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    id_user?: true
    id_role?: true
    responsavel_email?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    id_user?: true
    id_role?: true
    responsavel_email?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _avg?: UserRoleAvgAggregateInputType
    _sum?: UserRoleSumAggregateInputType
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    id: number
    id_user: number
    id_role: number
    responsavel_email: string
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    id_role?: boolean
    responsavel_email?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    id?: boolean
    id_user?: boolean
    id_role?: boolean
    responsavel_email?: boolean
  }

  export type UserRoleInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }


  export type $UserRolePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      id_role: number
      responsavel_email: string
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }


  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserRoleFindManyArgs, 'select' | 'include'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserRoleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserRole that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserRoleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserRoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
    **/
    create<T extends UserRoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserRoles.
     *     @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     *     @example
     *     // Create many UserRoles
     *     const userRole = await prisma.userRole.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserRoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
    **/
    delete<T extends UserRoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserRoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserRoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserRoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
    **/
    upsert<T extends UserRoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserRole model
   */ 
  interface UserRoleFieldRefs {
    readonly id: FieldRef<"UserRole", 'Int'>
    readonly id_user: FieldRef<"UserRole", 'Int'>
    readonly id_role: FieldRef<"UserRole", 'Int'>
    readonly responsavel_email: FieldRef<"UserRole", 'String'>
  }
    

  // Custom InputTypes

  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }


  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }


  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }


  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }


  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }


  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }


  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }


  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
  }


  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }


  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }


  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
  }


  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserRoleInclude<ExtArgs> | null
  }



  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type PermissionSumAggregateOutputType = {
    id: number | null
  }

  export type PermissionMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    description: number
    created_at: number
    _all: number
  }


  export type PermissionAvgAggregateInputType = {
    id?: true
  }

  export type PermissionSumAggregateInputType = {
    id?: true
  }

  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _avg?: PermissionAvgAggregateInputType
    _sum?: PermissionSumAggregateInputType
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: number
    name: string
    description: string
    created_at: Date
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    RolePermission?: boolean | Permission$RolePermissionArgs<ExtArgs>
    UserPermission?: boolean | Permission$UserPermissionArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    RolePermission?: boolean | Permission$RolePermissionArgs<ExtArgs>
    UserPermission?: boolean | Permission$UserPermissionArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PermissionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      RolePermission: Prisma.$RolePermissionPayload<ExtArgs>[]
      UserPermission: Prisma.$UserPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      description: string
      created_at: Date
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }


  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PermissionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PermissionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
    **/
    create<T extends PermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Permissions.
     *     @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     *     @example
     *     // Create many Permissions
     *     const permission = await prisma.permission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
    **/
    delete<T extends PermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
    **/
    upsert<T extends PermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    RolePermission<T extends Permission$RolePermissionArgs<ExtArgs> = {}>(args?: Subset<T, Permission$RolePermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    UserPermission<T extends Permission$UserPermissionArgs<ExtArgs> = {}>(args?: Subset<T, Permission$UserPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'Int'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly created_at: FieldRef<"Permission", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }


  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }


  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }


  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }


  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }


  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }


  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }


  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }


  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }


  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }


  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }


  /**
   * Permission.RolePermission
   */
  export type Permission$RolePermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }


  /**
   * Permission.UserPermission
   */
  export type Permission$UserPermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }


  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
  }



  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _avg: RolePermissionAvgAggregateOutputType | null
    _sum: RolePermissionSumAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionAvgAggregateOutputType = {
    id: number | null
    id_permission: number | null
    id_role: number | null
  }

  export type RolePermissionSumAggregateOutputType = {
    id: number | null
    id_permission: number | null
    id_role: number | null
  }

  export type RolePermissionMinAggregateOutputType = {
    id: number | null
    id_permission: number | null
    id_role: number | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    id: number | null
    id_permission: number | null
    id_role: number | null
  }

  export type RolePermissionCountAggregateOutputType = {
    id: number
    id_permission: number
    id_role: number
    _all: number
  }


  export type RolePermissionAvgAggregateInputType = {
    id?: true
    id_permission?: true
    id_role?: true
  }

  export type RolePermissionSumAggregateInputType = {
    id?: true
    id_permission?: true
    id_role?: true
  }

  export type RolePermissionMinAggregateInputType = {
    id?: true
    id_permission?: true
    id_role?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    id?: true
    id_permission?: true
    id_role?: true
  }

  export type RolePermissionCountAggregateInputType = {
    id?: true
    id_permission?: true
    id_role?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _avg?: RolePermissionAvgAggregateInputType
    _sum?: RolePermissionSumAggregateInputType
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    id: number
    id_permission: number
    id_role: number
    _count: RolePermissionCountAggregateOutputType | null
    _avg: RolePermissionAvgAggregateOutputType | null
    _sum: RolePermissionSumAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_permission?: boolean
    id_role?: boolean
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectScalar = {
    id?: boolean
    id_permission?: boolean
    id_role?: boolean
  }

  export type RolePermissionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }


  export type $RolePermissionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      permission: Prisma.$PermissionPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_permission: number
      id_role: number
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }


  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RolePermissionFindManyArgs, 'select' | 'include'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RolePermissionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>
    ): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RolePermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RolePermissionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>
    ): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RolePermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
    **/
    create<T extends RolePermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>
    ): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RolePermissions.
     *     @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     *     @example
     *     // Create many RolePermissions
     *     const rolePermission = await prisma.rolePermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RolePermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
    **/
    delete<T extends RolePermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>
    ): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RolePermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>
    ): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RolePermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RolePermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
    **/
    upsert<T extends RolePermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>
    ): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RolePermission model
   */ 
  interface RolePermissionFieldRefs {
    readonly id: FieldRef<"RolePermission", 'Int'>
    readonly id_permission: FieldRef<"RolePermission", 'Int'>
    readonly id_role: FieldRef<"RolePermission", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }


  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }


  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }


  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }


  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }


  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }


  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }


  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
  }


  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }


  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }


  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
  }


  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }



  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _avg: UserPermissionAvgAggregateOutputType | null
    _sum: UserPermissionSumAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_permission: number | null
  }

  export type UserPermissionSumAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_permission: number | null
  }

  export type UserPermissionMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_permission: number | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_permission: number | null
  }

  export type UserPermissionCountAggregateOutputType = {
    id: number
    id_user: number
    id_permission: number
    _all: number
  }


  export type UserPermissionAvgAggregateInputType = {
    id?: true
    id_user?: true
    id_permission?: true
  }

  export type UserPermissionSumAggregateInputType = {
    id?: true
    id_user?: true
    id_permission?: true
  }

  export type UserPermissionMinAggregateInputType = {
    id?: true
    id_user?: true
    id_permission?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    id?: true
    id_user?: true
    id_permission?: true
  }

  export type UserPermissionCountAggregateInputType = {
    id?: true
    id_user?: true
    id_permission?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _avg?: UserPermissionAvgAggregateInputType
    _sum?: UserPermissionSumAggregateInputType
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    id: number
    id_user: number
    id_permission: number
    _count: UserPermissionCountAggregateOutputType | null
    _avg: UserPermissionAvgAggregateOutputType | null
    _sum: UserPermissionSumAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    id_permission?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectScalar = {
    id?: boolean
    id_user?: boolean
    id_permission?: boolean
  }

  export type UserPermissionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }


  export type $UserPermissionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      id_permission: number
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }


  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserPermissionFindManyArgs, 'select' | 'include'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserPermissionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserPermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserPermissionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserPermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
    **/
    create<T extends UserPermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserPermissions.
     *     @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     *     @example
     *     // Create many UserPermissions
     *     const userPermission = await prisma.userPermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserPermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
    **/
    delete<T extends UserPermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserPermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserPermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserPermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
    **/
    upsert<T extends UserPermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserPermission model
   */ 
  interface UserPermissionFieldRefs {
    readonly id: FieldRef<"UserPermission", 'Int'>
    readonly id_user: FieldRef<"UserPermission", 'Int'>
    readonly id_permission: FieldRef<"UserPermission", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }


  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }


  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }


  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }


  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }


  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }


  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }


  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
  }


  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }


  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }


  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
  }


  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }



  /**
   * Model Denuncia
   */

  export type AggregateDenuncia = {
    _count: DenunciaCountAggregateOutputType | null
    _avg: DenunciaAvgAggregateOutputType | null
    _sum: DenunciaSumAggregateOutputType | null
    _min: DenunciaMinAggregateOutputType | null
    _max: DenunciaMaxAggregateOutputType | null
  }

  export type DenunciaAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type DenunciaSumAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type DenunciaMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    description: string | null
    alvo: string | null
  }

  export type DenunciaMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    description: string | null
    alvo: string | null
  }

  export type DenunciaCountAggregateOutputType = {
    id: number
    id_user: number
    description: number
    alvo: number
    _all: number
  }


  export type DenunciaAvgAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type DenunciaSumAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type DenunciaMinAggregateInputType = {
    id?: true
    id_user?: true
    description?: true
    alvo?: true
  }

  export type DenunciaMaxAggregateInputType = {
    id?: true
    id_user?: true
    description?: true
    alvo?: true
  }

  export type DenunciaCountAggregateInputType = {
    id?: true
    id_user?: true
    description?: true
    alvo?: true
    _all?: true
  }

  export type DenunciaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Denuncia to aggregate.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Denuncias
    **/
    _count?: true | DenunciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DenunciaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DenunciaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DenunciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DenunciaMaxAggregateInputType
  }

  export type GetDenunciaAggregateType<T extends DenunciaAggregateArgs> = {
        [P in keyof T & keyof AggregateDenuncia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDenuncia[P]>
      : GetScalarType<T[P], AggregateDenuncia[P]>
  }




  export type DenunciaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DenunciaWhereInput
    orderBy?: DenunciaOrderByWithAggregationInput | DenunciaOrderByWithAggregationInput[]
    by: DenunciaScalarFieldEnum[] | DenunciaScalarFieldEnum
    having?: DenunciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DenunciaCountAggregateInputType | true
    _avg?: DenunciaAvgAggregateInputType
    _sum?: DenunciaSumAggregateInputType
    _min?: DenunciaMinAggregateInputType
    _max?: DenunciaMaxAggregateInputType
  }

  export type DenunciaGroupByOutputType = {
    id: number
    id_user: number
    description: string
    alvo: string
    _count: DenunciaCountAggregateOutputType | null
    _avg: DenunciaAvgAggregateOutputType | null
    _sum: DenunciaSumAggregateOutputType | null
    _min: DenunciaMinAggregateOutputType | null
    _max: DenunciaMaxAggregateOutputType | null
  }

  type GetDenunciaGroupByPayload<T extends DenunciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DenunciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DenunciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DenunciaGroupByOutputType[P]>
            : GetScalarType<T[P], DenunciaGroupByOutputType[P]>
        }
      >
    >


  export type DenunciaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    description?: boolean
    alvo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["denuncia"]>

  export type DenunciaSelectScalar = {
    id?: boolean
    id_user?: boolean
    description?: boolean
    alvo?: boolean
  }

  export type DenunciaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $DenunciaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Denuncia"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      description: string
      alvo: string
    }, ExtArgs["result"]["denuncia"]>
    composites: {}
  }


  type DenunciaGetPayload<S extends boolean | null | undefined | DenunciaDefaultArgs> = $Result.GetResult<Prisma.$DenunciaPayload, S>

  type DenunciaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DenunciaFindManyArgs, 'select' | 'include'> & {
      select?: DenunciaCountAggregateInputType | true
    }

  export interface DenunciaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Denuncia'], meta: { name: 'Denuncia' } }
    /**
     * Find zero or one Denuncia that matches the filter.
     * @param {DenunciaFindUniqueArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DenunciaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaFindUniqueArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Denuncia that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DenunciaFindUniqueOrThrowArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DenunciaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Denuncia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaFindFirstArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DenunciaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaFindFirstArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Denuncia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaFindFirstOrThrowArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DenunciaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Denuncias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Denuncias
     * const denuncias = await prisma.denuncia.findMany()
     * 
     * // Get first 10 Denuncias
     * const denuncias = await prisma.denuncia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const denunciaWithIdOnly = await prisma.denuncia.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DenunciaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Denuncia.
     * @param {DenunciaCreateArgs} args - Arguments to create a Denuncia.
     * @example
     * // Create one Denuncia
     * const Denuncia = await prisma.denuncia.create({
     *   data: {
     *     // ... data to create a Denuncia
     *   }
     * })
     * 
    **/
    create<T extends DenunciaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaCreateArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Denuncias.
     *     @param {DenunciaCreateManyArgs} args - Arguments to create many Denuncias.
     *     @example
     *     // Create many Denuncias
     *     const denuncia = await prisma.denuncia.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DenunciaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Denuncia.
     * @param {DenunciaDeleteArgs} args - Arguments to delete one Denuncia.
     * @example
     * // Delete one Denuncia
     * const Denuncia = await prisma.denuncia.delete({
     *   where: {
     *     // ... filter to delete one Denuncia
     *   }
     * })
     * 
    **/
    delete<T extends DenunciaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaDeleteArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Denuncia.
     * @param {DenunciaUpdateArgs} args - Arguments to update one Denuncia.
     * @example
     * // Update one Denuncia
     * const denuncia = await prisma.denuncia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DenunciaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaUpdateArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Denuncias.
     * @param {DenunciaDeleteManyArgs} args - Arguments to filter Denuncias to delete.
     * @example
     * // Delete a few Denuncias
     * const { count } = await prisma.denuncia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DenunciaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Denuncias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Denuncias
     * const denuncia = await prisma.denuncia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DenunciaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Denuncia.
     * @param {DenunciaUpsertArgs} args - Arguments to update or create a Denuncia.
     * @example
     * // Update or create a Denuncia
     * const denuncia = await prisma.denuncia.upsert({
     *   create: {
     *     // ... data to create a Denuncia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Denuncia we want to update
     *   }
     * })
    **/
    upsert<T extends DenunciaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaUpsertArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Denuncias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaCountArgs} args - Arguments to filter Denuncias to count.
     * @example
     * // Count the number of Denuncias
     * const count = await prisma.denuncia.count({
     *   where: {
     *     // ... the filter for the Denuncias we want to count
     *   }
     * })
    **/
    count<T extends DenunciaCountArgs>(
      args?: Subset<T, DenunciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DenunciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Denuncia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DenunciaAggregateArgs>(args: Subset<T, DenunciaAggregateArgs>): Prisma.PrismaPromise<GetDenunciaAggregateType<T>>

    /**
     * Group by Denuncia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DenunciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DenunciaGroupByArgs['orderBy'] }
        : { orderBy?: DenunciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DenunciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDenunciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Denuncia model
   */
  readonly fields: DenunciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Denuncia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DenunciaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Denuncia model
   */ 
  interface DenunciaFieldRefs {
    readonly id: FieldRef<"Denuncia", 'Int'>
    readonly id_user: FieldRef<"Denuncia", 'Int'>
    readonly description: FieldRef<"Denuncia", 'String'>
    readonly alvo: FieldRef<"Denuncia", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Denuncia findUnique
   */
  export type DenunciaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where: DenunciaWhereUniqueInput
  }


  /**
   * Denuncia findUniqueOrThrow
   */
  export type DenunciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where: DenunciaWhereUniqueInput
  }


  /**
   * Denuncia findFirst
   */
  export type DenunciaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Denuncias.
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Denuncias.
     */
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }


  /**
   * Denuncia findFirstOrThrow
   */
  export type DenunciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Denuncias.
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Denuncias.
     */
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }


  /**
   * Denuncia findMany
   */
  export type DenunciaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncias to fetch.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Denuncias.
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }


  /**
   * Denuncia create
   */
  export type DenunciaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * The data needed to create a Denuncia.
     */
    data: XOR<DenunciaCreateInput, DenunciaUncheckedCreateInput>
  }


  /**
   * Denuncia createMany
   */
  export type DenunciaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Denuncias.
     */
    data: DenunciaCreateManyInput | DenunciaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Denuncia update
   */
  export type DenunciaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * The data needed to update a Denuncia.
     */
    data: XOR<DenunciaUpdateInput, DenunciaUncheckedUpdateInput>
    /**
     * Choose, which Denuncia to update.
     */
    where: DenunciaWhereUniqueInput
  }


  /**
   * Denuncia updateMany
   */
  export type DenunciaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Denuncias.
     */
    data: XOR<DenunciaUpdateManyMutationInput, DenunciaUncheckedUpdateManyInput>
    /**
     * Filter which Denuncias to update
     */
    where?: DenunciaWhereInput
  }


  /**
   * Denuncia upsert
   */
  export type DenunciaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * The filter to search for the Denuncia to update in case it exists.
     */
    where: DenunciaWhereUniqueInput
    /**
     * In case the Denuncia found by the `where` argument doesn't exist, create a new Denuncia with this data.
     */
    create: XOR<DenunciaCreateInput, DenunciaUncheckedCreateInput>
    /**
     * In case the Denuncia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DenunciaUpdateInput, DenunciaUncheckedUpdateInput>
  }


  /**
   * Denuncia delete
   */
  export type DenunciaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter which Denuncia to delete.
     */
    where: DenunciaWhereUniqueInput
  }


  /**
   * Denuncia deleteMany
   */
  export type DenunciaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Denuncias to delete
     */
    where?: DenunciaWhereInput
  }


  /**
   * Denuncia without action
   */
  export type DenunciaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DenunciaInclude<ExtArgs> | null
  }



  /**
   * Model Linha
   */

  export type AggregateLinha = {
    _count: LinhaCountAggregateOutputType | null
    _avg: LinhaAvgAggregateOutputType | null
    _sum: LinhaSumAggregateOutputType | null
    _min: LinhaMinAggregateOutputType | null
    _max: LinhaMaxAggregateOutputType | null
  }

  export type LinhaAvgAggregateOutputType = {
    id: number | null
    id_produto: number | null
  }

  export type LinhaSumAggregateOutputType = {
    id: number | null
    id_produto: number | null
  }

  export type LinhaMinAggregateOutputType = {
    id: number | null
    date: string | null
    qrcode: string | null
    id_produto: number | null
  }

  export type LinhaMaxAggregateOutputType = {
    id: number | null
    date: string | null
    qrcode: string | null
    id_produto: number | null
  }

  export type LinhaCountAggregateOutputType = {
    id: number
    date: number
    qrcode: number
    id_produto: number
    _all: number
  }


  export type LinhaAvgAggregateInputType = {
    id?: true
    id_produto?: true
  }

  export type LinhaSumAggregateInputType = {
    id?: true
    id_produto?: true
  }

  export type LinhaMinAggregateInputType = {
    id?: true
    date?: true
    qrcode?: true
    id_produto?: true
  }

  export type LinhaMaxAggregateInputType = {
    id?: true
    date?: true
    qrcode?: true
    id_produto?: true
  }

  export type LinhaCountAggregateInputType = {
    id?: true
    date?: true
    qrcode?: true
    id_produto?: true
    _all?: true
  }

  export type LinhaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Linha to aggregate.
     */
    where?: LinhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Linhas to fetch.
     */
    orderBy?: LinhaOrderByWithRelationInput | LinhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LinhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Linhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Linhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Linhas
    **/
    _count?: true | LinhaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LinhaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LinhaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LinhaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LinhaMaxAggregateInputType
  }

  export type GetLinhaAggregateType<T extends LinhaAggregateArgs> = {
        [P in keyof T & keyof AggregateLinha]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLinha[P]>
      : GetScalarType<T[P], AggregateLinha[P]>
  }




  export type LinhaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LinhaWhereInput
    orderBy?: LinhaOrderByWithAggregationInput | LinhaOrderByWithAggregationInput[]
    by: LinhaScalarFieldEnum[] | LinhaScalarFieldEnum
    having?: LinhaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LinhaCountAggregateInputType | true
    _avg?: LinhaAvgAggregateInputType
    _sum?: LinhaSumAggregateInputType
    _min?: LinhaMinAggregateInputType
    _max?: LinhaMaxAggregateInputType
  }

  export type LinhaGroupByOutputType = {
    id: number
    date: string
    qrcode: string | null
    id_produto: number
    _count: LinhaCountAggregateOutputType | null
    _avg: LinhaAvgAggregateOutputType | null
    _sum: LinhaSumAggregateOutputType | null
    _min: LinhaMinAggregateOutputType | null
    _max: LinhaMaxAggregateOutputType | null
  }

  type GetLinhaGroupByPayload<T extends LinhaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LinhaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LinhaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LinhaGroupByOutputType[P]>
            : GetScalarType<T[P], LinhaGroupByOutputType[P]>
        }
      >
    >


  export type LinhaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    qrcode?: boolean
    id_produto?: boolean
    Relatorio1?: boolean | Linha$Relatorio1Args<ExtArgs>
    Relatorio2?: boolean | Linha$Relatorio2Args<ExtArgs>
    Relatorio3?: boolean | Linha$Relatorio3Args<ExtArgs>
    Relatorio4?: boolean | Linha$Relatorio4Args<ExtArgs>
    Relatorio5?: boolean | Linha$Relatorio5Args<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
    _count?: boolean | LinhaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["linha"]>

  export type LinhaSelectScalar = {
    id?: boolean
    date?: boolean
    qrcode?: boolean
    id_produto?: boolean
  }

  export type LinhaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Relatorio1?: boolean | Linha$Relatorio1Args<ExtArgs>
    Relatorio2?: boolean | Linha$Relatorio2Args<ExtArgs>
    Relatorio3?: boolean | Linha$Relatorio3Args<ExtArgs>
    Relatorio4?: boolean | Linha$Relatorio4Args<ExtArgs>
    Relatorio5?: boolean | Linha$Relatorio5Args<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
    _count?: boolean | LinhaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LinhaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Linha"
    objects: {
      Relatorio1: Prisma.$Prod_AgriPayload<ExtArgs>[]
      Relatorio2: Prisma.$EmbalagemPayload<ExtArgs>[]
      Relatorio3: Prisma.$TransportePayload<ExtArgs>[]
      Relatorio4: Prisma.$ArmazenamentoPayload<ExtArgs>[]
      Relatorio5: Prisma.$VarejoPayload<ExtArgs>[]
      produto: Prisma.$ProdutoPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      date: string
      qrcode: string | null
      id_produto: number
    }, ExtArgs["result"]["linha"]>
    composites: {}
  }


  type LinhaGetPayload<S extends boolean | null | undefined | LinhaDefaultArgs> = $Result.GetResult<Prisma.$LinhaPayload, S>

  type LinhaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LinhaFindManyArgs, 'select' | 'include'> & {
      select?: LinhaCountAggregateInputType | true
    }

  export interface LinhaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Linha'], meta: { name: 'Linha' } }
    /**
     * Find zero or one Linha that matches the filter.
     * @param {LinhaFindUniqueArgs} args - Arguments to find a Linha
     * @example
     * // Get one Linha
     * const linha = await prisma.linha.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LinhaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LinhaFindUniqueArgs<ExtArgs>>
    ): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Linha that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LinhaFindUniqueOrThrowArgs} args - Arguments to find a Linha
     * @example
     * // Get one Linha
     * const linha = await prisma.linha.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LinhaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LinhaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Linha that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinhaFindFirstArgs} args - Arguments to find a Linha
     * @example
     * // Get one Linha
     * const linha = await prisma.linha.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LinhaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LinhaFindFirstArgs<ExtArgs>>
    ): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Linha that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinhaFindFirstOrThrowArgs} args - Arguments to find a Linha
     * @example
     * // Get one Linha
     * const linha = await prisma.linha.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LinhaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LinhaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Linhas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinhaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Linhas
     * const linhas = await prisma.linha.findMany()
     * 
     * // Get first 10 Linhas
     * const linhas = await prisma.linha.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const linhaWithIdOnly = await prisma.linha.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LinhaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LinhaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Linha.
     * @param {LinhaCreateArgs} args - Arguments to create a Linha.
     * @example
     * // Create one Linha
     * const Linha = await prisma.linha.create({
     *   data: {
     *     // ... data to create a Linha
     *   }
     * })
     * 
    **/
    create<T extends LinhaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LinhaCreateArgs<ExtArgs>>
    ): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Linhas.
     *     @param {LinhaCreateManyArgs} args - Arguments to create many Linhas.
     *     @example
     *     // Create many Linhas
     *     const linha = await prisma.linha.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LinhaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LinhaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Linha.
     * @param {LinhaDeleteArgs} args - Arguments to delete one Linha.
     * @example
     * // Delete one Linha
     * const Linha = await prisma.linha.delete({
     *   where: {
     *     // ... filter to delete one Linha
     *   }
     * })
     * 
    **/
    delete<T extends LinhaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LinhaDeleteArgs<ExtArgs>>
    ): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Linha.
     * @param {LinhaUpdateArgs} args - Arguments to update one Linha.
     * @example
     * // Update one Linha
     * const linha = await prisma.linha.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LinhaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LinhaUpdateArgs<ExtArgs>>
    ): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Linhas.
     * @param {LinhaDeleteManyArgs} args - Arguments to filter Linhas to delete.
     * @example
     * // Delete a few Linhas
     * const { count } = await prisma.linha.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LinhaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LinhaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Linhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinhaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Linhas
     * const linha = await prisma.linha.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LinhaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LinhaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Linha.
     * @param {LinhaUpsertArgs} args - Arguments to update or create a Linha.
     * @example
     * // Update or create a Linha
     * const linha = await prisma.linha.upsert({
     *   create: {
     *     // ... data to create a Linha
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Linha we want to update
     *   }
     * })
    **/
    upsert<T extends LinhaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LinhaUpsertArgs<ExtArgs>>
    ): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Linhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinhaCountArgs} args - Arguments to filter Linhas to count.
     * @example
     * // Count the number of Linhas
     * const count = await prisma.linha.count({
     *   where: {
     *     // ... the filter for the Linhas we want to count
     *   }
     * })
    **/
    count<T extends LinhaCountArgs>(
      args?: Subset<T, LinhaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LinhaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Linha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinhaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LinhaAggregateArgs>(args: Subset<T, LinhaAggregateArgs>): Prisma.PrismaPromise<GetLinhaAggregateType<T>>

    /**
     * Group by Linha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinhaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LinhaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LinhaGroupByArgs['orderBy'] }
        : { orderBy?: LinhaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LinhaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLinhaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Linha model
   */
  readonly fields: LinhaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Linha.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LinhaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Relatorio1<T extends Linha$Relatorio1Args<ExtArgs> = {}>(args?: Subset<T, Linha$Relatorio1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'findMany'> | Null>;

    Relatorio2<T extends Linha$Relatorio2Args<ExtArgs> = {}>(args?: Subset<T, Linha$Relatorio2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'findMany'> | Null>;

    Relatorio3<T extends Linha$Relatorio3Args<ExtArgs> = {}>(args?: Subset<T, Linha$Relatorio3Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'findMany'> | Null>;

    Relatorio4<T extends Linha$Relatorio4Args<ExtArgs> = {}>(args?: Subset<T, Linha$Relatorio4Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'findMany'> | Null>;

    Relatorio5<T extends Linha$Relatorio5Args<ExtArgs> = {}>(args?: Subset<T, Linha$Relatorio5Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'findMany'> | Null>;

    produto<T extends ProdutoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutoDefaultArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Linha model
   */ 
  interface LinhaFieldRefs {
    readonly id: FieldRef<"Linha", 'Int'>
    readonly date: FieldRef<"Linha", 'String'>
    readonly qrcode: FieldRef<"Linha", 'String'>
    readonly id_produto: FieldRef<"Linha", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Linha findUnique
   */
  export type LinhaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    /**
     * Filter, which Linha to fetch.
     */
    where: LinhaWhereUniqueInput
  }


  /**
   * Linha findUniqueOrThrow
   */
  export type LinhaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    /**
     * Filter, which Linha to fetch.
     */
    where: LinhaWhereUniqueInput
  }


  /**
   * Linha findFirst
   */
  export type LinhaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    /**
     * Filter, which Linha to fetch.
     */
    where?: LinhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Linhas to fetch.
     */
    orderBy?: LinhaOrderByWithRelationInput | LinhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Linhas.
     */
    cursor?: LinhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Linhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Linhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Linhas.
     */
    distinct?: LinhaScalarFieldEnum | LinhaScalarFieldEnum[]
  }


  /**
   * Linha findFirstOrThrow
   */
  export type LinhaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    /**
     * Filter, which Linha to fetch.
     */
    where?: LinhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Linhas to fetch.
     */
    orderBy?: LinhaOrderByWithRelationInput | LinhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Linhas.
     */
    cursor?: LinhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Linhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Linhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Linhas.
     */
    distinct?: LinhaScalarFieldEnum | LinhaScalarFieldEnum[]
  }


  /**
   * Linha findMany
   */
  export type LinhaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    /**
     * Filter, which Linhas to fetch.
     */
    where?: LinhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Linhas to fetch.
     */
    orderBy?: LinhaOrderByWithRelationInput | LinhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Linhas.
     */
    cursor?: LinhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Linhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Linhas.
     */
    skip?: number
    distinct?: LinhaScalarFieldEnum | LinhaScalarFieldEnum[]
  }


  /**
   * Linha create
   */
  export type LinhaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    /**
     * The data needed to create a Linha.
     */
    data: XOR<LinhaCreateInput, LinhaUncheckedCreateInput>
  }


  /**
   * Linha createMany
   */
  export type LinhaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Linhas.
     */
    data: LinhaCreateManyInput | LinhaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Linha update
   */
  export type LinhaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    /**
     * The data needed to update a Linha.
     */
    data: XOR<LinhaUpdateInput, LinhaUncheckedUpdateInput>
    /**
     * Choose, which Linha to update.
     */
    where: LinhaWhereUniqueInput
  }


  /**
   * Linha updateMany
   */
  export type LinhaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Linhas.
     */
    data: XOR<LinhaUpdateManyMutationInput, LinhaUncheckedUpdateManyInput>
    /**
     * Filter which Linhas to update
     */
    where?: LinhaWhereInput
  }


  /**
   * Linha upsert
   */
  export type LinhaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    /**
     * The filter to search for the Linha to update in case it exists.
     */
    where: LinhaWhereUniqueInput
    /**
     * In case the Linha found by the `where` argument doesn't exist, create a new Linha with this data.
     */
    create: XOR<LinhaCreateInput, LinhaUncheckedCreateInput>
    /**
     * In case the Linha was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LinhaUpdateInput, LinhaUncheckedUpdateInput>
  }


  /**
   * Linha delete
   */
  export type LinhaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    /**
     * Filter which Linha to delete.
     */
    where: LinhaWhereUniqueInput
  }


  /**
   * Linha deleteMany
   */
  export type LinhaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Linhas to delete
     */
    where?: LinhaWhereInput
  }


  /**
   * Linha.Relatorio1
   */
  export type Linha$Relatorio1Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    where?: Prod_AgriWhereInput
    orderBy?: Prod_AgriOrderByWithRelationInput | Prod_AgriOrderByWithRelationInput[]
    cursor?: Prod_AgriWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Prod_AgriScalarFieldEnum | Prod_AgriScalarFieldEnum[]
  }


  /**
   * Linha.Relatorio2
   */
  export type Linha$Relatorio2Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    where?: EmbalagemWhereInput
    orderBy?: EmbalagemOrderByWithRelationInput | EmbalagemOrderByWithRelationInput[]
    cursor?: EmbalagemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmbalagemScalarFieldEnum | EmbalagemScalarFieldEnum[]
  }


  /**
   * Linha.Relatorio3
   */
  export type Linha$Relatorio3Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    where?: TransporteWhereInput
    orderBy?: TransporteOrderByWithRelationInput | TransporteOrderByWithRelationInput[]
    cursor?: TransporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransporteScalarFieldEnum | TransporteScalarFieldEnum[]
  }


  /**
   * Linha.Relatorio4
   */
  export type Linha$Relatorio4Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    where?: ArmazenamentoWhereInput
    orderBy?: ArmazenamentoOrderByWithRelationInput | ArmazenamentoOrderByWithRelationInput[]
    cursor?: ArmazenamentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArmazenamentoScalarFieldEnum | ArmazenamentoScalarFieldEnum[]
  }


  /**
   * Linha.Relatorio5
   */
  export type Linha$Relatorio5Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    where?: VarejoWhereInput
    orderBy?: VarejoOrderByWithRelationInput | VarejoOrderByWithRelationInput[]
    cursor?: VarejoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VarejoScalarFieldEnum | VarejoScalarFieldEnum[]
  }


  /**
   * Linha without action
   */
  export type LinhaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
  }



  /**
   * Model Prod_Agri
   */

  export type AggregateProd_Agri = {
    _count: Prod_AgriCountAggregateOutputType | null
    _avg: Prod_AgriAvgAggregateOutputType | null
    _sum: Prod_AgriSumAggregateOutputType | null
    _min: Prod_AgriMinAggregateOutputType | null
    _max: Prod_AgriMaxAggregateOutputType | null
  }

  export type Prod_AgriAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type Prod_AgriSumAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type Prod_AgriMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    local: string | null
    dt_plantio: string | null
    dt_colheita: string | null
    insumo: string | null
    praticas: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type Prod_AgriMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    local: string | null
    dt_plantio: string | null
    dt_colheita: string | null
    insumo: string | null
    praticas: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type Prod_AgriCountAggregateOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: number
    local: number
    dt_plantio: number
    dt_colheita: number
    insumo: number
    praticas: number
    private: number
    medalha: number
    _all: number
  }


  export type Prod_AgriAvgAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type Prod_AgriSumAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type Prod_AgriMinAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    dt_plantio?: true
    dt_colheita?: true
    insumo?: true
    praticas?: true
    private?: true
    medalha?: true
  }

  export type Prod_AgriMaxAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    dt_plantio?: true
    dt_colheita?: true
    insumo?: true
    praticas?: true
    private?: true
    medalha?: true
  }

  export type Prod_AgriCountAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    dt_plantio?: true
    dt_colheita?: true
    insumo?: true
    praticas?: true
    private?: true
    medalha?: true
    _all?: true
  }

  export type Prod_AgriAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prod_Agri to aggregate.
     */
    where?: Prod_AgriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prod_Agris to fetch.
     */
    orderBy?: Prod_AgriOrderByWithRelationInput | Prod_AgriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Prod_AgriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prod_Agris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prod_Agris.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prod_Agris
    **/
    _count?: true | Prod_AgriCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Prod_AgriAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Prod_AgriSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Prod_AgriMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Prod_AgriMaxAggregateInputType
  }

  export type GetProd_AgriAggregateType<T extends Prod_AgriAggregateArgs> = {
        [P in keyof T & keyof AggregateProd_Agri]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProd_Agri[P]>
      : GetScalarType<T[P], AggregateProd_Agri[P]>
  }




  export type Prod_AgriGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Prod_AgriWhereInput
    orderBy?: Prod_AgriOrderByWithAggregationInput | Prod_AgriOrderByWithAggregationInput[]
    by: Prod_AgriScalarFieldEnum[] | Prod_AgriScalarFieldEnum
    having?: Prod_AgriScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Prod_AgriCountAggregateInputType | true
    _avg?: Prod_AgriAvgAggregateInputType
    _sum?: Prod_AgriSumAggregateInputType
    _min?: Prod_AgriMinAggregateInputType
    _max?: Prod_AgriMaxAggregateInputType
  }

  export type Prod_AgriGroupByOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private: boolean
    medalha: boolean
    _count: Prod_AgriCountAggregateOutputType | null
    _avg: Prod_AgriAvgAggregateOutputType | null
    _sum: Prod_AgriSumAggregateOutputType | null
    _min: Prod_AgriMinAggregateOutputType | null
    _max: Prod_AgriMaxAggregateOutputType | null
  }

  type GetProd_AgriGroupByPayload<T extends Prod_AgriGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Prod_AgriGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Prod_AgriGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Prod_AgriGroupByOutputType[P]>
            : GetScalarType<T[P], Prod_AgriGroupByOutputType[P]>
        }
      >
    >


  export type Prod_AgriSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    local?: boolean
    dt_plantio?: boolean
    dt_colheita?: boolean
    insumo?: boolean
    praticas?: boolean
    private?: boolean
    medalha?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prod_Agri"]>

  export type Prod_AgriSelectScalar = {
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    local?: boolean
    dt_plantio?: boolean
    dt_colheita?: boolean
    insumo?: boolean
    praticas?: boolean
    private?: boolean
    medalha?: boolean
  }

  export type Prod_AgriInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }


  export type $Prod_AgriPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Prod_Agri"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      linha: Prisma.$LinhaPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      id_linha: number
      nome: string
      local: string
      dt_plantio: string
      dt_colheita: string
      insumo: string
      praticas: string
      private: boolean
      medalha: boolean
    }, ExtArgs["result"]["prod_Agri"]>
    composites: {}
  }


  type Prod_AgriGetPayload<S extends boolean | null | undefined | Prod_AgriDefaultArgs> = $Result.GetResult<Prisma.$Prod_AgriPayload, S>

  type Prod_AgriCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Prod_AgriFindManyArgs, 'select' | 'include'> & {
      select?: Prod_AgriCountAggregateInputType | true
    }

  export interface Prod_AgriDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prod_Agri'], meta: { name: 'Prod_Agri' } }
    /**
     * Find zero or one Prod_Agri that matches the filter.
     * @param {Prod_AgriFindUniqueArgs} args - Arguments to find a Prod_Agri
     * @example
     * // Get one Prod_Agri
     * const prod_Agri = await prisma.prod_Agri.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Prod_AgriFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Prod_AgriFindUniqueArgs<ExtArgs>>
    ): Prisma__Prod_AgriClient<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Prod_Agri that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Prod_AgriFindUniqueOrThrowArgs} args - Arguments to find a Prod_Agri
     * @example
     * // Get one Prod_Agri
     * const prod_Agri = await prisma.prod_Agri.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Prod_AgriFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Prod_AgriFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Prod_AgriClient<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Prod_Agri that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prod_AgriFindFirstArgs} args - Arguments to find a Prod_Agri
     * @example
     * // Get one Prod_Agri
     * const prod_Agri = await prisma.prod_Agri.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Prod_AgriFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Prod_AgriFindFirstArgs<ExtArgs>>
    ): Prisma__Prod_AgriClient<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Prod_Agri that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prod_AgriFindFirstOrThrowArgs} args - Arguments to find a Prod_Agri
     * @example
     * // Get one Prod_Agri
     * const prod_Agri = await prisma.prod_Agri.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Prod_AgriFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Prod_AgriFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Prod_AgriClient<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Prod_Agris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prod_AgriFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prod_Agris
     * const prod_Agris = await prisma.prod_Agri.findMany()
     * 
     * // Get first 10 Prod_Agris
     * const prod_Agris = await prisma.prod_Agri.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prod_AgriWithIdOnly = await prisma.prod_Agri.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Prod_AgriFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Prod_AgriFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Prod_Agri.
     * @param {Prod_AgriCreateArgs} args - Arguments to create a Prod_Agri.
     * @example
     * // Create one Prod_Agri
     * const Prod_Agri = await prisma.prod_Agri.create({
     *   data: {
     *     // ... data to create a Prod_Agri
     *   }
     * })
     * 
    **/
    create<T extends Prod_AgriCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Prod_AgriCreateArgs<ExtArgs>>
    ): Prisma__Prod_AgriClient<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Prod_Agris.
     *     @param {Prod_AgriCreateManyArgs} args - Arguments to create many Prod_Agris.
     *     @example
     *     // Create many Prod_Agris
     *     const prod_Agri = await prisma.prod_Agri.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Prod_AgriCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Prod_AgriCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Prod_Agri.
     * @param {Prod_AgriDeleteArgs} args - Arguments to delete one Prod_Agri.
     * @example
     * // Delete one Prod_Agri
     * const Prod_Agri = await prisma.prod_Agri.delete({
     *   where: {
     *     // ... filter to delete one Prod_Agri
     *   }
     * })
     * 
    **/
    delete<T extends Prod_AgriDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Prod_AgriDeleteArgs<ExtArgs>>
    ): Prisma__Prod_AgriClient<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Prod_Agri.
     * @param {Prod_AgriUpdateArgs} args - Arguments to update one Prod_Agri.
     * @example
     * // Update one Prod_Agri
     * const prod_Agri = await prisma.prod_Agri.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Prod_AgriUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Prod_AgriUpdateArgs<ExtArgs>>
    ): Prisma__Prod_AgriClient<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Prod_Agris.
     * @param {Prod_AgriDeleteManyArgs} args - Arguments to filter Prod_Agris to delete.
     * @example
     * // Delete a few Prod_Agris
     * const { count } = await prisma.prod_Agri.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Prod_AgriDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Prod_AgriDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prod_Agris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prod_AgriUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prod_Agris
     * const prod_Agri = await prisma.prod_Agri.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Prod_AgriUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Prod_AgriUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prod_Agri.
     * @param {Prod_AgriUpsertArgs} args - Arguments to update or create a Prod_Agri.
     * @example
     * // Update or create a Prod_Agri
     * const prod_Agri = await prisma.prod_Agri.upsert({
     *   create: {
     *     // ... data to create a Prod_Agri
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prod_Agri we want to update
     *   }
     * })
    **/
    upsert<T extends Prod_AgriUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Prod_AgriUpsertArgs<ExtArgs>>
    ): Prisma__Prod_AgriClient<$Result.GetResult<Prisma.$Prod_AgriPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Prod_Agris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prod_AgriCountArgs} args - Arguments to filter Prod_Agris to count.
     * @example
     * // Count the number of Prod_Agris
     * const count = await prisma.prod_Agri.count({
     *   where: {
     *     // ... the filter for the Prod_Agris we want to count
     *   }
     * })
    **/
    count<T extends Prod_AgriCountArgs>(
      args?: Subset<T, Prod_AgriCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Prod_AgriCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prod_Agri.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prod_AgriAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Prod_AgriAggregateArgs>(args: Subset<T, Prod_AgriAggregateArgs>): Prisma.PrismaPromise<GetProd_AgriAggregateType<T>>

    /**
     * Group by Prod_Agri.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prod_AgriGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Prod_AgriGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Prod_AgriGroupByArgs['orderBy'] }
        : { orderBy?: Prod_AgriGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Prod_AgriGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProd_AgriGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prod_Agri model
   */
  readonly fields: Prod_AgriFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prod_Agri.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Prod_AgriClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    linha<T extends LinhaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LinhaDefaultArgs<ExtArgs>>): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Prod_Agri model
   */ 
  interface Prod_AgriFieldRefs {
    readonly id: FieldRef<"Prod_Agri", 'Int'>
    readonly id_user: FieldRef<"Prod_Agri", 'Int'>
    readonly id_linha: FieldRef<"Prod_Agri", 'Int'>
    readonly nome: FieldRef<"Prod_Agri", 'String'>
    readonly local: FieldRef<"Prod_Agri", 'String'>
    readonly dt_plantio: FieldRef<"Prod_Agri", 'String'>
    readonly dt_colheita: FieldRef<"Prod_Agri", 'String'>
    readonly insumo: FieldRef<"Prod_Agri", 'String'>
    readonly praticas: FieldRef<"Prod_Agri", 'String'>
    readonly private: FieldRef<"Prod_Agri", 'Boolean'>
    readonly medalha: FieldRef<"Prod_Agri", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Prod_Agri findUnique
   */
  export type Prod_AgriFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    /**
     * Filter, which Prod_Agri to fetch.
     */
    where: Prod_AgriWhereUniqueInput
  }


  /**
   * Prod_Agri findUniqueOrThrow
   */
  export type Prod_AgriFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    /**
     * Filter, which Prod_Agri to fetch.
     */
    where: Prod_AgriWhereUniqueInput
  }


  /**
   * Prod_Agri findFirst
   */
  export type Prod_AgriFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    /**
     * Filter, which Prod_Agri to fetch.
     */
    where?: Prod_AgriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prod_Agris to fetch.
     */
    orderBy?: Prod_AgriOrderByWithRelationInput | Prod_AgriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prod_Agris.
     */
    cursor?: Prod_AgriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prod_Agris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prod_Agris.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prod_Agris.
     */
    distinct?: Prod_AgriScalarFieldEnum | Prod_AgriScalarFieldEnum[]
  }


  /**
   * Prod_Agri findFirstOrThrow
   */
  export type Prod_AgriFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    /**
     * Filter, which Prod_Agri to fetch.
     */
    where?: Prod_AgriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prod_Agris to fetch.
     */
    orderBy?: Prod_AgriOrderByWithRelationInput | Prod_AgriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prod_Agris.
     */
    cursor?: Prod_AgriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prod_Agris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prod_Agris.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prod_Agris.
     */
    distinct?: Prod_AgriScalarFieldEnum | Prod_AgriScalarFieldEnum[]
  }


  /**
   * Prod_Agri findMany
   */
  export type Prod_AgriFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    /**
     * Filter, which Prod_Agris to fetch.
     */
    where?: Prod_AgriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prod_Agris to fetch.
     */
    orderBy?: Prod_AgriOrderByWithRelationInput | Prod_AgriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prod_Agris.
     */
    cursor?: Prod_AgriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prod_Agris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prod_Agris.
     */
    skip?: number
    distinct?: Prod_AgriScalarFieldEnum | Prod_AgriScalarFieldEnum[]
  }


  /**
   * Prod_Agri create
   */
  export type Prod_AgriCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    /**
     * The data needed to create a Prod_Agri.
     */
    data: XOR<Prod_AgriCreateInput, Prod_AgriUncheckedCreateInput>
  }


  /**
   * Prod_Agri createMany
   */
  export type Prod_AgriCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prod_Agris.
     */
    data: Prod_AgriCreateManyInput | Prod_AgriCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Prod_Agri update
   */
  export type Prod_AgriUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    /**
     * The data needed to update a Prod_Agri.
     */
    data: XOR<Prod_AgriUpdateInput, Prod_AgriUncheckedUpdateInput>
    /**
     * Choose, which Prod_Agri to update.
     */
    where: Prod_AgriWhereUniqueInput
  }


  /**
   * Prod_Agri updateMany
   */
  export type Prod_AgriUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prod_Agris.
     */
    data: XOR<Prod_AgriUpdateManyMutationInput, Prod_AgriUncheckedUpdateManyInput>
    /**
     * Filter which Prod_Agris to update
     */
    where?: Prod_AgriWhereInput
  }


  /**
   * Prod_Agri upsert
   */
  export type Prod_AgriUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    /**
     * The filter to search for the Prod_Agri to update in case it exists.
     */
    where: Prod_AgriWhereUniqueInput
    /**
     * In case the Prod_Agri found by the `where` argument doesn't exist, create a new Prod_Agri with this data.
     */
    create: XOR<Prod_AgriCreateInput, Prod_AgriUncheckedCreateInput>
    /**
     * In case the Prod_Agri was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Prod_AgriUpdateInput, Prod_AgriUncheckedUpdateInput>
  }


  /**
   * Prod_Agri delete
   */
  export type Prod_AgriDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
    /**
     * Filter which Prod_Agri to delete.
     */
    where: Prod_AgriWhereUniqueInput
  }


  /**
   * Prod_Agri deleteMany
   */
  export type Prod_AgriDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prod_Agris to delete
     */
    where?: Prod_AgriWhereInput
  }


  /**
   * Prod_Agri without action
   */
  export type Prod_AgriDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prod_Agri
     */
    select?: Prod_AgriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Prod_AgriInclude<ExtArgs> | null
  }



  /**
   * Model Embalagem
   */

  export type AggregateEmbalagem = {
    _count: EmbalagemCountAggregateOutputType | null
    _avg: EmbalagemAvgAggregateOutputType | null
    _sum: EmbalagemSumAggregateOutputType | null
    _min: EmbalagemMinAggregateOutputType | null
    _max: EmbalagemMaxAggregateOutputType | null
  }

  export type EmbalagemAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type EmbalagemSumAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type EmbalagemMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    local: string | null
    ingrediente: string | null
    praticas: string | null
    dt_processamento: string | null
    dt_embalagem: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type EmbalagemMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    local: string | null
    ingrediente: string | null
    praticas: string | null
    dt_processamento: string | null
    dt_embalagem: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type EmbalagemCountAggregateOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: number
    local: number
    ingrediente: number
    praticas: number
    dt_processamento: number
    dt_embalagem: number
    private: number
    medalha: number
    _all: number
  }


  export type EmbalagemAvgAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type EmbalagemSumAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type EmbalagemMinAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    ingrediente?: true
    praticas?: true
    dt_processamento?: true
    dt_embalagem?: true
    private?: true
    medalha?: true
  }

  export type EmbalagemMaxAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    ingrediente?: true
    praticas?: true
    dt_processamento?: true
    dt_embalagem?: true
    private?: true
    medalha?: true
  }

  export type EmbalagemCountAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    ingrediente?: true
    praticas?: true
    dt_processamento?: true
    dt_embalagem?: true
    private?: true
    medalha?: true
    _all?: true
  }

  export type EmbalagemAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Embalagem to aggregate.
     */
    where?: EmbalagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Embalagems to fetch.
     */
    orderBy?: EmbalagemOrderByWithRelationInput | EmbalagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmbalagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Embalagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Embalagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Embalagems
    **/
    _count?: true | EmbalagemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmbalagemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmbalagemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmbalagemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmbalagemMaxAggregateInputType
  }

  export type GetEmbalagemAggregateType<T extends EmbalagemAggregateArgs> = {
        [P in keyof T & keyof AggregateEmbalagem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmbalagem[P]>
      : GetScalarType<T[P], AggregateEmbalagem[P]>
  }




  export type EmbalagemGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmbalagemWhereInput
    orderBy?: EmbalagemOrderByWithAggregationInput | EmbalagemOrderByWithAggregationInput[]
    by: EmbalagemScalarFieldEnum[] | EmbalagemScalarFieldEnum
    having?: EmbalagemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmbalagemCountAggregateInputType | true
    _avg?: EmbalagemAvgAggregateInputType
    _sum?: EmbalagemSumAggregateInputType
    _min?: EmbalagemMinAggregateInputType
    _max?: EmbalagemMaxAggregateInputType
  }

  export type EmbalagemGroupByOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private: boolean
    medalha: boolean
    _count: EmbalagemCountAggregateOutputType | null
    _avg: EmbalagemAvgAggregateOutputType | null
    _sum: EmbalagemSumAggregateOutputType | null
    _min: EmbalagemMinAggregateOutputType | null
    _max: EmbalagemMaxAggregateOutputType | null
  }

  type GetEmbalagemGroupByPayload<T extends EmbalagemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmbalagemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmbalagemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmbalagemGroupByOutputType[P]>
            : GetScalarType<T[P], EmbalagemGroupByOutputType[P]>
        }
      >
    >


  export type EmbalagemSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    local?: boolean
    ingrediente?: boolean
    praticas?: boolean
    dt_processamento?: boolean
    dt_embalagem?: boolean
    private?: boolean
    medalha?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["embalagem"]>

  export type EmbalagemSelectScalar = {
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    local?: boolean
    ingrediente?: boolean
    praticas?: boolean
    dt_processamento?: boolean
    dt_embalagem?: boolean
    private?: boolean
    medalha?: boolean
  }

  export type EmbalagemInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }


  export type $EmbalagemPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Embalagem"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      linha: Prisma.$LinhaPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      id_linha: number
      nome: string
      local: string
      ingrediente: string
      praticas: string
      dt_processamento: string
      dt_embalagem: string
      private: boolean
      medalha: boolean
    }, ExtArgs["result"]["embalagem"]>
    composites: {}
  }


  type EmbalagemGetPayload<S extends boolean | null | undefined | EmbalagemDefaultArgs> = $Result.GetResult<Prisma.$EmbalagemPayload, S>

  type EmbalagemCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EmbalagemFindManyArgs, 'select' | 'include'> & {
      select?: EmbalagemCountAggregateInputType | true
    }

  export interface EmbalagemDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Embalagem'], meta: { name: 'Embalagem' } }
    /**
     * Find zero or one Embalagem that matches the filter.
     * @param {EmbalagemFindUniqueArgs} args - Arguments to find a Embalagem
     * @example
     * // Get one Embalagem
     * const embalagem = await prisma.embalagem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmbalagemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmbalagemFindUniqueArgs<ExtArgs>>
    ): Prisma__EmbalagemClient<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Embalagem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmbalagemFindUniqueOrThrowArgs} args - Arguments to find a Embalagem
     * @example
     * // Get one Embalagem
     * const embalagem = await prisma.embalagem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmbalagemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmbalagemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmbalagemClient<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Embalagem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbalagemFindFirstArgs} args - Arguments to find a Embalagem
     * @example
     * // Get one Embalagem
     * const embalagem = await prisma.embalagem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmbalagemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmbalagemFindFirstArgs<ExtArgs>>
    ): Prisma__EmbalagemClient<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Embalagem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbalagemFindFirstOrThrowArgs} args - Arguments to find a Embalagem
     * @example
     * // Get one Embalagem
     * const embalagem = await prisma.embalagem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmbalagemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmbalagemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmbalagemClient<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Embalagems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbalagemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Embalagems
     * const embalagems = await prisma.embalagem.findMany()
     * 
     * // Get first 10 Embalagems
     * const embalagems = await prisma.embalagem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const embalagemWithIdOnly = await prisma.embalagem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmbalagemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmbalagemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Embalagem.
     * @param {EmbalagemCreateArgs} args - Arguments to create a Embalagem.
     * @example
     * // Create one Embalagem
     * const Embalagem = await prisma.embalagem.create({
     *   data: {
     *     // ... data to create a Embalagem
     *   }
     * })
     * 
    **/
    create<T extends EmbalagemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmbalagemCreateArgs<ExtArgs>>
    ): Prisma__EmbalagemClient<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Embalagems.
     *     @param {EmbalagemCreateManyArgs} args - Arguments to create many Embalagems.
     *     @example
     *     // Create many Embalagems
     *     const embalagem = await prisma.embalagem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmbalagemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmbalagemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Embalagem.
     * @param {EmbalagemDeleteArgs} args - Arguments to delete one Embalagem.
     * @example
     * // Delete one Embalagem
     * const Embalagem = await prisma.embalagem.delete({
     *   where: {
     *     // ... filter to delete one Embalagem
     *   }
     * })
     * 
    **/
    delete<T extends EmbalagemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmbalagemDeleteArgs<ExtArgs>>
    ): Prisma__EmbalagemClient<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Embalagem.
     * @param {EmbalagemUpdateArgs} args - Arguments to update one Embalagem.
     * @example
     * // Update one Embalagem
     * const embalagem = await prisma.embalagem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmbalagemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmbalagemUpdateArgs<ExtArgs>>
    ): Prisma__EmbalagemClient<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Embalagems.
     * @param {EmbalagemDeleteManyArgs} args - Arguments to filter Embalagems to delete.
     * @example
     * // Delete a few Embalagems
     * const { count } = await prisma.embalagem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmbalagemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmbalagemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Embalagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbalagemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Embalagems
     * const embalagem = await prisma.embalagem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmbalagemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmbalagemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Embalagem.
     * @param {EmbalagemUpsertArgs} args - Arguments to update or create a Embalagem.
     * @example
     * // Update or create a Embalagem
     * const embalagem = await prisma.embalagem.upsert({
     *   create: {
     *     // ... data to create a Embalagem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Embalagem we want to update
     *   }
     * })
    **/
    upsert<T extends EmbalagemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmbalagemUpsertArgs<ExtArgs>>
    ): Prisma__EmbalagemClient<$Result.GetResult<Prisma.$EmbalagemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Embalagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbalagemCountArgs} args - Arguments to filter Embalagems to count.
     * @example
     * // Count the number of Embalagems
     * const count = await prisma.embalagem.count({
     *   where: {
     *     // ... the filter for the Embalagems we want to count
     *   }
     * })
    **/
    count<T extends EmbalagemCountArgs>(
      args?: Subset<T, EmbalagemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmbalagemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Embalagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbalagemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmbalagemAggregateArgs>(args: Subset<T, EmbalagemAggregateArgs>): Prisma.PrismaPromise<GetEmbalagemAggregateType<T>>

    /**
     * Group by Embalagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbalagemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmbalagemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmbalagemGroupByArgs['orderBy'] }
        : { orderBy?: EmbalagemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmbalagemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmbalagemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Embalagem model
   */
  readonly fields: EmbalagemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Embalagem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmbalagemClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    linha<T extends LinhaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LinhaDefaultArgs<ExtArgs>>): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Embalagem model
   */ 
  interface EmbalagemFieldRefs {
    readonly id: FieldRef<"Embalagem", 'Int'>
    readonly id_user: FieldRef<"Embalagem", 'Int'>
    readonly id_linha: FieldRef<"Embalagem", 'Int'>
    readonly nome: FieldRef<"Embalagem", 'String'>
    readonly local: FieldRef<"Embalagem", 'String'>
    readonly ingrediente: FieldRef<"Embalagem", 'String'>
    readonly praticas: FieldRef<"Embalagem", 'String'>
    readonly dt_processamento: FieldRef<"Embalagem", 'String'>
    readonly dt_embalagem: FieldRef<"Embalagem", 'String'>
    readonly private: FieldRef<"Embalagem", 'Boolean'>
    readonly medalha: FieldRef<"Embalagem", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Embalagem findUnique
   */
  export type EmbalagemFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    /**
     * Filter, which Embalagem to fetch.
     */
    where: EmbalagemWhereUniqueInput
  }


  /**
   * Embalagem findUniqueOrThrow
   */
  export type EmbalagemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    /**
     * Filter, which Embalagem to fetch.
     */
    where: EmbalagemWhereUniqueInput
  }


  /**
   * Embalagem findFirst
   */
  export type EmbalagemFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    /**
     * Filter, which Embalagem to fetch.
     */
    where?: EmbalagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Embalagems to fetch.
     */
    orderBy?: EmbalagemOrderByWithRelationInput | EmbalagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Embalagems.
     */
    cursor?: EmbalagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Embalagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Embalagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Embalagems.
     */
    distinct?: EmbalagemScalarFieldEnum | EmbalagemScalarFieldEnum[]
  }


  /**
   * Embalagem findFirstOrThrow
   */
  export type EmbalagemFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    /**
     * Filter, which Embalagem to fetch.
     */
    where?: EmbalagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Embalagems to fetch.
     */
    orderBy?: EmbalagemOrderByWithRelationInput | EmbalagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Embalagems.
     */
    cursor?: EmbalagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Embalagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Embalagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Embalagems.
     */
    distinct?: EmbalagemScalarFieldEnum | EmbalagemScalarFieldEnum[]
  }


  /**
   * Embalagem findMany
   */
  export type EmbalagemFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    /**
     * Filter, which Embalagems to fetch.
     */
    where?: EmbalagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Embalagems to fetch.
     */
    orderBy?: EmbalagemOrderByWithRelationInput | EmbalagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Embalagems.
     */
    cursor?: EmbalagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Embalagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Embalagems.
     */
    skip?: number
    distinct?: EmbalagemScalarFieldEnum | EmbalagemScalarFieldEnum[]
  }


  /**
   * Embalagem create
   */
  export type EmbalagemCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    /**
     * The data needed to create a Embalagem.
     */
    data: XOR<EmbalagemCreateInput, EmbalagemUncheckedCreateInput>
  }


  /**
   * Embalagem createMany
   */
  export type EmbalagemCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Embalagems.
     */
    data: EmbalagemCreateManyInput | EmbalagemCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Embalagem update
   */
  export type EmbalagemUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    /**
     * The data needed to update a Embalagem.
     */
    data: XOR<EmbalagemUpdateInput, EmbalagemUncheckedUpdateInput>
    /**
     * Choose, which Embalagem to update.
     */
    where: EmbalagemWhereUniqueInput
  }


  /**
   * Embalagem updateMany
   */
  export type EmbalagemUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Embalagems.
     */
    data: XOR<EmbalagemUpdateManyMutationInput, EmbalagemUncheckedUpdateManyInput>
    /**
     * Filter which Embalagems to update
     */
    where?: EmbalagemWhereInput
  }


  /**
   * Embalagem upsert
   */
  export type EmbalagemUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    /**
     * The filter to search for the Embalagem to update in case it exists.
     */
    where: EmbalagemWhereUniqueInput
    /**
     * In case the Embalagem found by the `where` argument doesn't exist, create a new Embalagem with this data.
     */
    create: XOR<EmbalagemCreateInput, EmbalagemUncheckedCreateInput>
    /**
     * In case the Embalagem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmbalagemUpdateInput, EmbalagemUncheckedUpdateInput>
  }


  /**
   * Embalagem delete
   */
  export type EmbalagemDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
    /**
     * Filter which Embalagem to delete.
     */
    where: EmbalagemWhereUniqueInput
  }


  /**
   * Embalagem deleteMany
   */
  export type EmbalagemDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Embalagems to delete
     */
    where?: EmbalagemWhereInput
  }


  /**
   * Embalagem without action
   */
  export type EmbalagemDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Embalagem
     */
    select?: EmbalagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbalagemInclude<ExtArgs> | null
  }



  /**
   * Model Transporte
   */

  export type AggregateTransporte = {
    _count: TransporteCountAggregateOutputType | null
    _avg: TransporteAvgAggregateOutputType | null
    _sum: TransporteSumAggregateOutputType | null
    _min: TransporteMinAggregateOutputType | null
    _max: TransporteMaxAggregateOutputType | null
  }

  export type TransporteAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type TransporteSumAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type TransporteMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    praticas: string | null
    dt_carregamento: string | null
    dt_descarregamento: string | null
    origem: string | null
    destino: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type TransporteMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    praticas: string | null
    dt_carregamento: string | null
    dt_descarregamento: string | null
    origem: string | null
    destino: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type TransporteCountAggregateOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: number
    praticas: number
    dt_carregamento: number
    dt_descarregamento: number
    origem: number
    destino: number
    private: number
    medalha: number
    _all: number
  }


  export type TransporteAvgAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type TransporteSumAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type TransporteMinAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    praticas?: true
    dt_carregamento?: true
    dt_descarregamento?: true
    origem?: true
    destino?: true
    private?: true
    medalha?: true
  }

  export type TransporteMaxAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    praticas?: true
    dt_carregamento?: true
    dt_descarregamento?: true
    origem?: true
    destino?: true
    private?: true
    medalha?: true
  }

  export type TransporteCountAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    praticas?: true
    dt_carregamento?: true
    dt_descarregamento?: true
    origem?: true
    destino?: true
    private?: true
    medalha?: true
    _all?: true
  }

  export type TransporteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transporte to aggregate.
     */
    where?: TransporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportes to fetch.
     */
    orderBy?: TransporteOrderByWithRelationInput | TransporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transportes
    **/
    _count?: true | TransporteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransporteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransporteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransporteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransporteMaxAggregateInputType
  }

  export type GetTransporteAggregateType<T extends TransporteAggregateArgs> = {
        [P in keyof T & keyof AggregateTransporte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransporte[P]>
      : GetScalarType<T[P], AggregateTransporte[P]>
  }




  export type TransporteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransporteWhereInput
    orderBy?: TransporteOrderByWithAggregationInput | TransporteOrderByWithAggregationInput[]
    by: TransporteScalarFieldEnum[] | TransporteScalarFieldEnum
    having?: TransporteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransporteCountAggregateInputType | true
    _avg?: TransporteAvgAggregateInputType
    _sum?: TransporteSumAggregateInputType
    _min?: TransporteMinAggregateInputType
    _max?: TransporteMaxAggregateInputType
  }

  export type TransporteGroupByOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private: boolean
    medalha: boolean
    _count: TransporteCountAggregateOutputType | null
    _avg: TransporteAvgAggregateOutputType | null
    _sum: TransporteSumAggregateOutputType | null
    _min: TransporteMinAggregateOutputType | null
    _max: TransporteMaxAggregateOutputType | null
  }

  type GetTransporteGroupByPayload<T extends TransporteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransporteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransporteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransporteGroupByOutputType[P]>
            : GetScalarType<T[P], TransporteGroupByOutputType[P]>
        }
      >
    >


  export type TransporteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    praticas?: boolean
    dt_carregamento?: boolean
    dt_descarregamento?: boolean
    origem?: boolean
    destino?: boolean
    private?: boolean
    medalha?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transporte"]>

  export type TransporteSelectScalar = {
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    praticas?: boolean
    dt_carregamento?: boolean
    dt_descarregamento?: boolean
    origem?: boolean
    destino?: boolean
    private?: boolean
    medalha?: boolean
  }

  export type TransporteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }


  export type $TransportePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Transporte"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      linha: Prisma.$LinhaPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      id_linha: number
      nome: string
      praticas: string
      dt_carregamento: string
      dt_descarregamento: string
      origem: string
      destino: string
      private: boolean
      medalha: boolean
    }, ExtArgs["result"]["transporte"]>
    composites: {}
  }


  type TransporteGetPayload<S extends boolean | null | undefined | TransporteDefaultArgs> = $Result.GetResult<Prisma.$TransportePayload, S>

  type TransporteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TransporteFindManyArgs, 'select' | 'include'> & {
      select?: TransporteCountAggregateInputType | true
    }

  export interface TransporteDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transporte'], meta: { name: 'Transporte' } }
    /**
     * Find zero or one Transporte that matches the filter.
     * @param {TransporteFindUniqueArgs} args - Arguments to find a Transporte
     * @example
     * // Get one Transporte
     * const transporte = await prisma.transporte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransporteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransporteFindUniqueArgs<ExtArgs>>
    ): Prisma__TransporteClient<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Transporte that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TransporteFindUniqueOrThrowArgs} args - Arguments to find a Transporte
     * @example
     * // Get one Transporte
     * const transporte = await prisma.transporte.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransporteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransporteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransporteClient<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Transporte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransporteFindFirstArgs} args - Arguments to find a Transporte
     * @example
     * // Get one Transporte
     * const transporte = await prisma.transporte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransporteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransporteFindFirstArgs<ExtArgs>>
    ): Prisma__TransporteClient<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Transporte that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransporteFindFirstOrThrowArgs} args - Arguments to find a Transporte
     * @example
     * // Get one Transporte
     * const transporte = await prisma.transporte.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransporteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransporteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransporteClient<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Transportes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransporteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transportes
     * const transportes = await prisma.transporte.findMany()
     * 
     * // Get first 10 Transportes
     * const transportes = await prisma.transporte.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transporteWithIdOnly = await prisma.transporte.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransporteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransporteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Transporte.
     * @param {TransporteCreateArgs} args - Arguments to create a Transporte.
     * @example
     * // Create one Transporte
     * const Transporte = await prisma.transporte.create({
     *   data: {
     *     // ... data to create a Transporte
     *   }
     * })
     * 
    **/
    create<T extends TransporteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransporteCreateArgs<ExtArgs>>
    ): Prisma__TransporteClient<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Transportes.
     *     @param {TransporteCreateManyArgs} args - Arguments to create many Transportes.
     *     @example
     *     // Create many Transportes
     *     const transporte = await prisma.transporte.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransporteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransporteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transporte.
     * @param {TransporteDeleteArgs} args - Arguments to delete one Transporte.
     * @example
     * // Delete one Transporte
     * const Transporte = await prisma.transporte.delete({
     *   where: {
     *     // ... filter to delete one Transporte
     *   }
     * })
     * 
    **/
    delete<T extends TransporteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransporteDeleteArgs<ExtArgs>>
    ): Prisma__TransporteClient<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Transporte.
     * @param {TransporteUpdateArgs} args - Arguments to update one Transporte.
     * @example
     * // Update one Transporte
     * const transporte = await prisma.transporte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransporteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransporteUpdateArgs<ExtArgs>>
    ): Prisma__TransporteClient<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Transportes.
     * @param {TransporteDeleteManyArgs} args - Arguments to filter Transportes to delete.
     * @example
     * // Delete a few Transportes
     * const { count } = await prisma.transporte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransporteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransporteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransporteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transportes
     * const transporte = await prisma.transporte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransporteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransporteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transporte.
     * @param {TransporteUpsertArgs} args - Arguments to update or create a Transporte.
     * @example
     * // Update or create a Transporte
     * const transporte = await prisma.transporte.upsert({
     *   create: {
     *     // ... data to create a Transporte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transporte we want to update
     *   }
     * })
    **/
    upsert<T extends TransporteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransporteUpsertArgs<ExtArgs>>
    ): Prisma__TransporteClient<$Result.GetResult<Prisma.$TransportePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Transportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransporteCountArgs} args - Arguments to filter Transportes to count.
     * @example
     * // Count the number of Transportes
     * const count = await prisma.transporte.count({
     *   where: {
     *     // ... the filter for the Transportes we want to count
     *   }
     * })
    **/
    count<T extends TransporteCountArgs>(
      args?: Subset<T, TransporteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransporteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransporteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransporteAggregateArgs>(args: Subset<T, TransporteAggregateArgs>): Prisma.PrismaPromise<GetTransporteAggregateType<T>>

    /**
     * Group by Transporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransporteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransporteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransporteGroupByArgs['orderBy'] }
        : { orderBy?: TransporteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransporteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransporteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transporte model
   */
  readonly fields: TransporteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transporte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransporteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    linha<T extends LinhaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LinhaDefaultArgs<ExtArgs>>): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Transporte model
   */ 
  interface TransporteFieldRefs {
    readonly id: FieldRef<"Transporte", 'Int'>
    readonly id_user: FieldRef<"Transporte", 'Int'>
    readonly id_linha: FieldRef<"Transporte", 'Int'>
    readonly nome: FieldRef<"Transporte", 'String'>
    readonly praticas: FieldRef<"Transporte", 'String'>
    readonly dt_carregamento: FieldRef<"Transporte", 'String'>
    readonly dt_descarregamento: FieldRef<"Transporte", 'String'>
    readonly origem: FieldRef<"Transporte", 'String'>
    readonly destino: FieldRef<"Transporte", 'String'>
    readonly private: FieldRef<"Transporte", 'Boolean'>
    readonly medalha: FieldRef<"Transporte", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Transporte findUnique
   */
  export type TransporteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    /**
     * Filter, which Transporte to fetch.
     */
    where: TransporteWhereUniqueInput
  }


  /**
   * Transporte findUniqueOrThrow
   */
  export type TransporteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    /**
     * Filter, which Transporte to fetch.
     */
    where: TransporteWhereUniqueInput
  }


  /**
   * Transporte findFirst
   */
  export type TransporteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    /**
     * Filter, which Transporte to fetch.
     */
    where?: TransporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportes to fetch.
     */
    orderBy?: TransporteOrderByWithRelationInput | TransporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transportes.
     */
    cursor?: TransporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transportes.
     */
    distinct?: TransporteScalarFieldEnum | TransporteScalarFieldEnum[]
  }


  /**
   * Transporte findFirstOrThrow
   */
  export type TransporteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    /**
     * Filter, which Transporte to fetch.
     */
    where?: TransporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportes to fetch.
     */
    orderBy?: TransporteOrderByWithRelationInput | TransporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transportes.
     */
    cursor?: TransporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transportes.
     */
    distinct?: TransporteScalarFieldEnum | TransporteScalarFieldEnum[]
  }


  /**
   * Transporte findMany
   */
  export type TransporteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    /**
     * Filter, which Transportes to fetch.
     */
    where?: TransporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportes to fetch.
     */
    orderBy?: TransporteOrderByWithRelationInput | TransporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transportes.
     */
    cursor?: TransporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportes.
     */
    skip?: number
    distinct?: TransporteScalarFieldEnum | TransporteScalarFieldEnum[]
  }


  /**
   * Transporte create
   */
  export type TransporteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    /**
     * The data needed to create a Transporte.
     */
    data: XOR<TransporteCreateInput, TransporteUncheckedCreateInput>
  }


  /**
   * Transporte createMany
   */
  export type TransporteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transportes.
     */
    data: TransporteCreateManyInput | TransporteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Transporte update
   */
  export type TransporteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    /**
     * The data needed to update a Transporte.
     */
    data: XOR<TransporteUpdateInput, TransporteUncheckedUpdateInput>
    /**
     * Choose, which Transporte to update.
     */
    where: TransporteWhereUniqueInput
  }


  /**
   * Transporte updateMany
   */
  export type TransporteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transportes.
     */
    data: XOR<TransporteUpdateManyMutationInput, TransporteUncheckedUpdateManyInput>
    /**
     * Filter which Transportes to update
     */
    where?: TransporteWhereInput
  }


  /**
   * Transporte upsert
   */
  export type TransporteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    /**
     * The filter to search for the Transporte to update in case it exists.
     */
    where: TransporteWhereUniqueInput
    /**
     * In case the Transporte found by the `where` argument doesn't exist, create a new Transporte with this data.
     */
    create: XOR<TransporteCreateInput, TransporteUncheckedCreateInput>
    /**
     * In case the Transporte was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransporteUpdateInput, TransporteUncheckedUpdateInput>
  }


  /**
   * Transporte delete
   */
  export type TransporteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
    /**
     * Filter which Transporte to delete.
     */
    where: TransporteWhereUniqueInput
  }


  /**
   * Transporte deleteMany
   */
  export type TransporteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transportes to delete
     */
    where?: TransporteWhereInput
  }


  /**
   * Transporte without action
   */
  export type TransporteDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transporte
     */
    select?: TransporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransporteInclude<ExtArgs> | null
  }



  /**
   * Model Armazenamento
   */

  export type AggregateArmazenamento = {
    _count: ArmazenamentoCountAggregateOutputType | null
    _avg: ArmazenamentoAvgAggregateOutputType | null
    _sum: ArmazenamentoSumAggregateOutputType | null
    _min: ArmazenamentoMinAggregateOutputType | null
    _max: ArmazenamentoMaxAggregateOutputType | null
  }

  export type ArmazenamentoAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type ArmazenamentoSumAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type ArmazenamentoMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    local: string | null
    praticas: string | null
    responsavel: string | null
    dt_entrada: string | null
    dt_saida: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type ArmazenamentoMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    local: string | null
    praticas: string | null
    responsavel: string | null
    dt_entrada: string | null
    dt_saida: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type ArmazenamentoCountAggregateOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: number
    local: number
    praticas: number
    responsavel: number
    dt_entrada: number
    dt_saida: number
    private: number
    medalha: number
    _all: number
  }


  export type ArmazenamentoAvgAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type ArmazenamentoSumAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type ArmazenamentoMinAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    praticas?: true
    responsavel?: true
    dt_entrada?: true
    dt_saida?: true
    private?: true
    medalha?: true
  }

  export type ArmazenamentoMaxAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    praticas?: true
    responsavel?: true
    dt_entrada?: true
    dt_saida?: true
    private?: true
    medalha?: true
  }

  export type ArmazenamentoCountAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    praticas?: true
    responsavel?: true
    dt_entrada?: true
    dt_saida?: true
    private?: true
    medalha?: true
    _all?: true
  }

  export type ArmazenamentoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Armazenamento to aggregate.
     */
    where?: ArmazenamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Armazenamentos to fetch.
     */
    orderBy?: ArmazenamentoOrderByWithRelationInput | ArmazenamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArmazenamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Armazenamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Armazenamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Armazenamentos
    **/
    _count?: true | ArmazenamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArmazenamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArmazenamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArmazenamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArmazenamentoMaxAggregateInputType
  }

  export type GetArmazenamentoAggregateType<T extends ArmazenamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateArmazenamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArmazenamento[P]>
      : GetScalarType<T[P], AggregateArmazenamento[P]>
  }




  export type ArmazenamentoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ArmazenamentoWhereInput
    orderBy?: ArmazenamentoOrderByWithAggregationInput | ArmazenamentoOrderByWithAggregationInput[]
    by: ArmazenamentoScalarFieldEnum[] | ArmazenamentoScalarFieldEnum
    having?: ArmazenamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArmazenamentoCountAggregateInputType | true
    _avg?: ArmazenamentoAvgAggregateInputType
    _sum?: ArmazenamentoSumAggregateInputType
    _min?: ArmazenamentoMinAggregateInputType
    _max?: ArmazenamentoMaxAggregateInputType
  }

  export type ArmazenamentoGroupByOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private: boolean
    medalha: boolean
    _count: ArmazenamentoCountAggregateOutputType | null
    _avg: ArmazenamentoAvgAggregateOutputType | null
    _sum: ArmazenamentoSumAggregateOutputType | null
    _min: ArmazenamentoMinAggregateOutputType | null
    _max: ArmazenamentoMaxAggregateOutputType | null
  }

  type GetArmazenamentoGroupByPayload<T extends ArmazenamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArmazenamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArmazenamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArmazenamentoGroupByOutputType[P]>
            : GetScalarType<T[P], ArmazenamentoGroupByOutputType[P]>
        }
      >
    >


  export type ArmazenamentoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    local?: boolean
    praticas?: boolean
    responsavel?: boolean
    dt_entrada?: boolean
    dt_saida?: boolean
    private?: boolean
    medalha?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["armazenamento"]>

  export type ArmazenamentoSelectScalar = {
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    local?: boolean
    praticas?: boolean
    responsavel?: boolean
    dt_entrada?: boolean
    dt_saida?: boolean
    private?: boolean
    medalha?: boolean
  }

  export type ArmazenamentoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }


  export type $ArmazenamentoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Armazenamento"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      linha: Prisma.$LinhaPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      id_linha: number
      nome: string
      local: string
      praticas: string
      responsavel: string
      dt_entrada: string
      dt_saida: string
      private: boolean
      medalha: boolean
    }, ExtArgs["result"]["armazenamento"]>
    composites: {}
  }


  type ArmazenamentoGetPayload<S extends boolean | null | undefined | ArmazenamentoDefaultArgs> = $Result.GetResult<Prisma.$ArmazenamentoPayload, S>

  type ArmazenamentoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ArmazenamentoFindManyArgs, 'select' | 'include'> & {
      select?: ArmazenamentoCountAggregateInputType | true
    }

  export interface ArmazenamentoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Armazenamento'], meta: { name: 'Armazenamento' } }
    /**
     * Find zero or one Armazenamento that matches the filter.
     * @param {ArmazenamentoFindUniqueArgs} args - Arguments to find a Armazenamento
     * @example
     * // Get one Armazenamento
     * const armazenamento = await prisma.armazenamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArmazenamentoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ArmazenamentoFindUniqueArgs<ExtArgs>>
    ): Prisma__ArmazenamentoClient<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Armazenamento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ArmazenamentoFindUniqueOrThrowArgs} args - Arguments to find a Armazenamento
     * @example
     * // Get one Armazenamento
     * const armazenamento = await prisma.armazenamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArmazenamentoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArmazenamentoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ArmazenamentoClient<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Armazenamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmazenamentoFindFirstArgs} args - Arguments to find a Armazenamento
     * @example
     * // Get one Armazenamento
     * const armazenamento = await prisma.armazenamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArmazenamentoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ArmazenamentoFindFirstArgs<ExtArgs>>
    ): Prisma__ArmazenamentoClient<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Armazenamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmazenamentoFindFirstOrThrowArgs} args - Arguments to find a Armazenamento
     * @example
     * // Get one Armazenamento
     * const armazenamento = await prisma.armazenamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArmazenamentoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArmazenamentoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ArmazenamentoClient<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Armazenamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmazenamentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Armazenamentos
     * const armazenamentos = await prisma.armazenamento.findMany()
     * 
     * // Get first 10 Armazenamentos
     * const armazenamentos = await prisma.armazenamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const armazenamentoWithIdOnly = await prisma.armazenamento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArmazenamentoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArmazenamentoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Armazenamento.
     * @param {ArmazenamentoCreateArgs} args - Arguments to create a Armazenamento.
     * @example
     * // Create one Armazenamento
     * const Armazenamento = await prisma.armazenamento.create({
     *   data: {
     *     // ... data to create a Armazenamento
     *   }
     * })
     * 
    **/
    create<T extends ArmazenamentoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ArmazenamentoCreateArgs<ExtArgs>>
    ): Prisma__ArmazenamentoClient<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Armazenamentos.
     *     @param {ArmazenamentoCreateManyArgs} args - Arguments to create many Armazenamentos.
     *     @example
     *     // Create many Armazenamentos
     *     const armazenamento = await prisma.armazenamento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArmazenamentoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArmazenamentoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Armazenamento.
     * @param {ArmazenamentoDeleteArgs} args - Arguments to delete one Armazenamento.
     * @example
     * // Delete one Armazenamento
     * const Armazenamento = await prisma.armazenamento.delete({
     *   where: {
     *     // ... filter to delete one Armazenamento
     *   }
     * })
     * 
    **/
    delete<T extends ArmazenamentoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ArmazenamentoDeleteArgs<ExtArgs>>
    ): Prisma__ArmazenamentoClient<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Armazenamento.
     * @param {ArmazenamentoUpdateArgs} args - Arguments to update one Armazenamento.
     * @example
     * // Update one Armazenamento
     * const armazenamento = await prisma.armazenamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArmazenamentoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ArmazenamentoUpdateArgs<ExtArgs>>
    ): Prisma__ArmazenamentoClient<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Armazenamentos.
     * @param {ArmazenamentoDeleteManyArgs} args - Arguments to filter Armazenamentos to delete.
     * @example
     * // Delete a few Armazenamentos
     * const { count } = await prisma.armazenamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArmazenamentoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArmazenamentoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Armazenamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmazenamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Armazenamentos
     * const armazenamento = await prisma.armazenamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArmazenamentoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ArmazenamentoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Armazenamento.
     * @param {ArmazenamentoUpsertArgs} args - Arguments to update or create a Armazenamento.
     * @example
     * // Update or create a Armazenamento
     * const armazenamento = await prisma.armazenamento.upsert({
     *   create: {
     *     // ... data to create a Armazenamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Armazenamento we want to update
     *   }
     * })
    **/
    upsert<T extends ArmazenamentoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ArmazenamentoUpsertArgs<ExtArgs>>
    ): Prisma__ArmazenamentoClient<$Result.GetResult<Prisma.$ArmazenamentoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Armazenamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmazenamentoCountArgs} args - Arguments to filter Armazenamentos to count.
     * @example
     * // Count the number of Armazenamentos
     * const count = await prisma.armazenamento.count({
     *   where: {
     *     // ... the filter for the Armazenamentos we want to count
     *   }
     * })
    **/
    count<T extends ArmazenamentoCountArgs>(
      args?: Subset<T, ArmazenamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArmazenamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Armazenamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmazenamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArmazenamentoAggregateArgs>(args: Subset<T, ArmazenamentoAggregateArgs>): Prisma.PrismaPromise<GetArmazenamentoAggregateType<T>>

    /**
     * Group by Armazenamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArmazenamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArmazenamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArmazenamentoGroupByArgs['orderBy'] }
        : { orderBy?: ArmazenamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArmazenamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArmazenamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Armazenamento model
   */
  readonly fields: ArmazenamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Armazenamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArmazenamentoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    linha<T extends LinhaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LinhaDefaultArgs<ExtArgs>>): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Armazenamento model
   */ 
  interface ArmazenamentoFieldRefs {
    readonly id: FieldRef<"Armazenamento", 'Int'>
    readonly id_user: FieldRef<"Armazenamento", 'Int'>
    readonly id_linha: FieldRef<"Armazenamento", 'Int'>
    readonly nome: FieldRef<"Armazenamento", 'String'>
    readonly local: FieldRef<"Armazenamento", 'String'>
    readonly praticas: FieldRef<"Armazenamento", 'String'>
    readonly responsavel: FieldRef<"Armazenamento", 'String'>
    readonly dt_entrada: FieldRef<"Armazenamento", 'String'>
    readonly dt_saida: FieldRef<"Armazenamento", 'String'>
    readonly private: FieldRef<"Armazenamento", 'Boolean'>
    readonly medalha: FieldRef<"Armazenamento", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Armazenamento findUnique
   */
  export type ArmazenamentoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    /**
     * Filter, which Armazenamento to fetch.
     */
    where: ArmazenamentoWhereUniqueInput
  }


  /**
   * Armazenamento findUniqueOrThrow
   */
  export type ArmazenamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    /**
     * Filter, which Armazenamento to fetch.
     */
    where: ArmazenamentoWhereUniqueInput
  }


  /**
   * Armazenamento findFirst
   */
  export type ArmazenamentoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    /**
     * Filter, which Armazenamento to fetch.
     */
    where?: ArmazenamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Armazenamentos to fetch.
     */
    orderBy?: ArmazenamentoOrderByWithRelationInput | ArmazenamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Armazenamentos.
     */
    cursor?: ArmazenamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Armazenamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Armazenamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Armazenamentos.
     */
    distinct?: ArmazenamentoScalarFieldEnum | ArmazenamentoScalarFieldEnum[]
  }


  /**
   * Armazenamento findFirstOrThrow
   */
  export type ArmazenamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    /**
     * Filter, which Armazenamento to fetch.
     */
    where?: ArmazenamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Armazenamentos to fetch.
     */
    orderBy?: ArmazenamentoOrderByWithRelationInput | ArmazenamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Armazenamentos.
     */
    cursor?: ArmazenamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Armazenamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Armazenamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Armazenamentos.
     */
    distinct?: ArmazenamentoScalarFieldEnum | ArmazenamentoScalarFieldEnum[]
  }


  /**
   * Armazenamento findMany
   */
  export type ArmazenamentoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    /**
     * Filter, which Armazenamentos to fetch.
     */
    where?: ArmazenamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Armazenamentos to fetch.
     */
    orderBy?: ArmazenamentoOrderByWithRelationInput | ArmazenamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Armazenamentos.
     */
    cursor?: ArmazenamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Armazenamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Armazenamentos.
     */
    skip?: number
    distinct?: ArmazenamentoScalarFieldEnum | ArmazenamentoScalarFieldEnum[]
  }


  /**
   * Armazenamento create
   */
  export type ArmazenamentoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Armazenamento.
     */
    data: XOR<ArmazenamentoCreateInput, ArmazenamentoUncheckedCreateInput>
  }


  /**
   * Armazenamento createMany
   */
  export type ArmazenamentoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Armazenamentos.
     */
    data: ArmazenamentoCreateManyInput | ArmazenamentoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Armazenamento update
   */
  export type ArmazenamentoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Armazenamento.
     */
    data: XOR<ArmazenamentoUpdateInput, ArmazenamentoUncheckedUpdateInput>
    /**
     * Choose, which Armazenamento to update.
     */
    where: ArmazenamentoWhereUniqueInput
  }


  /**
   * Armazenamento updateMany
   */
  export type ArmazenamentoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Armazenamentos.
     */
    data: XOR<ArmazenamentoUpdateManyMutationInput, ArmazenamentoUncheckedUpdateManyInput>
    /**
     * Filter which Armazenamentos to update
     */
    where?: ArmazenamentoWhereInput
  }


  /**
   * Armazenamento upsert
   */
  export type ArmazenamentoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Armazenamento to update in case it exists.
     */
    where: ArmazenamentoWhereUniqueInput
    /**
     * In case the Armazenamento found by the `where` argument doesn't exist, create a new Armazenamento with this data.
     */
    create: XOR<ArmazenamentoCreateInput, ArmazenamentoUncheckedCreateInput>
    /**
     * In case the Armazenamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArmazenamentoUpdateInput, ArmazenamentoUncheckedUpdateInput>
  }


  /**
   * Armazenamento delete
   */
  export type ArmazenamentoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
    /**
     * Filter which Armazenamento to delete.
     */
    where: ArmazenamentoWhereUniqueInput
  }


  /**
   * Armazenamento deleteMany
   */
  export type ArmazenamentoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Armazenamentos to delete
     */
    where?: ArmazenamentoWhereInput
  }


  /**
   * Armazenamento without action
   */
  export type ArmazenamentoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Armazenamento
     */
    select?: ArmazenamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArmazenamentoInclude<ExtArgs> | null
  }



  /**
   * Model Varejo
   */

  export type AggregateVarejo = {
    _count: VarejoCountAggregateOutputType | null
    _avg: VarejoAvgAggregateOutputType | null
    _sum: VarejoSumAggregateOutputType | null
    _min: VarejoMinAggregateOutputType | null
    _max: VarejoMaxAggregateOutputType | null
  }

  export type VarejoAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type VarejoSumAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
  }

  export type VarejoMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    local: string | null
    dt_chegada: string | null
    dt_validade: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type VarejoMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    id_linha: number | null
    nome: string | null
    local: string | null
    dt_chegada: string | null
    dt_validade: string | null
    private: boolean | null
    medalha: boolean | null
  }

  export type VarejoCountAggregateOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: number
    local: number
    dt_chegada: number
    dt_validade: number
    private: number
    medalha: number
    _all: number
  }


  export type VarejoAvgAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type VarejoSumAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
  }

  export type VarejoMinAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    dt_chegada?: true
    dt_validade?: true
    private?: true
    medalha?: true
  }

  export type VarejoMaxAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    dt_chegada?: true
    dt_validade?: true
    private?: true
    medalha?: true
  }

  export type VarejoCountAggregateInputType = {
    id?: true
    id_user?: true
    id_linha?: true
    nome?: true
    local?: true
    dt_chegada?: true
    dt_validade?: true
    private?: true
    medalha?: true
    _all?: true
  }

  export type VarejoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Varejo to aggregate.
     */
    where?: VarejoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Varejos to fetch.
     */
    orderBy?: VarejoOrderByWithRelationInput | VarejoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VarejoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Varejos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Varejos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Varejos
    **/
    _count?: true | VarejoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VarejoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VarejoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VarejoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VarejoMaxAggregateInputType
  }

  export type GetVarejoAggregateType<T extends VarejoAggregateArgs> = {
        [P in keyof T & keyof AggregateVarejo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVarejo[P]>
      : GetScalarType<T[P], AggregateVarejo[P]>
  }




  export type VarejoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VarejoWhereInput
    orderBy?: VarejoOrderByWithAggregationInput | VarejoOrderByWithAggregationInput[]
    by: VarejoScalarFieldEnum[] | VarejoScalarFieldEnum
    having?: VarejoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VarejoCountAggregateInputType | true
    _avg?: VarejoAvgAggregateInputType
    _sum?: VarejoSumAggregateInputType
    _min?: VarejoMinAggregateInputType
    _max?: VarejoMaxAggregateInputType
  }

  export type VarejoGroupByOutputType = {
    id: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private: boolean
    medalha: boolean
    _count: VarejoCountAggregateOutputType | null
    _avg: VarejoAvgAggregateOutputType | null
    _sum: VarejoSumAggregateOutputType | null
    _min: VarejoMinAggregateOutputType | null
    _max: VarejoMaxAggregateOutputType | null
  }

  type GetVarejoGroupByPayload<T extends VarejoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VarejoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VarejoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VarejoGroupByOutputType[P]>
            : GetScalarType<T[P], VarejoGroupByOutputType[P]>
        }
      >
    >


  export type VarejoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    local?: boolean
    dt_chegada?: boolean
    dt_validade?: boolean
    private?: boolean
    medalha?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["varejo"]>

  export type VarejoSelectScalar = {
    id?: boolean
    id_user?: boolean
    id_linha?: boolean
    nome?: boolean
    local?: boolean
    dt_chegada?: boolean
    dt_validade?: boolean
    private?: boolean
    medalha?: boolean
  }

  export type VarejoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    linha?: boolean | LinhaDefaultArgs<ExtArgs>
  }


  export type $VarejoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Varejo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      linha: Prisma.$LinhaPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      id_linha: number
      nome: string
      local: string
      dt_chegada: string
      dt_validade: string
      private: boolean
      medalha: boolean
    }, ExtArgs["result"]["varejo"]>
    composites: {}
  }


  type VarejoGetPayload<S extends boolean | null | undefined | VarejoDefaultArgs> = $Result.GetResult<Prisma.$VarejoPayload, S>

  type VarejoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VarejoFindManyArgs, 'select' | 'include'> & {
      select?: VarejoCountAggregateInputType | true
    }

  export interface VarejoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Varejo'], meta: { name: 'Varejo' } }
    /**
     * Find zero or one Varejo that matches the filter.
     * @param {VarejoFindUniqueArgs} args - Arguments to find a Varejo
     * @example
     * // Get one Varejo
     * const varejo = await prisma.varejo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VarejoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VarejoFindUniqueArgs<ExtArgs>>
    ): Prisma__VarejoClient<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Varejo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VarejoFindUniqueOrThrowArgs} args - Arguments to find a Varejo
     * @example
     * // Get one Varejo
     * const varejo = await prisma.varejo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VarejoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VarejoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VarejoClient<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Varejo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VarejoFindFirstArgs} args - Arguments to find a Varejo
     * @example
     * // Get one Varejo
     * const varejo = await prisma.varejo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VarejoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VarejoFindFirstArgs<ExtArgs>>
    ): Prisma__VarejoClient<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Varejo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VarejoFindFirstOrThrowArgs} args - Arguments to find a Varejo
     * @example
     * // Get one Varejo
     * const varejo = await prisma.varejo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VarejoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VarejoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VarejoClient<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Varejos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VarejoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Varejos
     * const varejos = await prisma.varejo.findMany()
     * 
     * // Get first 10 Varejos
     * const varejos = await prisma.varejo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const varejoWithIdOnly = await prisma.varejo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VarejoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VarejoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Varejo.
     * @param {VarejoCreateArgs} args - Arguments to create a Varejo.
     * @example
     * // Create one Varejo
     * const Varejo = await prisma.varejo.create({
     *   data: {
     *     // ... data to create a Varejo
     *   }
     * })
     * 
    **/
    create<T extends VarejoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VarejoCreateArgs<ExtArgs>>
    ): Prisma__VarejoClient<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Varejos.
     *     @param {VarejoCreateManyArgs} args - Arguments to create many Varejos.
     *     @example
     *     // Create many Varejos
     *     const varejo = await prisma.varejo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VarejoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VarejoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Varejo.
     * @param {VarejoDeleteArgs} args - Arguments to delete one Varejo.
     * @example
     * // Delete one Varejo
     * const Varejo = await prisma.varejo.delete({
     *   where: {
     *     // ... filter to delete one Varejo
     *   }
     * })
     * 
    **/
    delete<T extends VarejoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VarejoDeleteArgs<ExtArgs>>
    ): Prisma__VarejoClient<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Varejo.
     * @param {VarejoUpdateArgs} args - Arguments to update one Varejo.
     * @example
     * // Update one Varejo
     * const varejo = await prisma.varejo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VarejoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VarejoUpdateArgs<ExtArgs>>
    ): Prisma__VarejoClient<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Varejos.
     * @param {VarejoDeleteManyArgs} args - Arguments to filter Varejos to delete.
     * @example
     * // Delete a few Varejos
     * const { count } = await prisma.varejo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VarejoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VarejoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Varejos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VarejoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Varejos
     * const varejo = await prisma.varejo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VarejoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VarejoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Varejo.
     * @param {VarejoUpsertArgs} args - Arguments to update or create a Varejo.
     * @example
     * // Update or create a Varejo
     * const varejo = await prisma.varejo.upsert({
     *   create: {
     *     // ... data to create a Varejo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Varejo we want to update
     *   }
     * })
    **/
    upsert<T extends VarejoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VarejoUpsertArgs<ExtArgs>>
    ): Prisma__VarejoClient<$Result.GetResult<Prisma.$VarejoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Varejos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VarejoCountArgs} args - Arguments to filter Varejos to count.
     * @example
     * // Count the number of Varejos
     * const count = await prisma.varejo.count({
     *   where: {
     *     // ... the filter for the Varejos we want to count
     *   }
     * })
    **/
    count<T extends VarejoCountArgs>(
      args?: Subset<T, VarejoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VarejoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Varejo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VarejoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VarejoAggregateArgs>(args: Subset<T, VarejoAggregateArgs>): Prisma.PrismaPromise<GetVarejoAggregateType<T>>

    /**
     * Group by Varejo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VarejoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VarejoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VarejoGroupByArgs['orderBy'] }
        : { orderBy?: VarejoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VarejoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVarejoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Varejo model
   */
  readonly fields: VarejoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Varejo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VarejoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    linha<T extends LinhaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LinhaDefaultArgs<ExtArgs>>): Prisma__LinhaClient<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Varejo model
   */ 
  interface VarejoFieldRefs {
    readonly id: FieldRef<"Varejo", 'Int'>
    readonly id_user: FieldRef<"Varejo", 'Int'>
    readonly id_linha: FieldRef<"Varejo", 'Int'>
    readonly nome: FieldRef<"Varejo", 'String'>
    readonly local: FieldRef<"Varejo", 'String'>
    readonly dt_chegada: FieldRef<"Varejo", 'String'>
    readonly dt_validade: FieldRef<"Varejo", 'String'>
    readonly private: FieldRef<"Varejo", 'Boolean'>
    readonly medalha: FieldRef<"Varejo", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Varejo findUnique
   */
  export type VarejoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    /**
     * Filter, which Varejo to fetch.
     */
    where: VarejoWhereUniqueInput
  }


  /**
   * Varejo findUniqueOrThrow
   */
  export type VarejoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    /**
     * Filter, which Varejo to fetch.
     */
    where: VarejoWhereUniqueInput
  }


  /**
   * Varejo findFirst
   */
  export type VarejoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    /**
     * Filter, which Varejo to fetch.
     */
    where?: VarejoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Varejos to fetch.
     */
    orderBy?: VarejoOrderByWithRelationInput | VarejoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Varejos.
     */
    cursor?: VarejoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Varejos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Varejos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Varejos.
     */
    distinct?: VarejoScalarFieldEnum | VarejoScalarFieldEnum[]
  }


  /**
   * Varejo findFirstOrThrow
   */
  export type VarejoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    /**
     * Filter, which Varejo to fetch.
     */
    where?: VarejoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Varejos to fetch.
     */
    orderBy?: VarejoOrderByWithRelationInput | VarejoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Varejos.
     */
    cursor?: VarejoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Varejos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Varejos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Varejos.
     */
    distinct?: VarejoScalarFieldEnum | VarejoScalarFieldEnum[]
  }


  /**
   * Varejo findMany
   */
  export type VarejoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    /**
     * Filter, which Varejos to fetch.
     */
    where?: VarejoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Varejos to fetch.
     */
    orderBy?: VarejoOrderByWithRelationInput | VarejoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Varejos.
     */
    cursor?: VarejoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Varejos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Varejos.
     */
    skip?: number
    distinct?: VarejoScalarFieldEnum | VarejoScalarFieldEnum[]
  }


  /**
   * Varejo create
   */
  export type VarejoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    /**
     * The data needed to create a Varejo.
     */
    data: XOR<VarejoCreateInput, VarejoUncheckedCreateInput>
  }


  /**
   * Varejo createMany
   */
  export type VarejoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Varejos.
     */
    data: VarejoCreateManyInput | VarejoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Varejo update
   */
  export type VarejoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    /**
     * The data needed to update a Varejo.
     */
    data: XOR<VarejoUpdateInput, VarejoUncheckedUpdateInput>
    /**
     * Choose, which Varejo to update.
     */
    where: VarejoWhereUniqueInput
  }


  /**
   * Varejo updateMany
   */
  export type VarejoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Varejos.
     */
    data: XOR<VarejoUpdateManyMutationInput, VarejoUncheckedUpdateManyInput>
    /**
     * Filter which Varejos to update
     */
    where?: VarejoWhereInput
  }


  /**
   * Varejo upsert
   */
  export type VarejoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    /**
     * The filter to search for the Varejo to update in case it exists.
     */
    where: VarejoWhereUniqueInput
    /**
     * In case the Varejo found by the `where` argument doesn't exist, create a new Varejo with this data.
     */
    create: XOR<VarejoCreateInput, VarejoUncheckedCreateInput>
    /**
     * In case the Varejo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VarejoUpdateInput, VarejoUncheckedUpdateInput>
  }


  /**
   * Varejo delete
   */
  export type VarejoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
    /**
     * Filter which Varejo to delete.
     */
    where: VarejoWhereUniqueInput
  }


  /**
   * Varejo deleteMany
   */
  export type VarejoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Varejos to delete
     */
    where?: VarejoWhereInput
  }


  /**
   * Varejo without action
   */
  export type VarejoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Varejo
     */
    select?: VarejoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VarejoInclude<ExtArgs> | null
  }



  /**
   * Model Produto
   */

  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    nome: string | null
    photo: string | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    nome: string | null
    photo: string | null
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    id_user: number
    nome: number
    photo: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type ProdutoSumAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    id_user?: true
    nome?: true
    photo?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    id_user?: true
    nome?: true
    photo?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    id_user?: true
    nome?: true
    photo?: true
    _all?: true
  }

  export type ProdutoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithAggregationInput | ProdutoOrderByWithAggregationInput[]
    by: ProdutoScalarFieldEnum[] | ProdutoScalarFieldEnum
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }

  export type ProdutoGroupByOutputType = {
    id: number
    id_user: number
    nome: string
    photo: string
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    nome?: boolean
    photo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Linha?: boolean | Produto$LinhaArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectScalar = {
    id?: boolean
    id_user?: boolean
    nome?: boolean
    photo?: boolean
  }

  export type ProdutoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Linha?: boolean | Produto$LinhaArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProdutoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Produto"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Linha: Prisma.$LinhaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      nome: string
      photo: string
    }, ExtArgs["result"]["produto"]>
    composites: {}
  }


  type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoPayload, S>

  type ProdutoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProdutoFindManyArgs, 'select' | 'include'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produto'], meta: { name: 'Produto' } }
    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProdutoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoFindUniqueArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Produto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProdutoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindFirstArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Produto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProdutoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends ProdutoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoCreateArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Produtos.
     *     @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProdutoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends ProdutoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoDeleteArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProdutoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoUpdateArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProdutoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProdutoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends ProdutoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutoUpsertArgs<ExtArgs>>
    ): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produto model
   */
  readonly fields: ProdutoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Linha<T extends Produto$LinhaArgs<ExtArgs> = {}>(args?: Subset<T, Produto$LinhaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinhaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Produto model
   */ 
  interface ProdutoFieldRefs {
    readonly id: FieldRef<"Produto", 'Int'>
    readonly id_user: FieldRef<"Produto", 'Int'>
    readonly nome: FieldRef<"Produto", 'String'>
    readonly photo: FieldRef<"Produto", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Produto findUnique
   */
  export type ProdutoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto findFirst
   */
  export type ProdutoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * Produto create
   */
  export type ProdutoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to create a Produto.
     */
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }


  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Produto update
   */
  export type ProdutoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }


  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto.Linha
   */
  export type Produto$LinhaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Linha
     */
    select?: LinhaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinhaInclude<ExtArgs> | null
    where?: LinhaWhereInput
    orderBy?: LinhaOrderByWithRelationInput | LinhaOrderByWithRelationInput[]
    cursor?: LinhaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinhaScalarFieldEnum | LinhaScalarFieldEnum[]
  }


  /**
   * Produto without action
   */
  export type ProdutoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude<ExtArgs> | null
  }



  /**
   * Model Feed
   */

  export type AggregateFeed = {
    _count: FeedCountAggregateOutputType | null
    _avg: FeedAvgAggregateOutputType | null
    _sum: FeedSumAggregateOutputType | null
    _min: FeedMinAggregateOutputType | null
    _max: FeedMaxAggregateOutputType | null
  }

  export type FeedAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type FeedSumAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type FeedMinAggregateOutputType = {
    id: number | null
    id_user: number | null
    description: string | null
  }

  export type FeedMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
    description: string | null
  }

  export type FeedCountAggregateOutputType = {
    id: number
    id_user: number
    description: number
    _all: number
  }


  export type FeedAvgAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type FeedSumAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type FeedMinAggregateInputType = {
    id?: true
    id_user?: true
    description?: true
  }

  export type FeedMaxAggregateInputType = {
    id?: true
    id_user?: true
    description?: true
  }

  export type FeedCountAggregateInputType = {
    id?: true
    id_user?: true
    description?: true
    _all?: true
  }

  export type FeedAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feed to aggregate.
     */
    where?: FeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feeds to fetch.
     */
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feeds
    **/
    _count?: true | FeedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedMaxAggregateInputType
  }

  export type GetFeedAggregateType<T extends FeedAggregateArgs> = {
        [P in keyof T & keyof AggregateFeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeed[P]>
      : GetScalarType<T[P], AggregateFeed[P]>
  }




  export type FeedGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FeedWhereInput
    orderBy?: FeedOrderByWithAggregationInput | FeedOrderByWithAggregationInput[]
    by: FeedScalarFieldEnum[] | FeedScalarFieldEnum
    having?: FeedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedCountAggregateInputType | true
    _avg?: FeedAvgAggregateInputType
    _sum?: FeedSumAggregateInputType
    _min?: FeedMinAggregateInputType
    _max?: FeedMaxAggregateInputType
  }

  export type FeedGroupByOutputType = {
    id: number
    id_user: number
    description: string
    _count: FeedCountAggregateOutputType | null
    _avg: FeedAvgAggregateOutputType | null
    _sum: FeedSumAggregateOutputType | null
    _min: FeedMinAggregateOutputType | null
    _max: FeedMaxAggregateOutputType | null
  }

  type GetFeedGroupByPayload<T extends FeedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedGroupByOutputType[P]>
            : GetScalarType<T[P], FeedGroupByOutputType[P]>
        }
      >
    >


  export type FeedSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    description?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feed"]>

  export type FeedSelectScalar = {
    id?: boolean
    id_user?: boolean
    description?: boolean
  }

  export type FeedInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $FeedPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Feed"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      id_user: number
      description: string
    }, ExtArgs["result"]["feed"]>
    composites: {}
  }


  type FeedGetPayload<S extends boolean | null | undefined | FeedDefaultArgs> = $Result.GetResult<Prisma.$FeedPayload, S>

  type FeedCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FeedFindManyArgs, 'select' | 'include'> & {
      select?: FeedCountAggregateInputType | true
    }

  export interface FeedDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feed'], meta: { name: 'Feed' } }
    /**
     * Find zero or one Feed that matches the filter.
     * @param {FeedFindUniqueArgs} args - Arguments to find a Feed
     * @example
     * // Get one Feed
     * const feed = await prisma.feed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeedFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeedFindUniqueArgs<ExtArgs>>
    ): Prisma__FeedClient<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Feed that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeedFindUniqueOrThrowArgs} args - Arguments to find a Feed
     * @example
     * // Get one Feed
     * const feed = await prisma.feed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeedFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeedClient<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Feed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedFindFirstArgs} args - Arguments to find a Feed
     * @example
     * // Get one Feed
     * const feed = await prisma.feed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeedFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedFindFirstArgs<ExtArgs>>
    ): Prisma__FeedClient<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Feed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedFindFirstOrThrowArgs} args - Arguments to find a Feed
     * @example
     * // Get one Feed
     * const feed = await prisma.feed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeedFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeedClient<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Feeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feeds
     * const feeds = await prisma.feed.findMany()
     * 
     * // Get first 10 Feeds
     * const feeds = await prisma.feed.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedWithIdOnly = await prisma.feed.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeedFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Feed.
     * @param {FeedCreateArgs} args - Arguments to create a Feed.
     * @example
     * // Create one Feed
     * const Feed = await prisma.feed.create({
     *   data: {
     *     // ... data to create a Feed
     *   }
     * })
     * 
    **/
    create<T extends FeedCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedCreateArgs<ExtArgs>>
    ): Prisma__FeedClient<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Feeds.
     *     @param {FeedCreateManyArgs} args - Arguments to create many Feeds.
     *     @example
     *     // Create many Feeds
     *     const feed = await prisma.feed.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeedCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Feed.
     * @param {FeedDeleteArgs} args - Arguments to delete one Feed.
     * @example
     * // Delete one Feed
     * const Feed = await prisma.feed.delete({
     *   where: {
     *     // ... filter to delete one Feed
     *   }
     * })
     * 
    **/
    delete<T extends FeedDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeedDeleteArgs<ExtArgs>>
    ): Prisma__FeedClient<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Feed.
     * @param {FeedUpdateArgs} args - Arguments to update one Feed.
     * @example
     * // Update one Feed
     * const feed = await prisma.feed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeedUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedUpdateArgs<ExtArgs>>
    ): Prisma__FeedClient<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Feeds.
     * @param {FeedDeleteManyArgs} args - Arguments to filter Feeds to delete.
     * @example
     * // Delete a few Feeds
     * const { count } = await prisma.feed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeedDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feeds
     * const feed = await prisma.feed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeedUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeedUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feed.
     * @param {FeedUpsertArgs} args - Arguments to update or create a Feed.
     * @example
     * // Update or create a Feed
     * const feed = await prisma.feed.upsert({
     *   create: {
     *     // ... data to create a Feed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feed we want to update
     *   }
     * })
    **/
    upsert<T extends FeedUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeedUpsertArgs<ExtArgs>>
    ): Prisma__FeedClient<$Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Feeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedCountArgs} args - Arguments to filter Feeds to count.
     * @example
     * // Count the number of Feeds
     * const count = await prisma.feed.count({
     *   where: {
     *     // ... the filter for the Feeds we want to count
     *   }
     * })
    **/
    count<T extends FeedCountArgs>(
      args?: Subset<T, FeedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedAggregateArgs>(args: Subset<T, FeedAggregateArgs>): Prisma.PrismaPromise<GetFeedAggregateType<T>>

    /**
     * Group by Feed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedGroupByArgs['orderBy'] }
        : { orderBy?: FeedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feed model
   */
  readonly fields: FeedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Feed model
   */ 
  interface FeedFieldRefs {
    readonly id: FieldRef<"Feed", 'Int'>
    readonly id_user: FieldRef<"Feed", 'Int'>
    readonly description: FieldRef<"Feed", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Feed findUnique
   */
  export type FeedFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    /**
     * Filter, which Feed to fetch.
     */
    where: FeedWhereUniqueInput
  }


  /**
   * Feed findUniqueOrThrow
   */
  export type FeedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    /**
     * Filter, which Feed to fetch.
     */
    where: FeedWhereUniqueInput
  }


  /**
   * Feed findFirst
   */
  export type FeedFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    /**
     * Filter, which Feed to fetch.
     */
    where?: FeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feeds to fetch.
     */
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feeds.
     */
    cursor?: FeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feeds.
     */
    distinct?: FeedScalarFieldEnum | FeedScalarFieldEnum[]
  }


  /**
   * Feed findFirstOrThrow
   */
  export type FeedFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    /**
     * Filter, which Feed to fetch.
     */
    where?: FeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feeds to fetch.
     */
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feeds.
     */
    cursor?: FeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feeds.
     */
    distinct?: FeedScalarFieldEnum | FeedScalarFieldEnum[]
  }


  /**
   * Feed findMany
   */
  export type FeedFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    /**
     * Filter, which Feeds to fetch.
     */
    where?: FeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feeds to fetch.
     */
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feeds.
     */
    cursor?: FeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feeds.
     */
    skip?: number
    distinct?: FeedScalarFieldEnum | FeedScalarFieldEnum[]
  }


  /**
   * Feed create
   */
  export type FeedCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    /**
     * The data needed to create a Feed.
     */
    data: XOR<FeedCreateInput, FeedUncheckedCreateInput>
  }


  /**
   * Feed createMany
   */
  export type FeedCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feeds.
     */
    data: FeedCreateManyInput | FeedCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Feed update
   */
  export type FeedUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    /**
     * The data needed to update a Feed.
     */
    data: XOR<FeedUpdateInput, FeedUncheckedUpdateInput>
    /**
     * Choose, which Feed to update.
     */
    where: FeedWhereUniqueInput
  }


  /**
   * Feed updateMany
   */
  export type FeedUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feeds.
     */
    data: XOR<FeedUpdateManyMutationInput, FeedUncheckedUpdateManyInput>
    /**
     * Filter which Feeds to update
     */
    where?: FeedWhereInput
  }


  /**
   * Feed upsert
   */
  export type FeedUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    /**
     * The filter to search for the Feed to update in case it exists.
     */
    where: FeedWhereUniqueInput
    /**
     * In case the Feed found by the `where` argument doesn't exist, create a new Feed with this data.
     */
    create: XOR<FeedCreateInput, FeedUncheckedCreateInput>
    /**
     * In case the Feed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedUpdateInput, FeedUncheckedUpdateInput>
  }


  /**
   * Feed delete
   */
  export type FeedDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
    /**
     * Filter which Feed to delete.
     */
    where: FeedWhereUniqueInput
  }


  /**
   * Feed deleteMany
   */
  export type FeedDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feeds to delete
     */
    where?: FeedWhereInput
  }


  /**
   * Feed without action
   */
  export type FeedDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    password: 'password',
    email: 'email',
    cnpj: 'cnpj',
    photo: 'photo',
    local: 'local',
    telefone: 'telefone',
    gerente: 'gerente',
    fiscal: 'fiscal',
    ban: 'ban',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    id_role: 'id_role',
    responsavel_email: 'responsavel_email'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    created_at: 'created_at'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    id: 'id',
    id_permission: 'id_permission',
    id_role: 'id_role'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    id_permission: 'id_permission'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const DenunciaScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    description: 'description',
    alvo: 'alvo'
  };

  export type DenunciaScalarFieldEnum = (typeof DenunciaScalarFieldEnum)[keyof typeof DenunciaScalarFieldEnum]


  export const LinhaScalarFieldEnum: {
    id: 'id',
    date: 'date',
    qrcode: 'qrcode',
    id_produto: 'id_produto'
  };

  export type LinhaScalarFieldEnum = (typeof LinhaScalarFieldEnum)[keyof typeof LinhaScalarFieldEnum]


  export const Prod_AgriScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    id_linha: 'id_linha',
    nome: 'nome',
    local: 'local',
    dt_plantio: 'dt_plantio',
    dt_colheita: 'dt_colheita',
    insumo: 'insumo',
    praticas: 'praticas',
    private: 'private',
    medalha: 'medalha'
  };

  export type Prod_AgriScalarFieldEnum = (typeof Prod_AgriScalarFieldEnum)[keyof typeof Prod_AgriScalarFieldEnum]


  export const EmbalagemScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    id_linha: 'id_linha',
    nome: 'nome',
    local: 'local',
    ingrediente: 'ingrediente',
    praticas: 'praticas',
    dt_processamento: 'dt_processamento',
    dt_embalagem: 'dt_embalagem',
    private: 'private',
    medalha: 'medalha'
  };

  export type EmbalagemScalarFieldEnum = (typeof EmbalagemScalarFieldEnum)[keyof typeof EmbalagemScalarFieldEnum]


  export const TransporteScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    id_linha: 'id_linha',
    nome: 'nome',
    praticas: 'praticas',
    dt_carregamento: 'dt_carregamento',
    dt_descarregamento: 'dt_descarregamento',
    origem: 'origem',
    destino: 'destino',
    private: 'private',
    medalha: 'medalha'
  };

  export type TransporteScalarFieldEnum = (typeof TransporteScalarFieldEnum)[keyof typeof TransporteScalarFieldEnum]


  export const ArmazenamentoScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    id_linha: 'id_linha',
    nome: 'nome',
    local: 'local',
    praticas: 'praticas',
    responsavel: 'responsavel',
    dt_entrada: 'dt_entrada',
    dt_saida: 'dt_saida',
    private: 'private',
    medalha: 'medalha'
  };

  export type ArmazenamentoScalarFieldEnum = (typeof ArmazenamentoScalarFieldEnum)[keyof typeof ArmazenamentoScalarFieldEnum]


  export const VarejoScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    id_linha: 'id_linha',
    nome: 'nome',
    local: 'local',
    dt_chegada: 'dt_chegada',
    dt_validade: 'dt_validade',
    private: 'private',
    medalha: 'medalha'
  };

  export type VarejoScalarFieldEnum = (typeof VarejoScalarFieldEnum)[keyof typeof VarejoScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    nome: 'nome',
    photo: 'photo'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const FeedScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    description: 'description'
  };

  export type FeedScalarFieldEnum = (typeof FeedScalarFieldEnum)[keyof typeof FeedScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    cnpj?: StringNullableFilter<"User"> | string | null
    photo?: StringNullableFilter<"User"> | string | null
    local?: StringNullableFilter<"User"> | string | null
    telefone?: StringNullableFilter<"User"> | string | null
    gerente?: BoolFilter<"User"> | boolean
    fiscal?: BoolFilter<"User"> | boolean
    ban?: BoolFilter<"User"> | boolean
    created_at?: DateTimeFilter<"User"> | Date | string
    UserRole?: UserRoleListRelationFilter
    UserPermission?: UserPermissionListRelationFilter
    Denuncia?: DenunciaListRelationFilter
    Relatorio1?: Prod_AgriListRelationFilter
    Relatorio2?: EmbalagemListRelationFilter
    Relatorio3?: TransporteListRelationFilter
    Relatorio4?: ArmazenamentoListRelationFilter
    Relatorio5?: VarejoListRelationFilter
    Feed?: FeedListRelationFilter
    Produto?: ProdutoListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    email?: SortOrder
    cnpj?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    local?: SortOrderInput | SortOrder
    telefone?: SortOrderInput | SortOrder
    gerente?: SortOrder
    fiscal?: SortOrder
    ban?: SortOrder
    created_at?: SortOrder
    UserRole?: UserRoleOrderByRelationAggregateInput
    UserPermission?: UserPermissionOrderByRelationAggregateInput
    Denuncia?: DenunciaOrderByRelationAggregateInput
    Relatorio1?: Prod_AgriOrderByRelationAggregateInput
    Relatorio2?: EmbalagemOrderByRelationAggregateInput
    Relatorio3?: TransporteOrderByRelationAggregateInput
    Relatorio4?: ArmazenamentoOrderByRelationAggregateInput
    Relatorio5?: VarejoOrderByRelationAggregateInput
    Feed?: FeedOrderByRelationAggregateInput
    Produto?: ProdutoOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    cnpj?: StringNullableFilter<"User"> | string | null
    photo?: StringNullableFilter<"User"> | string | null
    local?: StringNullableFilter<"User"> | string | null
    telefone?: StringNullableFilter<"User"> | string | null
    gerente?: BoolFilter<"User"> | boolean
    fiscal?: BoolFilter<"User"> | boolean
    ban?: BoolFilter<"User"> | boolean
    created_at?: DateTimeFilter<"User"> | Date | string
    UserRole?: UserRoleListRelationFilter
    UserPermission?: UserPermissionListRelationFilter
    Denuncia?: DenunciaListRelationFilter
    Relatorio1?: Prod_AgriListRelationFilter
    Relatorio2?: EmbalagemListRelationFilter
    Relatorio3?: TransporteListRelationFilter
    Relatorio4?: ArmazenamentoListRelationFilter
    Relatorio5?: VarejoListRelationFilter
    Feed?: FeedListRelationFilter
    Produto?: ProdutoListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    email?: SortOrder
    cnpj?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    local?: SortOrderInput | SortOrder
    telefone?: SortOrderInput | SortOrder
    gerente?: SortOrder
    fiscal?: SortOrder
    ban?: SortOrder
    created_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    cnpj?: StringNullableWithAggregatesFilter<"User"> | string | null
    photo?: StringNullableWithAggregatesFilter<"User"> | string | null
    local?: StringNullableWithAggregatesFilter<"User"> | string | null
    telefone?: StringNullableWithAggregatesFilter<"User"> | string | null
    gerente?: BoolWithAggregatesFilter<"User"> | boolean
    fiscal?: BoolWithAggregatesFilter<"User"> | boolean
    ban?: BoolWithAggregatesFilter<"User"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    name?: StringFilter<"Role"> | string
    description?: StringFilter<"Role"> | string
    UserRole?: UserRoleListRelationFilter
    RolePermission?: RolePermissionListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    UserRole?: UserRoleOrderByRelationAggregateInput
    RolePermission?: RolePermissionOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    name?: StringFilter<"Role"> | string
    description?: StringFilter<"Role"> | string
    UserRole?: UserRoleListRelationFilter
    RolePermission?: RolePermissionListRelationFilter
  }, "id">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    name?: StringWithAggregatesFilter<"Role"> | string
    description?: StringWithAggregatesFilter<"Role"> | string
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id?: IntFilter<"UserRole"> | number
    id_user?: IntFilter<"UserRole"> | number
    id_role?: IntFilter<"UserRole"> | number
    responsavel_email?: StringFilter<"UserRole"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_role?: SortOrder
    responsavel_email?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id_user?: IntFilter<"UserRole"> | number
    id_role?: IntFilter<"UserRole"> | number
    responsavel_email?: StringFilter<"UserRole"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }, "id">

  export type UserRoleOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_role?: SortOrder
    responsavel_email?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _avg?: UserRoleAvgOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
    _sum?: UserRoleSumOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserRole"> | number
    id_user?: IntWithAggregatesFilter<"UserRole"> | number
    id_role?: IntWithAggregatesFilter<"UserRole"> | number
    responsavel_email?: StringWithAggregatesFilter<"UserRole"> | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: IntFilter<"Permission"> | number
    name?: StringFilter<"Permission"> | string
    description?: StringFilter<"Permission"> | string
    created_at?: DateTimeFilter<"Permission"> | Date | string
    RolePermission?: RolePermissionListRelationFilter
    UserPermission?: UserPermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    RolePermission?: RolePermissionOrderByRelationAggregateInput
    UserPermission?: UserPermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    name?: StringFilter<"Permission"> | string
    description?: StringFilter<"Permission"> | string
    created_at?: DateTimeFilter<"Permission"> | Date | string
    RolePermission?: RolePermissionListRelationFilter
    UserPermission?: UserPermissionListRelationFilter
  }, "id">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _avg?: PermissionAvgOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
    _sum?: PermissionSumOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Permission"> | number
    name?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringWithAggregatesFilter<"Permission"> | string
    created_at?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    id?: IntFilter<"RolePermission"> | number
    id_permission?: IntFilter<"RolePermission"> | number
    id_role?: IntFilter<"RolePermission"> | number
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type RolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    id_permission?: SortOrder
    id_role?: SortOrder
    permission?: PermissionOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    id_permission?: IntFilter<"RolePermission"> | number
    id_role?: IntFilter<"RolePermission"> | number
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }, "id">

  export type RolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    id_permission?: SortOrder
    id_role?: SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _avg?: RolePermissionAvgOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
    _sum?: RolePermissionSumOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RolePermission"> | number
    id_permission?: IntWithAggregatesFilter<"RolePermission"> | number
    id_role?: IntWithAggregatesFilter<"RolePermission"> | number
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    id?: IntFilter<"UserPermission"> | number
    id_user?: IntFilter<"UserPermission"> | number
    id_permission?: IntFilter<"UserPermission"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }

  export type UserPermissionOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_permission?: SortOrder
    user?: UserOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    id_user?: IntFilter<"UserPermission"> | number
    id_permission?: IntFilter<"UserPermission"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }, "id">

  export type UserPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_permission?: SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _avg?: UserPermissionAvgOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
    _sum?: UserPermissionSumOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserPermission"> | number
    id_user?: IntWithAggregatesFilter<"UserPermission"> | number
    id_permission?: IntWithAggregatesFilter<"UserPermission"> | number
  }

  export type DenunciaWhereInput = {
    AND?: DenunciaWhereInput | DenunciaWhereInput[]
    OR?: DenunciaWhereInput[]
    NOT?: DenunciaWhereInput | DenunciaWhereInput[]
    id?: IntFilter<"Denuncia"> | number
    id_user?: IntFilter<"Denuncia"> | number
    description?: StringFilter<"Denuncia"> | string
    alvo?: StringFilter<"Denuncia"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DenunciaOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
    alvo?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DenunciaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DenunciaWhereInput | DenunciaWhereInput[]
    OR?: DenunciaWhereInput[]
    NOT?: DenunciaWhereInput | DenunciaWhereInput[]
    id_user?: IntFilter<"Denuncia"> | number
    description?: StringFilter<"Denuncia"> | string
    alvo?: StringFilter<"Denuncia"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type DenunciaOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
    alvo?: SortOrder
    _count?: DenunciaCountOrderByAggregateInput
    _avg?: DenunciaAvgOrderByAggregateInput
    _max?: DenunciaMaxOrderByAggregateInput
    _min?: DenunciaMinOrderByAggregateInput
    _sum?: DenunciaSumOrderByAggregateInput
  }

  export type DenunciaScalarWhereWithAggregatesInput = {
    AND?: DenunciaScalarWhereWithAggregatesInput | DenunciaScalarWhereWithAggregatesInput[]
    OR?: DenunciaScalarWhereWithAggregatesInput[]
    NOT?: DenunciaScalarWhereWithAggregatesInput | DenunciaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Denuncia"> | number
    id_user?: IntWithAggregatesFilter<"Denuncia"> | number
    description?: StringWithAggregatesFilter<"Denuncia"> | string
    alvo?: StringWithAggregatesFilter<"Denuncia"> | string
  }

  export type LinhaWhereInput = {
    AND?: LinhaWhereInput | LinhaWhereInput[]
    OR?: LinhaWhereInput[]
    NOT?: LinhaWhereInput | LinhaWhereInput[]
    id?: IntFilter<"Linha"> | number
    date?: StringFilter<"Linha"> | string
    qrcode?: StringNullableFilter<"Linha"> | string | null
    id_produto?: IntFilter<"Linha"> | number
    Relatorio1?: Prod_AgriListRelationFilter
    Relatorio2?: EmbalagemListRelationFilter
    Relatorio3?: TransporteListRelationFilter
    Relatorio4?: ArmazenamentoListRelationFilter
    Relatorio5?: VarejoListRelationFilter
    produto?: XOR<ProdutoRelationFilter, ProdutoWhereInput>
  }

  export type LinhaOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    qrcode?: SortOrderInput | SortOrder
    id_produto?: SortOrder
    Relatorio1?: Prod_AgriOrderByRelationAggregateInput
    Relatorio2?: EmbalagemOrderByRelationAggregateInput
    Relatorio3?: TransporteOrderByRelationAggregateInput
    Relatorio4?: ArmazenamentoOrderByRelationAggregateInput
    Relatorio5?: VarejoOrderByRelationAggregateInput
    produto?: ProdutoOrderByWithRelationInput
  }

  export type LinhaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LinhaWhereInput | LinhaWhereInput[]
    OR?: LinhaWhereInput[]
    NOT?: LinhaWhereInput | LinhaWhereInput[]
    date?: StringFilter<"Linha"> | string
    qrcode?: StringNullableFilter<"Linha"> | string | null
    id_produto?: IntFilter<"Linha"> | number
    Relatorio1?: Prod_AgriListRelationFilter
    Relatorio2?: EmbalagemListRelationFilter
    Relatorio3?: TransporteListRelationFilter
    Relatorio4?: ArmazenamentoListRelationFilter
    Relatorio5?: VarejoListRelationFilter
    produto?: XOR<ProdutoRelationFilter, ProdutoWhereInput>
  }, "id">

  export type LinhaOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    qrcode?: SortOrderInput | SortOrder
    id_produto?: SortOrder
    _count?: LinhaCountOrderByAggregateInput
    _avg?: LinhaAvgOrderByAggregateInput
    _max?: LinhaMaxOrderByAggregateInput
    _min?: LinhaMinOrderByAggregateInput
    _sum?: LinhaSumOrderByAggregateInput
  }

  export type LinhaScalarWhereWithAggregatesInput = {
    AND?: LinhaScalarWhereWithAggregatesInput | LinhaScalarWhereWithAggregatesInput[]
    OR?: LinhaScalarWhereWithAggregatesInput[]
    NOT?: LinhaScalarWhereWithAggregatesInput | LinhaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Linha"> | number
    date?: StringWithAggregatesFilter<"Linha"> | string
    qrcode?: StringNullableWithAggregatesFilter<"Linha"> | string | null
    id_produto?: IntWithAggregatesFilter<"Linha"> | number
  }

  export type Prod_AgriWhereInput = {
    AND?: Prod_AgriWhereInput | Prod_AgriWhereInput[]
    OR?: Prod_AgriWhereInput[]
    NOT?: Prod_AgriWhereInput | Prod_AgriWhereInput[]
    id?: IntFilter<"Prod_Agri"> | number
    id_user?: IntFilter<"Prod_Agri"> | number
    id_linha?: IntFilter<"Prod_Agri"> | number
    nome?: StringFilter<"Prod_Agri"> | string
    local?: StringFilter<"Prod_Agri"> | string
    dt_plantio?: StringFilter<"Prod_Agri"> | string
    dt_colheita?: StringFilter<"Prod_Agri"> | string
    insumo?: StringFilter<"Prod_Agri"> | string
    praticas?: StringFilter<"Prod_Agri"> | string
    private?: BoolFilter<"Prod_Agri"> | boolean
    medalha?: BoolFilter<"Prod_Agri"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }

  export type Prod_AgriOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_plantio?: SortOrder
    dt_colheita?: SortOrder
    insumo?: SortOrder
    praticas?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    user?: UserOrderByWithRelationInput
    linha?: LinhaOrderByWithRelationInput
  }

  export type Prod_AgriWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Prod_AgriWhereInput | Prod_AgriWhereInput[]
    OR?: Prod_AgriWhereInput[]
    NOT?: Prod_AgriWhereInput | Prod_AgriWhereInput[]
    id_user?: IntFilter<"Prod_Agri"> | number
    id_linha?: IntFilter<"Prod_Agri"> | number
    nome?: StringFilter<"Prod_Agri"> | string
    local?: StringFilter<"Prod_Agri"> | string
    dt_plantio?: StringFilter<"Prod_Agri"> | string
    dt_colheita?: StringFilter<"Prod_Agri"> | string
    insumo?: StringFilter<"Prod_Agri"> | string
    praticas?: StringFilter<"Prod_Agri"> | string
    private?: BoolFilter<"Prod_Agri"> | boolean
    medalha?: BoolFilter<"Prod_Agri"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }, "id">

  export type Prod_AgriOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_plantio?: SortOrder
    dt_colheita?: SortOrder
    insumo?: SortOrder
    praticas?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    _count?: Prod_AgriCountOrderByAggregateInput
    _avg?: Prod_AgriAvgOrderByAggregateInput
    _max?: Prod_AgriMaxOrderByAggregateInput
    _min?: Prod_AgriMinOrderByAggregateInput
    _sum?: Prod_AgriSumOrderByAggregateInput
  }

  export type Prod_AgriScalarWhereWithAggregatesInput = {
    AND?: Prod_AgriScalarWhereWithAggregatesInput | Prod_AgriScalarWhereWithAggregatesInput[]
    OR?: Prod_AgriScalarWhereWithAggregatesInput[]
    NOT?: Prod_AgriScalarWhereWithAggregatesInput | Prod_AgriScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Prod_Agri"> | number
    id_user?: IntWithAggregatesFilter<"Prod_Agri"> | number
    id_linha?: IntWithAggregatesFilter<"Prod_Agri"> | number
    nome?: StringWithAggregatesFilter<"Prod_Agri"> | string
    local?: StringWithAggregatesFilter<"Prod_Agri"> | string
    dt_plantio?: StringWithAggregatesFilter<"Prod_Agri"> | string
    dt_colheita?: StringWithAggregatesFilter<"Prod_Agri"> | string
    insumo?: StringWithAggregatesFilter<"Prod_Agri"> | string
    praticas?: StringWithAggregatesFilter<"Prod_Agri"> | string
    private?: BoolWithAggregatesFilter<"Prod_Agri"> | boolean
    medalha?: BoolWithAggregatesFilter<"Prod_Agri"> | boolean
  }

  export type EmbalagemWhereInput = {
    AND?: EmbalagemWhereInput | EmbalagemWhereInput[]
    OR?: EmbalagemWhereInput[]
    NOT?: EmbalagemWhereInput | EmbalagemWhereInput[]
    id?: IntFilter<"Embalagem"> | number
    id_user?: IntFilter<"Embalagem"> | number
    id_linha?: IntFilter<"Embalagem"> | number
    nome?: StringFilter<"Embalagem"> | string
    local?: StringFilter<"Embalagem"> | string
    ingrediente?: StringFilter<"Embalagem"> | string
    praticas?: StringFilter<"Embalagem"> | string
    dt_processamento?: StringFilter<"Embalagem"> | string
    dt_embalagem?: StringFilter<"Embalagem"> | string
    private?: BoolFilter<"Embalagem"> | boolean
    medalha?: BoolFilter<"Embalagem"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }

  export type EmbalagemOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    ingrediente?: SortOrder
    praticas?: SortOrder
    dt_processamento?: SortOrder
    dt_embalagem?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    user?: UserOrderByWithRelationInput
    linha?: LinhaOrderByWithRelationInput
  }

  export type EmbalagemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmbalagemWhereInput | EmbalagemWhereInput[]
    OR?: EmbalagemWhereInput[]
    NOT?: EmbalagemWhereInput | EmbalagemWhereInput[]
    id_user?: IntFilter<"Embalagem"> | number
    id_linha?: IntFilter<"Embalagem"> | number
    nome?: StringFilter<"Embalagem"> | string
    local?: StringFilter<"Embalagem"> | string
    ingrediente?: StringFilter<"Embalagem"> | string
    praticas?: StringFilter<"Embalagem"> | string
    dt_processamento?: StringFilter<"Embalagem"> | string
    dt_embalagem?: StringFilter<"Embalagem"> | string
    private?: BoolFilter<"Embalagem"> | boolean
    medalha?: BoolFilter<"Embalagem"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }, "id">

  export type EmbalagemOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    ingrediente?: SortOrder
    praticas?: SortOrder
    dt_processamento?: SortOrder
    dt_embalagem?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    _count?: EmbalagemCountOrderByAggregateInput
    _avg?: EmbalagemAvgOrderByAggregateInput
    _max?: EmbalagemMaxOrderByAggregateInput
    _min?: EmbalagemMinOrderByAggregateInput
    _sum?: EmbalagemSumOrderByAggregateInput
  }

  export type EmbalagemScalarWhereWithAggregatesInput = {
    AND?: EmbalagemScalarWhereWithAggregatesInput | EmbalagemScalarWhereWithAggregatesInput[]
    OR?: EmbalagemScalarWhereWithAggregatesInput[]
    NOT?: EmbalagemScalarWhereWithAggregatesInput | EmbalagemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Embalagem"> | number
    id_user?: IntWithAggregatesFilter<"Embalagem"> | number
    id_linha?: IntWithAggregatesFilter<"Embalagem"> | number
    nome?: StringWithAggregatesFilter<"Embalagem"> | string
    local?: StringWithAggregatesFilter<"Embalagem"> | string
    ingrediente?: StringWithAggregatesFilter<"Embalagem"> | string
    praticas?: StringWithAggregatesFilter<"Embalagem"> | string
    dt_processamento?: StringWithAggregatesFilter<"Embalagem"> | string
    dt_embalagem?: StringWithAggregatesFilter<"Embalagem"> | string
    private?: BoolWithAggregatesFilter<"Embalagem"> | boolean
    medalha?: BoolWithAggregatesFilter<"Embalagem"> | boolean
  }

  export type TransporteWhereInput = {
    AND?: TransporteWhereInput | TransporteWhereInput[]
    OR?: TransporteWhereInput[]
    NOT?: TransporteWhereInput | TransporteWhereInput[]
    id?: IntFilter<"Transporte"> | number
    id_user?: IntFilter<"Transporte"> | number
    id_linha?: IntFilter<"Transporte"> | number
    nome?: StringFilter<"Transporte"> | string
    praticas?: StringFilter<"Transporte"> | string
    dt_carregamento?: StringFilter<"Transporte"> | string
    dt_descarregamento?: StringFilter<"Transporte"> | string
    origem?: StringFilter<"Transporte"> | string
    destino?: StringFilter<"Transporte"> | string
    private?: BoolFilter<"Transporte"> | boolean
    medalha?: BoolFilter<"Transporte"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }

  export type TransporteOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    praticas?: SortOrder
    dt_carregamento?: SortOrder
    dt_descarregamento?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    user?: UserOrderByWithRelationInput
    linha?: LinhaOrderByWithRelationInput
  }

  export type TransporteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransporteWhereInput | TransporteWhereInput[]
    OR?: TransporteWhereInput[]
    NOT?: TransporteWhereInput | TransporteWhereInput[]
    id_user?: IntFilter<"Transporte"> | number
    id_linha?: IntFilter<"Transporte"> | number
    nome?: StringFilter<"Transporte"> | string
    praticas?: StringFilter<"Transporte"> | string
    dt_carregamento?: StringFilter<"Transporte"> | string
    dt_descarregamento?: StringFilter<"Transporte"> | string
    origem?: StringFilter<"Transporte"> | string
    destino?: StringFilter<"Transporte"> | string
    private?: BoolFilter<"Transporte"> | boolean
    medalha?: BoolFilter<"Transporte"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }, "id">

  export type TransporteOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    praticas?: SortOrder
    dt_carregamento?: SortOrder
    dt_descarregamento?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    _count?: TransporteCountOrderByAggregateInput
    _avg?: TransporteAvgOrderByAggregateInput
    _max?: TransporteMaxOrderByAggregateInput
    _min?: TransporteMinOrderByAggregateInput
    _sum?: TransporteSumOrderByAggregateInput
  }

  export type TransporteScalarWhereWithAggregatesInput = {
    AND?: TransporteScalarWhereWithAggregatesInput | TransporteScalarWhereWithAggregatesInput[]
    OR?: TransporteScalarWhereWithAggregatesInput[]
    NOT?: TransporteScalarWhereWithAggregatesInput | TransporteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transporte"> | number
    id_user?: IntWithAggregatesFilter<"Transporte"> | number
    id_linha?: IntWithAggregatesFilter<"Transporte"> | number
    nome?: StringWithAggregatesFilter<"Transporte"> | string
    praticas?: StringWithAggregatesFilter<"Transporte"> | string
    dt_carregamento?: StringWithAggregatesFilter<"Transporte"> | string
    dt_descarregamento?: StringWithAggregatesFilter<"Transporte"> | string
    origem?: StringWithAggregatesFilter<"Transporte"> | string
    destino?: StringWithAggregatesFilter<"Transporte"> | string
    private?: BoolWithAggregatesFilter<"Transporte"> | boolean
    medalha?: BoolWithAggregatesFilter<"Transporte"> | boolean
  }

  export type ArmazenamentoWhereInput = {
    AND?: ArmazenamentoWhereInput | ArmazenamentoWhereInput[]
    OR?: ArmazenamentoWhereInput[]
    NOT?: ArmazenamentoWhereInput | ArmazenamentoWhereInput[]
    id?: IntFilter<"Armazenamento"> | number
    id_user?: IntFilter<"Armazenamento"> | number
    id_linha?: IntFilter<"Armazenamento"> | number
    nome?: StringFilter<"Armazenamento"> | string
    local?: StringFilter<"Armazenamento"> | string
    praticas?: StringFilter<"Armazenamento"> | string
    responsavel?: StringFilter<"Armazenamento"> | string
    dt_entrada?: StringFilter<"Armazenamento"> | string
    dt_saida?: StringFilter<"Armazenamento"> | string
    private?: BoolFilter<"Armazenamento"> | boolean
    medalha?: BoolFilter<"Armazenamento"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }

  export type ArmazenamentoOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    praticas?: SortOrder
    responsavel?: SortOrder
    dt_entrada?: SortOrder
    dt_saida?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    user?: UserOrderByWithRelationInput
    linha?: LinhaOrderByWithRelationInput
  }

  export type ArmazenamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArmazenamentoWhereInput | ArmazenamentoWhereInput[]
    OR?: ArmazenamentoWhereInput[]
    NOT?: ArmazenamentoWhereInput | ArmazenamentoWhereInput[]
    id_user?: IntFilter<"Armazenamento"> | number
    id_linha?: IntFilter<"Armazenamento"> | number
    nome?: StringFilter<"Armazenamento"> | string
    local?: StringFilter<"Armazenamento"> | string
    praticas?: StringFilter<"Armazenamento"> | string
    responsavel?: StringFilter<"Armazenamento"> | string
    dt_entrada?: StringFilter<"Armazenamento"> | string
    dt_saida?: StringFilter<"Armazenamento"> | string
    private?: BoolFilter<"Armazenamento"> | boolean
    medalha?: BoolFilter<"Armazenamento"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }, "id">

  export type ArmazenamentoOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    praticas?: SortOrder
    responsavel?: SortOrder
    dt_entrada?: SortOrder
    dt_saida?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    _count?: ArmazenamentoCountOrderByAggregateInput
    _avg?: ArmazenamentoAvgOrderByAggregateInput
    _max?: ArmazenamentoMaxOrderByAggregateInput
    _min?: ArmazenamentoMinOrderByAggregateInput
    _sum?: ArmazenamentoSumOrderByAggregateInput
  }

  export type ArmazenamentoScalarWhereWithAggregatesInput = {
    AND?: ArmazenamentoScalarWhereWithAggregatesInput | ArmazenamentoScalarWhereWithAggregatesInput[]
    OR?: ArmazenamentoScalarWhereWithAggregatesInput[]
    NOT?: ArmazenamentoScalarWhereWithAggregatesInput | ArmazenamentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Armazenamento"> | number
    id_user?: IntWithAggregatesFilter<"Armazenamento"> | number
    id_linha?: IntWithAggregatesFilter<"Armazenamento"> | number
    nome?: StringWithAggregatesFilter<"Armazenamento"> | string
    local?: StringWithAggregatesFilter<"Armazenamento"> | string
    praticas?: StringWithAggregatesFilter<"Armazenamento"> | string
    responsavel?: StringWithAggregatesFilter<"Armazenamento"> | string
    dt_entrada?: StringWithAggregatesFilter<"Armazenamento"> | string
    dt_saida?: StringWithAggregatesFilter<"Armazenamento"> | string
    private?: BoolWithAggregatesFilter<"Armazenamento"> | boolean
    medalha?: BoolWithAggregatesFilter<"Armazenamento"> | boolean
  }

  export type VarejoWhereInput = {
    AND?: VarejoWhereInput | VarejoWhereInput[]
    OR?: VarejoWhereInput[]
    NOT?: VarejoWhereInput | VarejoWhereInput[]
    id?: IntFilter<"Varejo"> | number
    id_user?: IntFilter<"Varejo"> | number
    id_linha?: IntFilter<"Varejo"> | number
    nome?: StringFilter<"Varejo"> | string
    local?: StringFilter<"Varejo"> | string
    dt_chegada?: StringFilter<"Varejo"> | string
    dt_validade?: StringFilter<"Varejo"> | string
    private?: BoolFilter<"Varejo"> | boolean
    medalha?: BoolFilter<"Varejo"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }

  export type VarejoOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_chegada?: SortOrder
    dt_validade?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    user?: UserOrderByWithRelationInput
    linha?: LinhaOrderByWithRelationInput
  }

  export type VarejoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VarejoWhereInput | VarejoWhereInput[]
    OR?: VarejoWhereInput[]
    NOT?: VarejoWhereInput | VarejoWhereInput[]
    id_user?: IntFilter<"Varejo"> | number
    id_linha?: IntFilter<"Varejo"> | number
    nome?: StringFilter<"Varejo"> | string
    local?: StringFilter<"Varejo"> | string
    dt_chegada?: StringFilter<"Varejo"> | string
    dt_validade?: StringFilter<"Varejo"> | string
    private?: BoolFilter<"Varejo"> | boolean
    medalha?: BoolFilter<"Varejo"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    linha?: XOR<LinhaRelationFilter, LinhaWhereInput>
  }, "id">

  export type VarejoOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_chegada?: SortOrder
    dt_validade?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
    _count?: VarejoCountOrderByAggregateInput
    _avg?: VarejoAvgOrderByAggregateInput
    _max?: VarejoMaxOrderByAggregateInput
    _min?: VarejoMinOrderByAggregateInput
    _sum?: VarejoSumOrderByAggregateInput
  }

  export type VarejoScalarWhereWithAggregatesInput = {
    AND?: VarejoScalarWhereWithAggregatesInput | VarejoScalarWhereWithAggregatesInput[]
    OR?: VarejoScalarWhereWithAggregatesInput[]
    NOT?: VarejoScalarWhereWithAggregatesInput | VarejoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Varejo"> | number
    id_user?: IntWithAggregatesFilter<"Varejo"> | number
    id_linha?: IntWithAggregatesFilter<"Varejo"> | number
    nome?: StringWithAggregatesFilter<"Varejo"> | string
    local?: StringWithAggregatesFilter<"Varejo"> | string
    dt_chegada?: StringWithAggregatesFilter<"Varejo"> | string
    dt_validade?: StringWithAggregatesFilter<"Varejo"> | string
    private?: BoolWithAggregatesFilter<"Varejo"> | boolean
    medalha?: BoolWithAggregatesFilter<"Varejo"> | boolean
  }

  export type ProdutoWhereInput = {
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    id?: IntFilter<"Produto"> | number
    id_user?: IntFilter<"Produto"> | number
    nome?: StringFilter<"Produto"> | string
    photo?: StringFilter<"Produto"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    Linha?: LinhaListRelationFilter
  }

  export type ProdutoOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    nome?: SortOrder
    photo?: SortOrder
    user?: UserOrderByWithRelationInput
    Linha?: LinhaOrderByRelationAggregateInput
  }

  export type ProdutoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    id_user?: IntFilter<"Produto"> | number
    nome?: StringFilter<"Produto"> | string
    photo?: StringFilter<"Produto"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    Linha?: LinhaListRelationFilter
  }, "id">

  export type ProdutoOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    nome?: SortOrder
    photo?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    OR?: ProdutoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produto"> | number
    id_user?: IntWithAggregatesFilter<"Produto"> | number
    nome?: StringWithAggregatesFilter<"Produto"> | string
    photo?: StringWithAggregatesFilter<"Produto"> | string
  }

  export type FeedWhereInput = {
    AND?: FeedWhereInput | FeedWhereInput[]
    OR?: FeedWhereInput[]
    NOT?: FeedWhereInput | FeedWhereInput[]
    id?: IntFilter<"Feed"> | number
    id_user?: IntFilter<"Feed"> | number
    description?: StringFilter<"Feed"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FeedOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FeedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedWhereInput | FeedWhereInput[]
    OR?: FeedWhereInput[]
    NOT?: FeedWhereInput | FeedWhereInput[]
    id_user?: IntFilter<"Feed"> | number
    description?: StringFilter<"Feed"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FeedOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
    _count?: FeedCountOrderByAggregateInput
    _avg?: FeedAvgOrderByAggregateInput
    _max?: FeedMaxOrderByAggregateInput
    _min?: FeedMinOrderByAggregateInput
    _sum?: FeedSumOrderByAggregateInput
  }

  export type FeedScalarWhereWithAggregatesInput = {
    AND?: FeedScalarWhereWithAggregatesInput | FeedScalarWhereWithAggregatesInput[]
    OR?: FeedScalarWhereWithAggregatesInput[]
    NOT?: FeedScalarWhereWithAggregatesInput | FeedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feed"> | number
    id_user?: IntWithAggregatesFilter<"Feed"> | number
    description?: StringWithAggregatesFilter<"Feed"> | string
  }

  export type UserCreateInput = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    name: string
    description: string
    UserRole?: UserRoleCreateNestedManyWithoutRoleInput
    RolePermission?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
    RolePermission?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UserRole?: UserRoleUpdateManyWithoutRoleNestedInput
    RolePermission?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
    RolePermission?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateInput = {
    responsavel_email?: string
    user: UserCreateNestedOneWithoutUserRoleInput
    role: RoleCreateNestedOneWithoutUserRoleInput
  }

  export type UserRoleUncheckedCreateInput = {
    id?: number
    id_user: number
    id_role: number
    responsavel_email?: string
  }

  export type UserRoleUpdateInput = {
    responsavel_email?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutUserRoleNestedInput
    role?: RoleUpdateOneRequiredWithoutUserRoleNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    responsavel_email?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateManyInput = {
    id?: number
    id_user: number
    id_role: number
    responsavel_email?: string
  }

  export type UserRoleUpdateManyMutationInput = {
    responsavel_email?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    responsavel_email?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionCreateInput = {
    name: string
    description: string
    created_at?: Date | string
    RolePermission?: RolePermissionCreateNestedManyWithoutPermissionInput
    UserPermission?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    created_at?: Date | string
    RolePermission?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RolePermission?: RolePermissionUpdateManyWithoutPermissionNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RolePermission?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: number
    name: string
    description: string
    created_at?: Date | string
  }

  export type PermissionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateInput = {
    permission: PermissionCreateNestedOneWithoutRolePermissionInput
    role: RoleCreateNestedOneWithoutRolePermissionInput
  }

  export type RolePermissionUncheckedCreateInput = {
    id?: number
    id_permission: number
    id_role: number
  }

  export type RolePermissionUpdateInput = {
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionNestedInput
    role?: RoleUpdateOneRequiredWithoutRolePermissionNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
  }

  export type RolePermissionCreateManyInput = {
    id?: number
    id_permission: number
    id_role: number
  }

  export type RolePermissionUpdateManyMutationInput = {

  }

  export type RolePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionCreateInput = {
    user: UserCreateNestedOneWithoutUserPermissionInput
    permission: PermissionCreateNestedOneWithoutUserPermissionInput
  }

  export type UserPermissionUncheckedCreateInput = {
    id?: number
    id_user: number
    id_permission: number
  }

  export type UserPermissionUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUserPermissionNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUserPermissionNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionCreateManyInput = {
    id?: number
    id_user: number
    id_permission: number
  }

  export type UserPermissionUpdateManyMutationInput = {

  }

  export type UserPermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
  }

  export type DenunciaCreateInput = {
    description: string
    alvo: string
    user: UserCreateNestedOneWithoutDenunciaInput
  }

  export type DenunciaUncheckedCreateInput = {
    id?: number
    id_user: number
    description: string
    alvo: string
  }

  export type DenunciaUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    alvo?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDenunciaNestedInput
  }

  export type DenunciaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    alvo?: StringFieldUpdateOperationsInput | string
  }

  export type DenunciaCreateManyInput = {
    id?: number
    id_user: number
    description: string
    alvo: string
  }

  export type DenunciaUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    alvo?: StringFieldUpdateOperationsInput | string
  }

  export type DenunciaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    alvo?: StringFieldUpdateOperationsInput | string
  }

  export type LinhaCreateInput = {
    date: string
    qrcode?: string | null
    Relatorio1?: Prod_AgriCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoCreateNestedManyWithoutLinhaInput
    produto: ProdutoCreateNestedOneWithoutLinhaInput
  }

  export type LinhaUncheckedCreateInput = {
    id?: number
    date: string
    qrcode?: string | null
    id_produto: number
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutLinhaInput
  }

  export type LinhaUpdateInput = {
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    Relatorio1?: Prod_AgriUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUpdateManyWithoutLinhaNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutLinhaNestedInput
  }

  export type LinhaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    id_produto?: IntFieldUpdateOperationsInput | number
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutLinhaNestedInput
  }

  export type LinhaCreateManyInput = {
    id?: number
    date: string
    qrcode?: string | null
    id_produto: number
  }

  export type LinhaUpdateManyMutationInput = {
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LinhaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    id_produto?: IntFieldUpdateOperationsInput | number
  }

  export type Prod_AgriCreateInput = {
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio1Input
    linha: LinhaCreateNestedOneWithoutRelatorio1Input
  }

  export type Prod_AgriUncheckedCreateInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private?: boolean
    medalha?: boolean
  }

  export type Prod_AgriUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio1NestedInput
    linha?: LinhaUpdateOneRequiredWithoutRelatorio1NestedInput
  }

  export type Prod_AgriUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Prod_AgriCreateManyInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private?: boolean
    medalha?: boolean
  }

  export type Prod_AgriUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Prod_AgriUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmbalagemCreateInput = {
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio2Input
    linha: LinhaCreateNestedOneWithoutRelatorio2Input
  }

  export type EmbalagemUncheckedCreateInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private?: boolean
    medalha?: boolean
  }

  export type EmbalagemUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio2NestedInput
    linha?: LinhaUpdateOneRequiredWithoutRelatorio2NestedInput
  }

  export type EmbalagemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmbalagemCreateManyInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private?: boolean
    medalha?: boolean
  }

  export type EmbalagemUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmbalagemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TransporteCreateInput = {
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio3Input
    linha: LinhaCreateNestedOneWithoutRelatorio3Input
  }

  export type TransporteUncheckedCreateInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private?: boolean
    medalha?: boolean
  }

  export type TransporteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio3NestedInput
    linha?: LinhaUpdateOneRequiredWithoutRelatorio3NestedInput
  }

  export type TransporteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TransporteCreateManyInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private?: boolean
    medalha?: boolean
  }

  export type TransporteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TransporteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArmazenamentoCreateInput = {
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio4Input
    linha: LinhaCreateNestedOneWithoutRelatorio4Input
  }

  export type ArmazenamentoUncheckedCreateInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private?: boolean
    medalha?: boolean
  }

  export type ArmazenamentoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio4NestedInput
    linha?: LinhaUpdateOneRequiredWithoutRelatorio4NestedInput
  }

  export type ArmazenamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArmazenamentoCreateManyInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private?: boolean
    medalha?: boolean
  }

  export type ArmazenamentoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArmazenamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VarejoCreateInput = {
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio5Input
    linha: LinhaCreateNestedOneWithoutRelatorio5Input
  }

  export type VarejoUncheckedCreateInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private?: boolean
    medalha?: boolean
  }

  export type VarejoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio5NestedInput
    linha?: LinhaUpdateOneRequiredWithoutRelatorio5NestedInput
  }

  export type VarejoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VarejoCreateManyInput = {
    id?: number
    id_user: number
    id_linha: number
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private?: boolean
    medalha?: boolean
  }

  export type VarejoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VarejoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProdutoCreateInput = {
    nome: string
    photo: string
    user: UserCreateNestedOneWithoutProdutoInput
    Linha?: LinhaCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateInput = {
    id?: number
    id_user: number
    nome: string
    photo: string
    Linha?: LinhaUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutProdutoNestedInput
    Linha?: LinhaUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    Linha?: LinhaUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoCreateManyInput = {
    id?: number
    id_user: number
    nome: string
    photo: string
  }

  export type ProdutoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
  }

  export type FeedCreateInput = {
    description: string
    user: UserCreateNestedOneWithoutFeedInput
  }

  export type FeedUncheckedCreateInput = {
    id?: number
    id_user: number
    description: string
  }

  export type FeedUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFeedNestedInput
  }

  export type FeedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type FeedCreateManyInput = {
    id?: number
    id_user: number
    description: string
  }

  export type FeedUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
  }

  export type FeedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type DenunciaListRelationFilter = {
    every?: DenunciaWhereInput
    some?: DenunciaWhereInput
    none?: DenunciaWhereInput
  }

  export type Prod_AgriListRelationFilter = {
    every?: Prod_AgriWhereInput
    some?: Prod_AgriWhereInput
    none?: Prod_AgriWhereInput
  }

  export type EmbalagemListRelationFilter = {
    every?: EmbalagemWhereInput
    some?: EmbalagemWhereInput
    none?: EmbalagemWhereInput
  }

  export type TransporteListRelationFilter = {
    every?: TransporteWhereInput
    some?: TransporteWhereInput
    none?: TransporteWhereInput
  }

  export type ArmazenamentoListRelationFilter = {
    every?: ArmazenamentoWhereInput
    some?: ArmazenamentoWhereInput
    none?: ArmazenamentoWhereInput
  }

  export type VarejoListRelationFilter = {
    every?: VarejoWhereInput
    some?: VarejoWhereInput
    none?: VarejoWhereInput
  }

  export type FeedListRelationFilter = {
    every?: FeedWhereInput
    some?: FeedWhereInput
    none?: FeedWhereInput
  }

  export type ProdutoListRelationFilter = {
    every?: ProdutoWhereInput
    some?: ProdutoWhereInput
    none?: ProdutoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DenunciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Prod_AgriOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmbalagemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransporteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArmazenamentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VarejoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProdutoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    cnpj?: SortOrder
    photo?: SortOrder
    local?: SortOrder
    telefone?: SortOrder
    gerente?: SortOrder
    fiscal?: SortOrder
    ban?: SortOrder
    created_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    cnpj?: SortOrder
    photo?: SortOrder
    local?: SortOrder
    telefone?: SortOrder
    gerente?: SortOrder
    fiscal?: SortOrder
    ban?: SortOrder
    created_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    cnpj?: SortOrder
    photo?: SortOrder
    local?: SortOrder
    telefone?: SortOrder
    gerente?: SortOrder
    fiscal?: SortOrder
    ban?: SortOrder
    created_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type UserRoleCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_role?: SortOrder
    responsavel_email?: SortOrder
  }

  export type UserRoleAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_role?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_role?: SortOrder
    responsavel_email?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_role?: SortOrder
    responsavel_email?: SortOrder
  }

  export type UserRoleSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_role?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type PermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type PermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PermissionRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    id_permission?: SortOrder
    id_role?: SortOrder
  }

  export type RolePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    id_permission?: SortOrder
    id_role?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    id_permission?: SortOrder
    id_role?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    id_permission?: SortOrder
    id_role?: SortOrder
  }

  export type RolePermissionSumOrderByAggregateInput = {
    id?: SortOrder
    id_permission?: SortOrder
    id_role?: SortOrder
  }

  export type UserPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_permission?: SortOrder
  }

  export type UserPermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_permission?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_permission?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_permission?: SortOrder
  }

  export type UserPermissionSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_permission?: SortOrder
  }

  export type DenunciaCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
    alvo?: SortOrder
  }

  export type DenunciaAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type DenunciaMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
    alvo?: SortOrder
  }

  export type DenunciaMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
    alvo?: SortOrder
  }

  export type DenunciaSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type ProdutoRelationFilter = {
    is?: ProdutoWhereInput
    isNot?: ProdutoWhereInput
  }

  export type LinhaCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    qrcode?: SortOrder
    id_produto?: SortOrder
  }

  export type LinhaAvgOrderByAggregateInput = {
    id?: SortOrder
    id_produto?: SortOrder
  }

  export type LinhaMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    qrcode?: SortOrder
    id_produto?: SortOrder
  }

  export type LinhaMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    qrcode?: SortOrder
    id_produto?: SortOrder
  }

  export type LinhaSumOrderByAggregateInput = {
    id?: SortOrder
    id_produto?: SortOrder
  }

  export type LinhaRelationFilter = {
    is?: LinhaWhereInput
    isNot?: LinhaWhereInput
  }

  export type Prod_AgriCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_plantio?: SortOrder
    dt_colheita?: SortOrder
    insumo?: SortOrder
    praticas?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type Prod_AgriAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type Prod_AgriMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_plantio?: SortOrder
    dt_colheita?: SortOrder
    insumo?: SortOrder
    praticas?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type Prod_AgriMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_plantio?: SortOrder
    dt_colheita?: SortOrder
    insumo?: SortOrder
    praticas?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type Prod_AgriSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type EmbalagemCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    ingrediente?: SortOrder
    praticas?: SortOrder
    dt_processamento?: SortOrder
    dt_embalagem?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type EmbalagemAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type EmbalagemMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    ingrediente?: SortOrder
    praticas?: SortOrder
    dt_processamento?: SortOrder
    dt_embalagem?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type EmbalagemMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    ingrediente?: SortOrder
    praticas?: SortOrder
    dt_processamento?: SortOrder
    dt_embalagem?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type EmbalagemSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type TransporteCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    praticas?: SortOrder
    dt_carregamento?: SortOrder
    dt_descarregamento?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type TransporteAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type TransporteMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    praticas?: SortOrder
    dt_carregamento?: SortOrder
    dt_descarregamento?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type TransporteMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    praticas?: SortOrder
    dt_carregamento?: SortOrder
    dt_descarregamento?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type TransporteSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type ArmazenamentoCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    praticas?: SortOrder
    responsavel?: SortOrder
    dt_entrada?: SortOrder
    dt_saida?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type ArmazenamentoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type ArmazenamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    praticas?: SortOrder
    responsavel?: SortOrder
    dt_entrada?: SortOrder
    dt_saida?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type ArmazenamentoMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    praticas?: SortOrder
    responsavel?: SortOrder
    dt_entrada?: SortOrder
    dt_saida?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type ArmazenamentoSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type VarejoCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_chegada?: SortOrder
    dt_validade?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type VarejoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type VarejoMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_chegada?: SortOrder
    dt_validade?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type VarejoMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
    nome?: SortOrder
    local?: SortOrder
    dt_chegada?: SortOrder
    dt_validade?: SortOrder
    private?: SortOrder
    medalha?: SortOrder
  }

  export type VarejoSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_linha?: SortOrder
  }

  export type LinhaListRelationFilter = {
    every?: LinhaWhereInput
    some?: LinhaWhereInput
    none?: LinhaWhereInput
  }

  export type LinhaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProdutoCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    nome?: SortOrder
    photo?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    nome?: SortOrder
    photo?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    nome?: SortOrder
    photo?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type FeedCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
  }

  export type FeedAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type FeedMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
  }

  export type FeedMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    description?: SortOrder
  }

  export type FeedSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type DenunciaCreateNestedManyWithoutUserInput = {
    create?: XOR<DenunciaCreateWithoutUserInput, DenunciaUncheckedCreateWithoutUserInput> | DenunciaCreateWithoutUserInput[] | DenunciaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DenunciaCreateOrConnectWithoutUserInput | DenunciaCreateOrConnectWithoutUserInput[]
    createMany?: DenunciaCreateManyUserInputEnvelope
    connect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
  }

  export type Prod_AgriCreateNestedManyWithoutUserInput = {
    create?: XOR<Prod_AgriCreateWithoutUserInput, Prod_AgriUncheckedCreateWithoutUserInput> | Prod_AgriCreateWithoutUserInput[] | Prod_AgriUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Prod_AgriCreateOrConnectWithoutUserInput | Prod_AgriCreateOrConnectWithoutUserInput[]
    createMany?: Prod_AgriCreateManyUserInputEnvelope
    connect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
  }

  export type EmbalagemCreateNestedManyWithoutUserInput = {
    create?: XOR<EmbalagemCreateWithoutUserInput, EmbalagemUncheckedCreateWithoutUserInput> | EmbalagemCreateWithoutUserInput[] | EmbalagemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmbalagemCreateOrConnectWithoutUserInput | EmbalagemCreateOrConnectWithoutUserInput[]
    createMany?: EmbalagemCreateManyUserInputEnvelope
    connect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
  }

  export type TransporteCreateNestedManyWithoutUserInput = {
    create?: XOR<TransporteCreateWithoutUserInput, TransporteUncheckedCreateWithoutUserInput> | TransporteCreateWithoutUserInput[] | TransporteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransporteCreateOrConnectWithoutUserInput | TransporteCreateOrConnectWithoutUserInput[]
    createMany?: TransporteCreateManyUserInputEnvelope
    connect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
  }

  export type ArmazenamentoCreateNestedManyWithoutUserInput = {
    create?: XOR<ArmazenamentoCreateWithoutUserInput, ArmazenamentoUncheckedCreateWithoutUserInput> | ArmazenamentoCreateWithoutUserInput[] | ArmazenamentoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArmazenamentoCreateOrConnectWithoutUserInput | ArmazenamentoCreateOrConnectWithoutUserInput[]
    createMany?: ArmazenamentoCreateManyUserInputEnvelope
    connect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
  }

  export type VarejoCreateNestedManyWithoutUserInput = {
    create?: XOR<VarejoCreateWithoutUserInput, VarejoUncheckedCreateWithoutUserInput> | VarejoCreateWithoutUserInput[] | VarejoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VarejoCreateOrConnectWithoutUserInput | VarejoCreateOrConnectWithoutUserInput[]
    createMany?: VarejoCreateManyUserInputEnvelope
    connect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
  }

  export type FeedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput> | FeedCreateWithoutUserInput[] | FeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedCreateOrConnectWithoutUserInput | FeedCreateOrConnectWithoutUserInput[]
    createMany?: FeedCreateManyUserInputEnvelope
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
  }

  export type ProdutoCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdutoCreateWithoutUserInput, ProdutoUncheckedCreateWithoutUserInput> | ProdutoCreateWithoutUserInput[] | ProdutoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutUserInput | ProdutoCreateOrConnectWithoutUserInput[]
    createMany?: ProdutoCreateManyUserInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type DenunciaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DenunciaCreateWithoutUserInput, DenunciaUncheckedCreateWithoutUserInput> | DenunciaCreateWithoutUserInput[] | DenunciaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DenunciaCreateOrConnectWithoutUserInput | DenunciaCreateOrConnectWithoutUserInput[]
    createMany?: DenunciaCreateManyUserInputEnvelope
    connect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
  }

  export type Prod_AgriUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Prod_AgriCreateWithoutUserInput, Prod_AgriUncheckedCreateWithoutUserInput> | Prod_AgriCreateWithoutUserInput[] | Prod_AgriUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Prod_AgriCreateOrConnectWithoutUserInput | Prod_AgriCreateOrConnectWithoutUserInput[]
    createMany?: Prod_AgriCreateManyUserInputEnvelope
    connect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
  }

  export type EmbalagemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmbalagemCreateWithoutUserInput, EmbalagemUncheckedCreateWithoutUserInput> | EmbalagemCreateWithoutUserInput[] | EmbalagemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmbalagemCreateOrConnectWithoutUserInput | EmbalagemCreateOrConnectWithoutUserInput[]
    createMany?: EmbalagemCreateManyUserInputEnvelope
    connect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
  }

  export type TransporteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransporteCreateWithoutUserInput, TransporteUncheckedCreateWithoutUserInput> | TransporteCreateWithoutUserInput[] | TransporteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransporteCreateOrConnectWithoutUserInput | TransporteCreateOrConnectWithoutUserInput[]
    createMany?: TransporteCreateManyUserInputEnvelope
    connect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
  }

  export type ArmazenamentoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ArmazenamentoCreateWithoutUserInput, ArmazenamentoUncheckedCreateWithoutUserInput> | ArmazenamentoCreateWithoutUserInput[] | ArmazenamentoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArmazenamentoCreateOrConnectWithoutUserInput | ArmazenamentoCreateOrConnectWithoutUserInput[]
    createMany?: ArmazenamentoCreateManyUserInputEnvelope
    connect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
  }

  export type VarejoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VarejoCreateWithoutUserInput, VarejoUncheckedCreateWithoutUserInput> | VarejoCreateWithoutUserInput[] | VarejoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VarejoCreateOrConnectWithoutUserInput | VarejoCreateOrConnectWithoutUserInput[]
    createMany?: VarejoCreateManyUserInputEnvelope
    connect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
  }

  export type FeedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput> | FeedCreateWithoutUserInput[] | FeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedCreateOrConnectWithoutUserInput | FeedCreateOrConnectWithoutUserInput[]
    createMany?: FeedCreateManyUserInputEnvelope
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
  }

  export type ProdutoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdutoCreateWithoutUserInput, ProdutoUncheckedCreateWithoutUserInput> | ProdutoCreateWithoutUserInput[] | ProdutoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutUserInput | ProdutoCreateOrConnectWithoutUserInput[]
    createMany?: ProdutoCreateManyUserInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type DenunciaUpdateManyWithoutUserNestedInput = {
    create?: XOR<DenunciaCreateWithoutUserInput, DenunciaUncheckedCreateWithoutUserInput> | DenunciaCreateWithoutUserInput[] | DenunciaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DenunciaCreateOrConnectWithoutUserInput | DenunciaCreateOrConnectWithoutUserInput[]
    upsert?: DenunciaUpsertWithWhereUniqueWithoutUserInput | DenunciaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DenunciaCreateManyUserInputEnvelope
    set?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    disconnect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    delete?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    connect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    update?: DenunciaUpdateWithWhereUniqueWithoutUserInput | DenunciaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DenunciaUpdateManyWithWhereWithoutUserInput | DenunciaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DenunciaScalarWhereInput | DenunciaScalarWhereInput[]
  }

  export type Prod_AgriUpdateManyWithoutUserNestedInput = {
    create?: XOR<Prod_AgriCreateWithoutUserInput, Prod_AgriUncheckedCreateWithoutUserInput> | Prod_AgriCreateWithoutUserInput[] | Prod_AgriUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Prod_AgriCreateOrConnectWithoutUserInput | Prod_AgriCreateOrConnectWithoutUserInput[]
    upsert?: Prod_AgriUpsertWithWhereUniqueWithoutUserInput | Prod_AgriUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Prod_AgriCreateManyUserInputEnvelope
    set?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    disconnect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    delete?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    connect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    update?: Prod_AgriUpdateWithWhereUniqueWithoutUserInput | Prod_AgriUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Prod_AgriUpdateManyWithWhereWithoutUserInput | Prod_AgriUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Prod_AgriScalarWhereInput | Prod_AgriScalarWhereInput[]
  }

  export type EmbalagemUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmbalagemCreateWithoutUserInput, EmbalagemUncheckedCreateWithoutUserInput> | EmbalagemCreateWithoutUserInput[] | EmbalagemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmbalagemCreateOrConnectWithoutUserInput | EmbalagemCreateOrConnectWithoutUserInput[]
    upsert?: EmbalagemUpsertWithWhereUniqueWithoutUserInput | EmbalagemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmbalagemCreateManyUserInputEnvelope
    set?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    disconnect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    delete?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    connect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    update?: EmbalagemUpdateWithWhereUniqueWithoutUserInput | EmbalagemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmbalagemUpdateManyWithWhereWithoutUserInput | EmbalagemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmbalagemScalarWhereInput | EmbalagemScalarWhereInput[]
  }

  export type TransporteUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransporteCreateWithoutUserInput, TransporteUncheckedCreateWithoutUserInput> | TransporteCreateWithoutUserInput[] | TransporteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransporteCreateOrConnectWithoutUserInput | TransporteCreateOrConnectWithoutUserInput[]
    upsert?: TransporteUpsertWithWhereUniqueWithoutUserInput | TransporteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransporteCreateManyUserInputEnvelope
    set?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    disconnect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    delete?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    connect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    update?: TransporteUpdateWithWhereUniqueWithoutUserInput | TransporteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransporteUpdateManyWithWhereWithoutUserInput | TransporteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransporteScalarWhereInput | TransporteScalarWhereInput[]
  }

  export type ArmazenamentoUpdateManyWithoutUserNestedInput = {
    create?: XOR<ArmazenamentoCreateWithoutUserInput, ArmazenamentoUncheckedCreateWithoutUserInput> | ArmazenamentoCreateWithoutUserInput[] | ArmazenamentoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArmazenamentoCreateOrConnectWithoutUserInput | ArmazenamentoCreateOrConnectWithoutUserInput[]
    upsert?: ArmazenamentoUpsertWithWhereUniqueWithoutUserInput | ArmazenamentoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ArmazenamentoCreateManyUserInputEnvelope
    set?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    disconnect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    delete?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    connect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    update?: ArmazenamentoUpdateWithWhereUniqueWithoutUserInput | ArmazenamentoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ArmazenamentoUpdateManyWithWhereWithoutUserInput | ArmazenamentoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ArmazenamentoScalarWhereInput | ArmazenamentoScalarWhereInput[]
  }

  export type VarejoUpdateManyWithoutUserNestedInput = {
    create?: XOR<VarejoCreateWithoutUserInput, VarejoUncheckedCreateWithoutUserInput> | VarejoCreateWithoutUserInput[] | VarejoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VarejoCreateOrConnectWithoutUserInput | VarejoCreateOrConnectWithoutUserInput[]
    upsert?: VarejoUpsertWithWhereUniqueWithoutUserInput | VarejoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VarejoCreateManyUserInputEnvelope
    set?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    disconnect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    delete?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    connect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    update?: VarejoUpdateWithWhereUniqueWithoutUserInput | VarejoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VarejoUpdateManyWithWhereWithoutUserInput | VarejoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VarejoScalarWhereInput | VarejoScalarWhereInput[]
  }

  export type FeedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput> | FeedCreateWithoutUserInput[] | FeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedCreateOrConnectWithoutUserInput | FeedCreateOrConnectWithoutUserInput[]
    upsert?: FeedUpsertWithWhereUniqueWithoutUserInput | FeedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedCreateManyUserInputEnvelope
    set?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
    disconnect?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
    delete?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
    update?: FeedUpdateWithWhereUniqueWithoutUserInput | FeedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedUpdateManyWithWhereWithoutUserInput | FeedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedScalarWhereInput | FeedScalarWhereInput[]
  }

  export type ProdutoUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdutoCreateWithoutUserInput, ProdutoUncheckedCreateWithoutUserInput> | ProdutoCreateWithoutUserInput[] | ProdutoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutUserInput | ProdutoCreateOrConnectWithoutUserInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutUserInput | ProdutoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdutoCreateManyUserInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutUserInput | ProdutoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutUserInput | ProdutoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type DenunciaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DenunciaCreateWithoutUserInput, DenunciaUncheckedCreateWithoutUserInput> | DenunciaCreateWithoutUserInput[] | DenunciaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DenunciaCreateOrConnectWithoutUserInput | DenunciaCreateOrConnectWithoutUserInput[]
    upsert?: DenunciaUpsertWithWhereUniqueWithoutUserInput | DenunciaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DenunciaCreateManyUserInputEnvelope
    set?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    disconnect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    delete?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    connect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    update?: DenunciaUpdateWithWhereUniqueWithoutUserInput | DenunciaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DenunciaUpdateManyWithWhereWithoutUserInput | DenunciaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DenunciaScalarWhereInput | DenunciaScalarWhereInput[]
  }

  export type Prod_AgriUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Prod_AgriCreateWithoutUserInput, Prod_AgriUncheckedCreateWithoutUserInput> | Prod_AgriCreateWithoutUserInput[] | Prod_AgriUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Prod_AgriCreateOrConnectWithoutUserInput | Prod_AgriCreateOrConnectWithoutUserInput[]
    upsert?: Prod_AgriUpsertWithWhereUniqueWithoutUserInput | Prod_AgriUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Prod_AgriCreateManyUserInputEnvelope
    set?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    disconnect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    delete?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    connect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    update?: Prod_AgriUpdateWithWhereUniqueWithoutUserInput | Prod_AgriUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Prod_AgriUpdateManyWithWhereWithoutUserInput | Prod_AgriUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Prod_AgriScalarWhereInput | Prod_AgriScalarWhereInput[]
  }

  export type EmbalagemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmbalagemCreateWithoutUserInput, EmbalagemUncheckedCreateWithoutUserInput> | EmbalagemCreateWithoutUserInput[] | EmbalagemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmbalagemCreateOrConnectWithoutUserInput | EmbalagemCreateOrConnectWithoutUserInput[]
    upsert?: EmbalagemUpsertWithWhereUniqueWithoutUserInput | EmbalagemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmbalagemCreateManyUserInputEnvelope
    set?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    disconnect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    delete?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    connect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    update?: EmbalagemUpdateWithWhereUniqueWithoutUserInput | EmbalagemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmbalagemUpdateManyWithWhereWithoutUserInput | EmbalagemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmbalagemScalarWhereInput | EmbalagemScalarWhereInput[]
  }

  export type TransporteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransporteCreateWithoutUserInput, TransporteUncheckedCreateWithoutUserInput> | TransporteCreateWithoutUserInput[] | TransporteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransporteCreateOrConnectWithoutUserInput | TransporteCreateOrConnectWithoutUserInput[]
    upsert?: TransporteUpsertWithWhereUniqueWithoutUserInput | TransporteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransporteCreateManyUserInputEnvelope
    set?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    disconnect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    delete?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    connect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    update?: TransporteUpdateWithWhereUniqueWithoutUserInput | TransporteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransporteUpdateManyWithWhereWithoutUserInput | TransporteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransporteScalarWhereInput | TransporteScalarWhereInput[]
  }

  export type ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ArmazenamentoCreateWithoutUserInput, ArmazenamentoUncheckedCreateWithoutUserInput> | ArmazenamentoCreateWithoutUserInput[] | ArmazenamentoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArmazenamentoCreateOrConnectWithoutUserInput | ArmazenamentoCreateOrConnectWithoutUserInput[]
    upsert?: ArmazenamentoUpsertWithWhereUniqueWithoutUserInput | ArmazenamentoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ArmazenamentoCreateManyUserInputEnvelope
    set?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    disconnect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    delete?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    connect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    update?: ArmazenamentoUpdateWithWhereUniqueWithoutUserInput | ArmazenamentoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ArmazenamentoUpdateManyWithWhereWithoutUserInput | ArmazenamentoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ArmazenamentoScalarWhereInput | ArmazenamentoScalarWhereInput[]
  }

  export type VarejoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VarejoCreateWithoutUserInput, VarejoUncheckedCreateWithoutUserInput> | VarejoCreateWithoutUserInput[] | VarejoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VarejoCreateOrConnectWithoutUserInput | VarejoCreateOrConnectWithoutUserInput[]
    upsert?: VarejoUpsertWithWhereUniqueWithoutUserInput | VarejoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VarejoCreateManyUserInputEnvelope
    set?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    disconnect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    delete?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    connect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    update?: VarejoUpdateWithWhereUniqueWithoutUserInput | VarejoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VarejoUpdateManyWithWhereWithoutUserInput | VarejoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VarejoScalarWhereInput | VarejoScalarWhereInput[]
  }

  export type FeedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput> | FeedCreateWithoutUserInput[] | FeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedCreateOrConnectWithoutUserInput | FeedCreateOrConnectWithoutUserInput[]
    upsert?: FeedUpsertWithWhereUniqueWithoutUserInput | FeedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedCreateManyUserInputEnvelope
    set?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
    disconnect?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
    delete?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[]
    update?: FeedUpdateWithWhereUniqueWithoutUserInput | FeedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedUpdateManyWithWhereWithoutUserInput | FeedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedScalarWhereInput | FeedScalarWhereInput[]
  }

  export type ProdutoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdutoCreateWithoutUserInput, ProdutoUncheckedCreateWithoutUserInput> | ProdutoCreateWithoutUserInput[] | ProdutoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutUserInput | ProdutoCreateOrConnectWithoutUserInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutUserInput | ProdutoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdutoCreateManyUserInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutUserInput | ProdutoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutUserInput | ProdutoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserRoleInput = {
    create?: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUserRoleInput = {
    create?: XOR<RoleCreateWithoutUserRoleInput, RoleUncheckedCreateWithoutUserRoleInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRoleInput
    connect?: RoleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserRoleNestedInput = {
    create?: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleInput
    upsert?: UserUpsertWithoutUserRoleInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRoleInput, UserUpdateWithoutUserRoleInput>, UserUncheckedUpdateWithoutUserRoleInput>
  }

  export type RoleUpdateOneRequiredWithoutUserRoleNestedInput = {
    create?: XOR<RoleCreateWithoutUserRoleInput, RoleUncheckedCreateWithoutUserRoleInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRoleInput
    upsert?: RoleUpsertWithoutUserRoleInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUserRoleInput, RoleUpdateWithoutUserRoleInput>, RoleUncheckedUpdateWithoutUserRoleInput>
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type PermissionCreateNestedOneWithoutRolePermissionInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionInput, PermissionUncheckedCreateWithoutRolePermissionInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionInput
    connect?: PermissionWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutRolePermissionInput = {
    create?: XOR<RoleCreateWithoutRolePermissionInput, RoleUncheckedCreateWithoutRolePermissionInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRolePermissionInput
    connect?: RoleWhereUniqueInput
  }

  export type PermissionUpdateOneRequiredWithoutRolePermissionNestedInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionInput, PermissionUncheckedCreateWithoutRolePermissionInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionInput
    upsert?: PermissionUpsertWithoutRolePermissionInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolePermissionInput, PermissionUpdateWithoutRolePermissionInput>, PermissionUncheckedUpdateWithoutRolePermissionInput>
  }

  export type RoleUpdateOneRequiredWithoutRolePermissionNestedInput = {
    create?: XOR<RoleCreateWithoutRolePermissionInput, RoleUncheckedCreateWithoutRolePermissionInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRolePermissionInput
    upsert?: RoleUpsertWithoutRolePermissionInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutRolePermissionInput, RoleUpdateWithoutRolePermissionInput>, RoleUncheckedUpdateWithoutRolePermissionInput>
  }

  export type UserCreateNestedOneWithoutUserPermissionInput = {
    create?: XOR<UserCreateWithoutUserPermissionInput, UserUncheckedCreateWithoutUserPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPermissionInput
    connect?: UserWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutUserPermissionInput = {
    create?: XOR<PermissionCreateWithoutUserPermissionInput, PermissionUncheckedCreateWithoutUserPermissionInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUserPermissionInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserPermissionNestedInput = {
    create?: XOR<UserCreateWithoutUserPermissionInput, UserUncheckedCreateWithoutUserPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPermissionInput
    upsert?: UserUpsertWithoutUserPermissionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserPermissionInput, UserUpdateWithoutUserPermissionInput>, UserUncheckedUpdateWithoutUserPermissionInput>
  }

  export type PermissionUpdateOneRequiredWithoutUserPermissionNestedInput = {
    create?: XOR<PermissionCreateWithoutUserPermissionInput, PermissionUncheckedCreateWithoutUserPermissionInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUserPermissionInput
    upsert?: PermissionUpsertWithoutUserPermissionInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutUserPermissionInput, PermissionUpdateWithoutUserPermissionInput>, PermissionUncheckedUpdateWithoutUserPermissionInput>
  }

  export type UserCreateNestedOneWithoutDenunciaInput = {
    create?: XOR<UserCreateWithoutDenunciaInput, UserUncheckedCreateWithoutDenunciaInput>
    connectOrCreate?: UserCreateOrConnectWithoutDenunciaInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDenunciaNestedInput = {
    create?: XOR<UserCreateWithoutDenunciaInput, UserUncheckedCreateWithoutDenunciaInput>
    connectOrCreate?: UserCreateOrConnectWithoutDenunciaInput
    upsert?: UserUpsertWithoutDenunciaInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDenunciaInput, UserUpdateWithoutDenunciaInput>, UserUncheckedUpdateWithoutDenunciaInput>
  }

  export type Prod_AgriCreateNestedManyWithoutLinhaInput = {
    create?: XOR<Prod_AgriCreateWithoutLinhaInput, Prod_AgriUncheckedCreateWithoutLinhaInput> | Prod_AgriCreateWithoutLinhaInput[] | Prod_AgriUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: Prod_AgriCreateOrConnectWithoutLinhaInput | Prod_AgriCreateOrConnectWithoutLinhaInput[]
    createMany?: Prod_AgriCreateManyLinhaInputEnvelope
    connect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
  }

  export type EmbalagemCreateNestedManyWithoutLinhaInput = {
    create?: XOR<EmbalagemCreateWithoutLinhaInput, EmbalagemUncheckedCreateWithoutLinhaInput> | EmbalagemCreateWithoutLinhaInput[] | EmbalagemUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: EmbalagemCreateOrConnectWithoutLinhaInput | EmbalagemCreateOrConnectWithoutLinhaInput[]
    createMany?: EmbalagemCreateManyLinhaInputEnvelope
    connect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
  }

  export type TransporteCreateNestedManyWithoutLinhaInput = {
    create?: XOR<TransporteCreateWithoutLinhaInput, TransporteUncheckedCreateWithoutLinhaInput> | TransporteCreateWithoutLinhaInput[] | TransporteUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: TransporteCreateOrConnectWithoutLinhaInput | TransporteCreateOrConnectWithoutLinhaInput[]
    createMany?: TransporteCreateManyLinhaInputEnvelope
    connect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
  }

  export type ArmazenamentoCreateNestedManyWithoutLinhaInput = {
    create?: XOR<ArmazenamentoCreateWithoutLinhaInput, ArmazenamentoUncheckedCreateWithoutLinhaInput> | ArmazenamentoCreateWithoutLinhaInput[] | ArmazenamentoUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: ArmazenamentoCreateOrConnectWithoutLinhaInput | ArmazenamentoCreateOrConnectWithoutLinhaInput[]
    createMany?: ArmazenamentoCreateManyLinhaInputEnvelope
    connect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
  }

  export type VarejoCreateNestedManyWithoutLinhaInput = {
    create?: XOR<VarejoCreateWithoutLinhaInput, VarejoUncheckedCreateWithoutLinhaInput> | VarejoCreateWithoutLinhaInput[] | VarejoUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: VarejoCreateOrConnectWithoutLinhaInput | VarejoCreateOrConnectWithoutLinhaInput[]
    createMany?: VarejoCreateManyLinhaInputEnvelope
    connect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
  }

  export type ProdutoCreateNestedOneWithoutLinhaInput = {
    create?: XOR<ProdutoCreateWithoutLinhaInput, ProdutoUncheckedCreateWithoutLinhaInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutLinhaInput
    connect?: ProdutoWhereUniqueInput
  }

  export type Prod_AgriUncheckedCreateNestedManyWithoutLinhaInput = {
    create?: XOR<Prod_AgriCreateWithoutLinhaInput, Prod_AgriUncheckedCreateWithoutLinhaInput> | Prod_AgriCreateWithoutLinhaInput[] | Prod_AgriUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: Prod_AgriCreateOrConnectWithoutLinhaInput | Prod_AgriCreateOrConnectWithoutLinhaInput[]
    createMany?: Prod_AgriCreateManyLinhaInputEnvelope
    connect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
  }

  export type EmbalagemUncheckedCreateNestedManyWithoutLinhaInput = {
    create?: XOR<EmbalagemCreateWithoutLinhaInput, EmbalagemUncheckedCreateWithoutLinhaInput> | EmbalagemCreateWithoutLinhaInput[] | EmbalagemUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: EmbalagemCreateOrConnectWithoutLinhaInput | EmbalagemCreateOrConnectWithoutLinhaInput[]
    createMany?: EmbalagemCreateManyLinhaInputEnvelope
    connect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
  }

  export type TransporteUncheckedCreateNestedManyWithoutLinhaInput = {
    create?: XOR<TransporteCreateWithoutLinhaInput, TransporteUncheckedCreateWithoutLinhaInput> | TransporteCreateWithoutLinhaInput[] | TransporteUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: TransporteCreateOrConnectWithoutLinhaInput | TransporteCreateOrConnectWithoutLinhaInput[]
    createMany?: TransporteCreateManyLinhaInputEnvelope
    connect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
  }

  export type ArmazenamentoUncheckedCreateNestedManyWithoutLinhaInput = {
    create?: XOR<ArmazenamentoCreateWithoutLinhaInput, ArmazenamentoUncheckedCreateWithoutLinhaInput> | ArmazenamentoCreateWithoutLinhaInput[] | ArmazenamentoUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: ArmazenamentoCreateOrConnectWithoutLinhaInput | ArmazenamentoCreateOrConnectWithoutLinhaInput[]
    createMany?: ArmazenamentoCreateManyLinhaInputEnvelope
    connect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
  }

  export type VarejoUncheckedCreateNestedManyWithoutLinhaInput = {
    create?: XOR<VarejoCreateWithoutLinhaInput, VarejoUncheckedCreateWithoutLinhaInput> | VarejoCreateWithoutLinhaInput[] | VarejoUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: VarejoCreateOrConnectWithoutLinhaInput | VarejoCreateOrConnectWithoutLinhaInput[]
    createMany?: VarejoCreateManyLinhaInputEnvelope
    connect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
  }

  export type Prod_AgriUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<Prod_AgriCreateWithoutLinhaInput, Prod_AgriUncheckedCreateWithoutLinhaInput> | Prod_AgriCreateWithoutLinhaInput[] | Prod_AgriUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: Prod_AgriCreateOrConnectWithoutLinhaInput | Prod_AgriCreateOrConnectWithoutLinhaInput[]
    upsert?: Prod_AgriUpsertWithWhereUniqueWithoutLinhaInput | Prod_AgriUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: Prod_AgriCreateManyLinhaInputEnvelope
    set?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    disconnect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    delete?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    connect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    update?: Prod_AgriUpdateWithWhereUniqueWithoutLinhaInput | Prod_AgriUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: Prod_AgriUpdateManyWithWhereWithoutLinhaInput | Prod_AgriUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: Prod_AgriScalarWhereInput | Prod_AgriScalarWhereInput[]
  }

  export type EmbalagemUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<EmbalagemCreateWithoutLinhaInput, EmbalagemUncheckedCreateWithoutLinhaInput> | EmbalagemCreateWithoutLinhaInput[] | EmbalagemUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: EmbalagemCreateOrConnectWithoutLinhaInput | EmbalagemCreateOrConnectWithoutLinhaInput[]
    upsert?: EmbalagemUpsertWithWhereUniqueWithoutLinhaInput | EmbalagemUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: EmbalagemCreateManyLinhaInputEnvelope
    set?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    disconnect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    delete?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    connect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    update?: EmbalagemUpdateWithWhereUniqueWithoutLinhaInput | EmbalagemUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: EmbalagemUpdateManyWithWhereWithoutLinhaInput | EmbalagemUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: EmbalagemScalarWhereInput | EmbalagemScalarWhereInput[]
  }

  export type TransporteUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<TransporteCreateWithoutLinhaInput, TransporteUncheckedCreateWithoutLinhaInput> | TransporteCreateWithoutLinhaInput[] | TransporteUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: TransporteCreateOrConnectWithoutLinhaInput | TransporteCreateOrConnectWithoutLinhaInput[]
    upsert?: TransporteUpsertWithWhereUniqueWithoutLinhaInput | TransporteUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: TransporteCreateManyLinhaInputEnvelope
    set?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    disconnect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    delete?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    connect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    update?: TransporteUpdateWithWhereUniqueWithoutLinhaInput | TransporteUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: TransporteUpdateManyWithWhereWithoutLinhaInput | TransporteUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: TransporteScalarWhereInput | TransporteScalarWhereInput[]
  }

  export type ArmazenamentoUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<ArmazenamentoCreateWithoutLinhaInput, ArmazenamentoUncheckedCreateWithoutLinhaInput> | ArmazenamentoCreateWithoutLinhaInput[] | ArmazenamentoUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: ArmazenamentoCreateOrConnectWithoutLinhaInput | ArmazenamentoCreateOrConnectWithoutLinhaInput[]
    upsert?: ArmazenamentoUpsertWithWhereUniqueWithoutLinhaInput | ArmazenamentoUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: ArmazenamentoCreateManyLinhaInputEnvelope
    set?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    disconnect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    delete?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    connect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    update?: ArmazenamentoUpdateWithWhereUniqueWithoutLinhaInput | ArmazenamentoUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: ArmazenamentoUpdateManyWithWhereWithoutLinhaInput | ArmazenamentoUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: ArmazenamentoScalarWhereInput | ArmazenamentoScalarWhereInput[]
  }

  export type VarejoUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<VarejoCreateWithoutLinhaInput, VarejoUncheckedCreateWithoutLinhaInput> | VarejoCreateWithoutLinhaInput[] | VarejoUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: VarejoCreateOrConnectWithoutLinhaInput | VarejoCreateOrConnectWithoutLinhaInput[]
    upsert?: VarejoUpsertWithWhereUniqueWithoutLinhaInput | VarejoUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: VarejoCreateManyLinhaInputEnvelope
    set?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    disconnect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    delete?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    connect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    update?: VarejoUpdateWithWhereUniqueWithoutLinhaInput | VarejoUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: VarejoUpdateManyWithWhereWithoutLinhaInput | VarejoUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: VarejoScalarWhereInput | VarejoScalarWhereInput[]
  }

  export type ProdutoUpdateOneRequiredWithoutLinhaNestedInput = {
    create?: XOR<ProdutoCreateWithoutLinhaInput, ProdutoUncheckedCreateWithoutLinhaInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutLinhaInput
    upsert?: ProdutoUpsertWithoutLinhaInput
    connect?: ProdutoWhereUniqueInput
    update?: XOR<XOR<ProdutoUpdateToOneWithWhereWithoutLinhaInput, ProdutoUpdateWithoutLinhaInput>, ProdutoUncheckedUpdateWithoutLinhaInput>
  }

  export type Prod_AgriUncheckedUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<Prod_AgriCreateWithoutLinhaInput, Prod_AgriUncheckedCreateWithoutLinhaInput> | Prod_AgriCreateWithoutLinhaInput[] | Prod_AgriUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: Prod_AgriCreateOrConnectWithoutLinhaInput | Prod_AgriCreateOrConnectWithoutLinhaInput[]
    upsert?: Prod_AgriUpsertWithWhereUniqueWithoutLinhaInput | Prod_AgriUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: Prod_AgriCreateManyLinhaInputEnvelope
    set?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    disconnect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    delete?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    connect?: Prod_AgriWhereUniqueInput | Prod_AgriWhereUniqueInput[]
    update?: Prod_AgriUpdateWithWhereUniqueWithoutLinhaInput | Prod_AgriUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: Prod_AgriUpdateManyWithWhereWithoutLinhaInput | Prod_AgriUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: Prod_AgriScalarWhereInput | Prod_AgriScalarWhereInput[]
  }

  export type EmbalagemUncheckedUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<EmbalagemCreateWithoutLinhaInput, EmbalagemUncheckedCreateWithoutLinhaInput> | EmbalagemCreateWithoutLinhaInput[] | EmbalagemUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: EmbalagemCreateOrConnectWithoutLinhaInput | EmbalagemCreateOrConnectWithoutLinhaInput[]
    upsert?: EmbalagemUpsertWithWhereUniqueWithoutLinhaInput | EmbalagemUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: EmbalagemCreateManyLinhaInputEnvelope
    set?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    disconnect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    delete?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    connect?: EmbalagemWhereUniqueInput | EmbalagemWhereUniqueInput[]
    update?: EmbalagemUpdateWithWhereUniqueWithoutLinhaInput | EmbalagemUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: EmbalagemUpdateManyWithWhereWithoutLinhaInput | EmbalagemUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: EmbalagemScalarWhereInput | EmbalagemScalarWhereInput[]
  }

  export type TransporteUncheckedUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<TransporteCreateWithoutLinhaInput, TransporteUncheckedCreateWithoutLinhaInput> | TransporteCreateWithoutLinhaInput[] | TransporteUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: TransporteCreateOrConnectWithoutLinhaInput | TransporteCreateOrConnectWithoutLinhaInput[]
    upsert?: TransporteUpsertWithWhereUniqueWithoutLinhaInput | TransporteUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: TransporteCreateManyLinhaInputEnvelope
    set?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    disconnect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    delete?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    connect?: TransporteWhereUniqueInput | TransporteWhereUniqueInput[]
    update?: TransporteUpdateWithWhereUniqueWithoutLinhaInput | TransporteUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: TransporteUpdateManyWithWhereWithoutLinhaInput | TransporteUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: TransporteScalarWhereInput | TransporteScalarWhereInput[]
  }

  export type ArmazenamentoUncheckedUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<ArmazenamentoCreateWithoutLinhaInput, ArmazenamentoUncheckedCreateWithoutLinhaInput> | ArmazenamentoCreateWithoutLinhaInput[] | ArmazenamentoUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: ArmazenamentoCreateOrConnectWithoutLinhaInput | ArmazenamentoCreateOrConnectWithoutLinhaInput[]
    upsert?: ArmazenamentoUpsertWithWhereUniqueWithoutLinhaInput | ArmazenamentoUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: ArmazenamentoCreateManyLinhaInputEnvelope
    set?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    disconnect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    delete?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    connect?: ArmazenamentoWhereUniqueInput | ArmazenamentoWhereUniqueInput[]
    update?: ArmazenamentoUpdateWithWhereUniqueWithoutLinhaInput | ArmazenamentoUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: ArmazenamentoUpdateManyWithWhereWithoutLinhaInput | ArmazenamentoUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: ArmazenamentoScalarWhereInput | ArmazenamentoScalarWhereInput[]
  }

  export type VarejoUncheckedUpdateManyWithoutLinhaNestedInput = {
    create?: XOR<VarejoCreateWithoutLinhaInput, VarejoUncheckedCreateWithoutLinhaInput> | VarejoCreateWithoutLinhaInput[] | VarejoUncheckedCreateWithoutLinhaInput[]
    connectOrCreate?: VarejoCreateOrConnectWithoutLinhaInput | VarejoCreateOrConnectWithoutLinhaInput[]
    upsert?: VarejoUpsertWithWhereUniqueWithoutLinhaInput | VarejoUpsertWithWhereUniqueWithoutLinhaInput[]
    createMany?: VarejoCreateManyLinhaInputEnvelope
    set?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    disconnect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    delete?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    connect?: VarejoWhereUniqueInput | VarejoWhereUniqueInput[]
    update?: VarejoUpdateWithWhereUniqueWithoutLinhaInput | VarejoUpdateWithWhereUniqueWithoutLinhaInput[]
    updateMany?: VarejoUpdateManyWithWhereWithoutLinhaInput | VarejoUpdateManyWithWhereWithoutLinhaInput[]
    deleteMany?: VarejoScalarWhereInput | VarejoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRelatorio1Input = {
    create?: XOR<UserCreateWithoutRelatorio1Input, UserUncheckedCreateWithoutRelatorio1Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio1Input
    connect?: UserWhereUniqueInput
  }

  export type LinhaCreateNestedOneWithoutRelatorio1Input = {
    create?: XOR<LinhaCreateWithoutRelatorio1Input, LinhaUncheckedCreateWithoutRelatorio1Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio1Input
    connect?: LinhaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRelatorio1NestedInput = {
    create?: XOR<UserCreateWithoutRelatorio1Input, UserUncheckedCreateWithoutRelatorio1Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio1Input
    upsert?: UserUpsertWithoutRelatorio1Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRelatorio1Input, UserUpdateWithoutRelatorio1Input>, UserUncheckedUpdateWithoutRelatorio1Input>
  }

  export type LinhaUpdateOneRequiredWithoutRelatorio1NestedInput = {
    create?: XOR<LinhaCreateWithoutRelatorio1Input, LinhaUncheckedCreateWithoutRelatorio1Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio1Input
    upsert?: LinhaUpsertWithoutRelatorio1Input
    connect?: LinhaWhereUniqueInput
    update?: XOR<XOR<LinhaUpdateToOneWithWhereWithoutRelatorio1Input, LinhaUpdateWithoutRelatorio1Input>, LinhaUncheckedUpdateWithoutRelatorio1Input>
  }

  export type UserCreateNestedOneWithoutRelatorio2Input = {
    create?: XOR<UserCreateWithoutRelatorio2Input, UserUncheckedCreateWithoutRelatorio2Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio2Input
    connect?: UserWhereUniqueInput
  }

  export type LinhaCreateNestedOneWithoutRelatorio2Input = {
    create?: XOR<LinhaCreateWithoutRelatorio2Input, LinhaUncheckedCreateWithoutRelatorio2Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio2Input
    connect?: LinhaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRelatorio2NestedInput = {
    create?: XOR<UserCreateWithoutRelatorio2Input, UserUncheckedCreateWithoutRelatorio2Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio2Input
    upsert?: UserUpsertWithoutRelatorio2Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRelatorio2Input, UserUpdateWithoutRelatorio2Input>, UserUncheckedUpdateWithoutRelatorio2Input>
  }

  export type LinhaUpdateOneRequiredWithoutRelatorio2NestedInput = {
    create?: XOR<LinhaCreateWithoutRelatorio2Input, LinhaUncheckedCreateWithoutRelatorio2Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio2Input
    upsert?: LinhaUpsertWithoutRelatorio2Input
    connect?: LinhaWhereUniqueInput
    update?: XOR<XOR<LinhaUpdateToOneWithWhereWithoutRelatorio2Input, LinhaUpdateWithoutRelatorio2Input>, LinhaUncheckedUpdateWithoutRelatorio2Input>
  }

  export type UserCreateNestedOneWithoutRelatorio3Input = {
    create?: XOR<UserCreateWithoutRelatorio3Input, UserUncheckedCreateWithoutRelatorio3Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio3Input
    connect?: UserWhereUniqueInput
  }

  export type LinhaCreateNestedOneWithoutRelatorio3Input = {
    create?: XOR<LinhaCreateWithoutRelatorio3Input, LinhaUncheckedCreateWithoutRelatorio3Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio3Input
    connect?: LinhaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRelatorio3NestedInput = {
    create?: XOR<UserCreateWithoutRelatorio3Input, UserUncheckedCreateWithoutRelatorio3Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio3Input
    upsert?: UserUpsertWithoutRelatorio3Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRelatorio3Input, UserUpdateWithoutRelatorio3Input>, UserUncheckedUpdateWithoutRelatorio3Input>
  }

  export type LinhaUpdateOneRequiredWithoutRelatorio3NestedInput = {
    create?: XOR<LinhaCreateWithoutRelatorio3Input, LinhaUncheckedCreateWithoutRelatorio3Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio3Input
    upsert?: LinhaUpsertWithoutRelatorio3Input
    connect?: LinhaWhereUniqueInput
    update?: XOR<XOR<LinhaUpdateToOneWithWhereWithoutRelatorio3Input, LinhaUpdateWithoutRelatorio3Input>, LinhaUncheckedUpdateWithoutRelatorio3Input>
  }

  export type UserCreateNestedOneWithoutRelatorio4Input = {
    create?: XOR<UserCreateWithoutRelatorio4Input, UserUncheckedCreateWithoutRelatorio4Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio4Input
    connect?: UserWhereUniqueInput
  }

  export type LinhaCreateNestedOneWithoutRelatorio4Input = {
    create?: XOR<LinhaCreateWithoutRelatorio4Input, LinhaUncheckedCreateWithoutRelatorio4Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio4Input
    connect?: LinhaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRelatorio4NestedInput = {
    create?: XOR<UserCreateWithoutRelatorio4Input, UserUncheckedCreateWithoutRelatorio4Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio4Input
    upsert?: UserUpsertWithoutRelatorio4Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRelatorio4Input, UserUpdateWithoutRelatorio4Input>, UserUncheckedUpdateWithoutRelatorio4Input>
  }

  export type LinhaUpdateOneRequiredWithoutRelatorio4NestedInput = {
    create?: XOR<LinhaCreateWithoutRelatorio4Input, LinhaUncheckedCreateWithoutRelatorio4Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio4Input
    upsert?: LinhaUpsertWithoutRelatorio4Input
    connect?: LinhaWhereUniqueInput
    update?: XOR<XOR<LinhaUpdateToOneWithWhereWithoutRelatorio4Input, LinhaUpdateWithoutRelatorio4Input>, LinhaUncheckedUpdateWithoutRelatorio4Input>
  }

  export type UserCreateNestedOneWithoutRelatorio5Input = {
    create?: XOR<UserCreateWithoutRelatorio5Input, UserUncheckedCreateWithoutRelatorio5Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio5Input
    connect?: UserWhereUniqueInput
  }

  export type LinhaCreateNestedOneWithoutRelatorio5Input = {
    create?: XOR<LinhaCreateWithoutRelatorio5Input, LinhaUncheckedCreateWithoutRelatorio5Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio5Input
    connect?: LinhaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRelatorio5NestedInput = {
    create?: XOR<UserCreateWithoutRelatorio5Input, UserUncheckedCreateWithoutRelatorio5Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelatorio5Input
    upsert?: UserUpsertWithoutRelatorio5Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRelatorio5Input, UserUpdateWithoutRelatorio5Input>, UserUncheckedUpdateWithoutRelatorio5Input>
  }

  export type LinhaUpdateOneRequiredWithoutRelatorio5NestedInput = {
    create?: XOR<LinhaCreateWithoutRelatorio5Input, LinhaUncheckedCreateWithoutRelatorio5Input>
    connectOrCreate?: LinhaCreateOrConnectWithoutRelatorio5Input
    upsert?: LinhaUpsertWithoutRelatorio5Input
    connect?: LinhaWhereUniqueInput
    update?: XOR<XOR<LinhaUpdateToOneWithWhereWithoutRelatorio5Input, LinhaUpdateWithoutRelatorio5Input>, LinhaUncheckedUpdateWithoutRelatorio5Input>
  }

  export type UserCreateNestedOneWithoutProdutoInput = {
    create?: XOR<UserCreateWithoutProdutoInput, UserUncheckedCreateWithoutProdutoInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdutoInput
    connect?: UserWhereUniqueInput
  }

  export type LinhaCreateNestedManyWithoutProdutoInput = {
    create?: XOR<LinhaCreateWithoutProdutoInput, LinhaUncheckedCreateWithoutProdutoInput> | LinhaCreateWithoutProdutoInput[] | LinhaUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: LinhaCreateOrConnectWithoutProdutoInput | LinhaCreateOrConnectWithoutProdutoInput[]
    createMany?: LinhaCreateManyProdutoInputEnvelope
    connect?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
  }

  export type LinhaUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<LinhaCreateWithoutProdutoInput, LinhaUncheckedCreateWithoutProdutoInput> | LinhaCreateWithoutProdutoInput[] | LinhaUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: LinhaCreateOrConnectWithoutProdutoInput | LinhaCreateOrConnectWithoutProdutoInput[]
    createMany?: LinhaCreateManyProdutoInputEnvelope
    connect?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutProdutoNestedInput = {
    create?: XOR<UserCreateWithoutProdutoInput, UserUncheckedCreateWithoutProdutoInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdutoInput
    upsert?: UserUpsertWithoutProdutoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProdutoInput, UserUpdateWithoutProdutoInput>, UserUncheckedUpdateWithoutProdutoInput>
  }

  export type LinhaUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<LinhaCreateWithoutProdutoInput, LinhaUncheckedCreateWithoutProdutoInput> | LinhaCreateWithoutProdutoInput[] | LinhaUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: LinhaCreateOrConnectWithoutProdutoInput | LinhaCreateOrConnectWithoutProdutoInput[]
    upsert?: LinhaUpsertWithWhereUniqueWithoutProdutoInput | LinhaUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: LinhaCreateManyProdutoInputEnvelope
    set?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
    disconnect?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
    delete?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
    connect?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
    update?: LinhaUpdateWithWhereUniqueWithoutProdutoInput | LinhaUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: LinhaUpdateManyWithWhereWithoutProdutoInput | LinhaUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: LinhaScalarWhereInput | LinhaScalarWhereInput[]
  }

  export type LinhaUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<LinhaCreateWithoutProdutoInput, LinhaUncheckedCreateWithoutProdutoInput> | LinhaCreateWithoutProdutoInput[] | LinhaUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: LinhaCreateOrConnectWithoutProdutoInput | LinhaCreateOrConnectWithoutProdutoInput[]
    upsert?: LinhaUpsertWithWhereUniqueWithoutProdutoInput | LinhaUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: LinhaCreateManyProdutoInputEnvelope
    set?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
    disconnect?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
    delete?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
    connect?: LinhaWhereUniqueInput | LinhaWhereUniqueInput[]
    update?: LinhaUpdateWithWhereUniqueWithoutProdutoInput | LinhaUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: LinhaUpdateManyWithWhereWithoutProdutoInput | LinhaUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: LinhaScalarWhereInput | LinhaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFeedInput = {
    create?: XOR<UserCreateWithoutFeedInput, UserUncheckedCreateWithoutFeedInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFeedNestedInput = {
    create?: XOR<UserCreateWithoutFeedInput, UserUncheckedCreateWithoutFeedInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedInput
    upsert?: UserUpsertWithoutFeedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedInput, UserUpdateWithoutFeedInput>, UserUncheckedUpdateWithoutFeedInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRoleCreateWithoutUserInput = {
    responsavel_email?: string
    role: RoleCreateNestedOneWithoutUserRoleInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    id?: number
    id_role: number
    responsavel_email?: string
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutUserInput = {
    permission: PermissionCreateNestedOneWithoutUserPermissionInput
  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    id?: number
    id_permission: number
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DenunciaCreateWithoutUserInput = {
    description: string
    alvo: string
  }

  export type DenunciaUncheckedCreateWithoutUserInput = {
    id?: number
    description: string
    alvo: string
  }

  export type DenunciaCreateOrConnectWithoutUserInput = {
    where: DenunciaWhereUniqueInput
    create: XOR<DenunciaCreateWithoutUserInput, DenunciaUncheckedCreateWithoutUserInput>
  }

  export type DenunciaCreateManyUserInputEnvelope = {
    data: DenunciaCreateManyUserInput | DenunciaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Prod_AgriCreateWithoutUserInput = {
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private?: boolean
    medalha?: boolean
    linha: LinhaCreateNestedOneWithoutRelatorio1Input
  }

  export type Prod_AgriUncheckedCreateWithoutUserInput = {
    id?: number
    id_linha: number
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private?: boolean
    medalha?: boolean
  }

  export type Prod_AgriCreateOrConnectWithoutUserInput = {
    where: Prod_AgriWhereUniqueInput
    create: XOR<Prod_AgriCreateWithoutUserInput, Prod_AgriUncheckedCreateWithoutUserInput>
  }

  export type Prod_AgriCreateManyUserInputEnvelope = {
    data: Prod_AgriCreateManyUserInput | Prod_AgriCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmbalagemCreateWithoutUserInput = {
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private?: boolean
    medalha?: boolean
    linha: LinhaCreateNestedOneWithoutRelatorio2Input
  }

  export type EmbalagemUncheckedCreateWithoutUserInput = {
    id?: number
    id_linha: number
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private?: boolean
    medalha?: boolean
  }

  export type EmbalagemCreateOrConnectWithoutUserInput = {
    where: EmbalagemWhereUniqueInput
    create: XOR<EmbalagemCreateWithoutUserInput, EmbalagemUncheckedCreateWithoutUserInput>
  }

  export type EmbalagemCreateManyUserInputEnvelope = {
    data: EmbalagemCreateManyUserInput | EmbalagemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TransporteCreateWithoutUserInput = {
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private?: boolean
    medalha?: boolean
    linha: LinhaCreateNestedOneWithoutRelatorio3Input
  }

  export type TransporteUncheckedCreateWithoutUserInput = {
    id?: number
    id_linha: number
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private?: boolean
    medalha?: boolean
  }

  export type TransporteCreateOrConnectWithoutUserInput = {
    where: TransporteWhereUniqueInput
    create: XOR<TransporteCreateWithoutUserInput, TransporteUncheckedCreateWithoutUserInput>
  }

  export type TransporteCreateManyUserInputEnvelope = {
    data: TransporteCreateManyUserInput | TransporteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ArmazenamentoCreateWithoutUserInput = {
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private?: boolean
    medalha?: boolean
    linha: LinhaCreateNestedOneWithoutRelatorio4Input
  }

  export type ArmazenamentoUncheckedCreateWithoutUserInput = {
    id?: number
    id_linha: number
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private?: boolean
    medalha?: boolean
  }

  export type ArmazenamentoCreateOrConnectWithoutUserInput = {
    where: ArmazenamentoWhereUniqueInput
    create: XOR<ArmazenamentoCreateWithoutUserInput, ArmazenamentoUncheckedCreateWithoutUserInput>
  }

  export type ArmazenamentoCreateManyUserInputEnvelope = {
    data: ArmazenamentoCreateManyUserInput | ArmazenamentoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VarejoCreateWithoutUserInput = {
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private?: boolean
    medalha?: boolean
    linha: LinhaCreateNestedOneWithoutRelatorio5Input
  }

  export type VarejoUncheckedCreateWithoutUserInput = {
    id?: number
    id_linha: number
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private?: boolean
    medalha?: boolean
  }

  export type VarejoCreateOrConnectWithoutUserInput = {
    where: VarejoWhereUniqueInput
    create: XOR<VarejoCreateWithoutUserInput, VarejoUncheckedCreateWithoutUserInput>
  }

  export type VarejoCreateManyUserInputEnvelope = {
    data: VarejoCreateManyUserInput | VarejoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedCreateWithoutUserInput = {
    description: string
  }

  export type FeedUncheckedCreateWithoutUserInput = {
    id?: number
    description: string
  }

  export type FeedCreateOrConnectWithoutUserInput = {
    where: FeedWhereUniqueInput
    create: XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput>
  }

  export type FeedCreateManyUserInputEnvelope = {
    data: FeedCreateManyUserInput | FeedCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProdutoCreateWithoutUserInput = {
    nome: string
    photo: string
    Linha?: LinhaCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    photo: string
    Linha?: LinhaUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoCreateOrConnectWithoutUserInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutUserInput, ProdutoUncheckedCreateWithoutUserInput>
  }

  export type ProdutoCreateManyUserInputEnvelope = {
    data: ProdutoCreateManyUserInput | ProdutoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    id?: IntFilter<"UserRole"> | number
    id_user?: IntFilter<"UserRole"> | number
    id_role?: IntFilter<"UserRole"> | number
    responsavel_email?: StringFilter<"UserRole"> | string
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    id?: IntFilter<"UserPermission"> | number
    id_user?: IntFilter<"UserPermission"> | number
    id_permission?: IntFilter<"UserPermission"> | number
  }

  export type DenunciaUpsertWithWhereUniqueWithoutUserInput = {
    where: DenunciaWhereUniqueInput
    update: XOR<DenunciaUpdateWithoutUserInput, DenunciaUncheckedUpdateWithoutUserInput>
    create: XOR<DenunciaCreateWithoutUserInput, DenunciaUncheckedCreateWithoutUserInput>
  }

  export type DenunciaUpdateWithWhereUniqueWithoutUserInput = {
    where: DenunciaWhereUniqueInput
    data: XOR<DenunciaUpdateWithoutUserInput, DenunciaUncheckedUpdateWithoutUserInput>
  }

  export type DenunciaUpdateManyWithWhereWithoutUserInput = {
    where: DenunciaScalarWhereInput
    data: XOR<DenunciaUpdateManyMutationInput, DenunciaUncheckedUpdateManyWithoutUserInput>
  }

  export type DenunciaScalarWhereInput = {
    AND?: DenunciaScalarWhereInput | DenunciaScalarWhereInput[]
    OR?: DenunciaScalarWhereInput[]
    NOT?: DenunciaScalarWhereInput | DenunciaScalarWhereInput[]
    id?: IntFilter<"Denuncia"> | number
    id_user?: IntFilter<"Denuncia"> | number
    description?: StringFilter<"Denuncia"> | string
    alvo?: StringFilter<"Denuncia"> | string
  }

  export type Prod_AgriUpsertWithWhereUniqueWithoutUserInput = {
    where: Prod_AgriWhereUniqueInput
    update: XOR<Prod_AgriUpdateWithoutUserInput, Prod_AgriUncheckedUpdateWithoutUserInput>
    create: XOR<Prod_AgriCreateWithoutUserInput, Prod_AgriUncheckedCreateWithoutUserInput>
  }

  export type Prod_AgriUpdateWithWhereUniqueWithoutUserInput = {
    where: Prod_AgriWhereUniqueInput
    data: XOR<Prod_AgriUpdateWithoutUserInput, Prod_AgriUncheckedUpdateWithoutUserInput>
  }

  export type Prod_AgriUpdateManyWithWhereWithoutUserInput = {
    where: Prod_AgriScalarWhereInput
    data: XOR<Prod_AgriUpdateManyMutationInput, Prod_AgriUncheckedUpdateManyWithoutUserInput>
  }

  export type Prod_AgriScalarWhereInput = {
    AND?: Prod_AgriScalarWhereInput | Prod_AgriScalarWhereInput[]
    OR?: Prod_AgriScalarWhereInput[]
    NOT?: Prod_AgriScalarWhereInput | Prod_AgriScalarWhereInput[]
    id?: IntFilter<"Prod_Agri"> | number
    id_user?: IntFilter<"Prod_Agri"> | number
    id_linha?: IntFilter<"Prod_Agri"> | number
    nome?: StringFilter<"Prod_Agri"> | string
    local?: StringFilter<"Prod_Agri"> | string
    dt_plantio?: StringFilter<"Prod_Agri"> | string
    dt_colheita?: StringFilter<"Prod_Agri"> | string
    insumo?: StringFilter<"Prod_Agri"> | string
    praticas?: StringFilter<"Prod_Agri"> | string
    private?: BoolFilter<"Prod_Agri"> | boolean
    medalha?: BoolFilter<"Prod_Agri"> | boolean
  }

  export type EmbalagemUpsertWithWhereUniqueWithoutUserInput = {
    where: EmbalagemWhereUniqueInput
    update: XOR<EmbalagemUpdateWithoutUserInput, EmbalagemUncheckedUpdateWithoutUserInput>
    create: XOR<EmbalagemCreateWithoutUserInput, EmbalagemUncheckedCreateWithoutUserInput>
  }

  export type EmbalagemUpdateWithWhereUniqueWithoutUserInput = {
    where: EmbalagemWhereUniqueInput
    data: XOR<EmbalagemUpdateWithoutUserInput, EmbalagemUncheckedUpdateWithoutUserInput>
  }

  export type EmbalagemUpdateManyWithWhereWithoutUserInput = {
    where: EmbalagemScalarWhereInput
    data: XOR<EmbalagemUpdateManyMutationInput, EmbalagemUncheckedUpdateManyWithoutUserInput>
  }

  export type EmbalagemScalarWhereInput = {
    AND?: EmbalagemScalarWhereInput | EmbalagemScalarWhereInput[]
    OR?: EmbalagemScalarWhereInput[]
    NOT?: EmbalagemScalarWhereInput | EmbalagemScalarWhereInput[]
    id?: IntFilter<"Embalagem"> | number
    id_user?: IntFilter<"Embalagem"> | number
    id_linha?: IntFilter<"Embalagem"> | number
    nome?: StringFilter<"Embalagem"> | string
    local?: StringFilter<"Embalagem"> | string
    ingrediente?: StringFilter<"Embalagem"> | string
    praticas?: StringFilter<"Embalagem"> | string
    dt_processamento?: StringFilter<"Embalagem"> | string
    dt_embalagem?: StringFilter<"Embalagem"> | string
    private?: BoolFilter<"Embalagem"> | boolean
    medalha?: BoolFilter<"Embalagem"> | boolean
  }

  export type TransporteUpsertWithWhereUniqueWithoutUserInput = {
    where: TransporteWhereUniqueInput
    update: XOR<TransporteUpdateWithoutUserInput, TransporteUncheckedUpdateWithoutUserInput>
    create: XOR<TransporteCreateWithoutUserInput, TransporteUncheckedCreateWithoutUserInput>
  }

  export type TransporteUpdateWithWhereUniqueWithoutUserInput = {
    where: TransporteWhereUniqueInput
    data: XOR<TransporteUpdateWithoutUserInput, TransporteUncheckedUpdateWithoutUserInput>
  }

  export type TransporteUpdateManyWithWhereWithoutUserInput = {
    where: TransporteScalarWhereInput
    data: XOR<TransporteUpdateManyMutationInput, TransporteUncheckedUpdateManyWithoutUserInput>
  }

  export type TransporteScalarWhereInput = {
    AND?: TransporteScalarWhereInput | TransporteScalarWhereInput[]
    OR?: TransporteScalarWhereInput[]
    NOT?: TransporteScalarWhereInput | TransporteScalarWhereInput[]
    id?: IntFilter<"Transporte"> | number
    id_user?: IntFilter<"Transporte"> | number
    id_linha?: IntFilter<"Transporte"> | number
    nome?: StringFilter<"Transporte"> | string
    praticas?: StringFilter<"Transporte"> | string
    dt_carregamento?: StringFilter<"Transporte"> | string
    dt_descarregamento?: StringFilter<"Transporte"> | string
    origem?: StringFilter<"Transporte"> | string
    destino?: StringFilter<"Transporte"> | string
    private?: BoolFilter<"Transporte"> | boolean
    medalha?: BoolFilter<"Transporte"> | boolean
  }

  export type ArmazenamentoUpsertWithWhereUniqueWithoutUserInput = {
    where: ArmazenamentoWhereUniqueInput
    update: XOR<ArmazenamentoUpdateWithoutUserInput, ArmazenamentoUncheckedUpdateWithoutUserInput>
    create: XOR<ArmazenamentoCreateWithoutUserInput, ArmazenamentoUncheckedCreateWithoutUserInput>
  }

  export type ArmazenamentoUpdateWithWhereUniqueWithoutUserInput = {
    where: ArmazenamentoWhereUniqueInput
    data: XOR<ArmazenamentoUpdateWithoutUserInput, ArmazenamentoUncheckedUpdateWithoutUserInput>
  }

  export type ArmazenamentoUpdateManyWithWhereWithoutUserInput = {
    where: ArmazenamentoScalarWhereInput
    data: XOR<ArmazenamentoUpdateManyMutationInput, ArmazenamentoUncheckedUpdateManyWithoutUserInput>
  }

  export type ArmazenamentoScalarWhereInput = {
    AND?: ArmazenamentoScalarWhereInput | ArmazenamentoScalarWhereInput[]
    OR?: ArmazenamentoScalarWhereInput[]
    NOT?: ArmazenamentoScalarWhereInput | ArmazenamentoScalarWhereInput[]
    id?: IntFilter<"Armazenamento"> | number
    id_user?: IntFilter<"Armazenamento"> | number
    id_linha?: IntFilter<"Armazenamento"> | number
    nome?: StringFilter<"Armazenamento"> | string
    local?: StringFilter<"Armazenamento"> | string
    praticas?: StringFilter<"Armazenamento"> | string
    responsavel?: StringFilter<"Armazenamento"> | string
    dt_entrada?: StringFilter<"Armazenamento"> | string
    dt_saida?: StringFilter<"Armazenamento"> | string
    private?: BoolFilter<"Armazenamento"> | boolean
    medalha?: BoolFilter<"Armazenamento"> | boolean
  }

  export type VarejoUpsertWithWhereUniqueWithoutUserInput = {
    where: VarejoWhereUniqueInput
    update: XOR<VarejoUpdateWithoutUserInput, VarejoUncheckedUpdateWithoutUserInput>
    create: XOR<VarejoCreateWithoutUserInput, VarejoUncheckedCreateWithoutUserInput>
  }

  export type VarejoUpdateWithWhereUniqueWithoutUserInput = {
    where: VarejoWhereUniqueInput
    data: XOR<VarejoUpdateWithoutUserInput, VarejoUncheckedUpdateWithoutUserInput>
  }

  export type VarejoUpdateManyWithWhereWithoutUserInput = {
    where: VarejoScalarWhereInput
    data: XOR<VarejoUpdateManyMutationInput, VarejoUncheckedUpdateManyWithoutUserInput>
  }

  export type VarejoScalarWhereInput = {
    AND?: VarejoScalarWhereInput | VarejoScalarWhereInput[]
    OR?: VarejoScalarWhereInput[]
    NOT?: VarejoScalarWhereInput | VarejoScalarWhereInput[]
    id?: IntFilter<"Varejo"> | number
    id_user?: IntFilter<"Varejo"> | number
    id_linha?: IntFilter<"Varejo"> | number
    nome?: StringFilter<"Varejo"> | string
    local?: StringFilter<"Varejo"> | string
    dt_chegada?: StringFilter<"Varejo"> | string
    dt_validade?: StringFilter<"Varejo"> | string
    private?: BoolFilter<"Varejo"> | boolean
    medalha?: BoolFilter<"Varejo"> | boolean
  }

  export type FeedUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedWhereUniqueInput
    update: XOR<FeedUpdateWithoutUserInput, FeedUncheckedUpdateWithoutUserInput>
    create: XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput>
  }

  export type FeedUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedWhereUniqueInput
    data: XOR<FeedUpdateWithoutUserInput, FeedUncheckedUpdateWithoutUserInput>
  }

  export type FeedUpdateManyWithWhereWithoutUserInput = {
    where: FeedScalarWhereInput
    data: XOR<FeedUpdateManyMutationInput, FeedUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedScalarWhereInput = {
    AND?: FeedScalarWhereInput | FeedScalarWhereInput[]
    OR?: FeedScalarWhereInput[]
    NOT?: FeedScalarWhereInput | FeedScalarWhereInput[]
    id?: IntFilter<"Feed"> | number
    id_user?: IntFilter<"Feed"> | number
    description?: StringFilter<"Feed"> | string
  }

  export type ProdutoUpsertWithWhereUniqueWithoutUserInput = {
    where: ProdutoWhereUniqueInput
    update: XOR<ProdutoUpdateWithoutUserInput, ProdutoUncheckedUpdateWithoutUserInput>
    create: XOR<ProdutoCreateWithoutUserInput, ProdutoUncheckedCreateWithoutUserInput>
  }

  export type ProdutoUpdateWithWhereUniqueWithoutUserInput = {
    where: ProdutoWhereUniqueInput
    data: XOR<ProdutoUpdateWithoutUserInput, ProdutoUncheckedUpdateWithoutUserInput>
  }

  export type ProdutoUpdateManyWithWhereWithoutUserInput = {
    where: ProdutoScalarWhereInput
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyWithoutUserInput>
  }

  export type ProdutoScalarWhereInput = {
    AND?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
    OR?: ProdutoScalarWhereInput[]
    NOT?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
    id?: IntFilter<"Produto"> | number
    id_user?: IntFilter<"Produto"> | number
    nome?: StringFilter<"Produto"> | string
    photo?: StringFilter<"Produto"> | string
  }

  export type UserRoleCreateWithoutRoleInput = {
    responsavel_email?: string
    user: UserCreateNestedOneWithoutUserRoleInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    id?: number
    id_user: number
    responsavel_email?: string
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionCreateWithoutRoleInput = {
    permission: PermissionCreateNestedOneWithoutRolePermissionInput
  }

  export type RolePermissionUncheckedCreateWithoutRoleInput = {
    id?: number
    id_permission: number
  }

  export type RolePermissionCreateOrConnectWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionCreateManyRoleInputEnvelope = {
    data: RolePermissionCreateManyRoleInput | RolePermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    id?: IntFilter<"RolePermission"> | number
    id_permission?: IntFilter<"RolePermission"> | number
    id_role?: IntFilter<"RolePermission"> | number
  }

  export type UserCreateWithoutUserRoleInput = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRoleInput = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
  }

  export type RoleCreateWithoutUserRoleInput = {
    name: string
    description: string
    RolePermission?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutUserRoleInput = {
    id?: number
    name: string
    description: string
    RolePermission?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUserRoleInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserRoleInput, RoleUncheckedCreateWithoutUserRoleInput>
  }

  export type UserUpsertWithoutUserRoleInput = {
    update: XOR<UserUpdateWithoutUserRoleInput, UserUncheckedUpdateWithoutUserRoleInput>
    create: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRoleInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRoleInput, UserUncheckedUpdateWithoutUserRoleInput>
  }

  export type UserUpdateWithoutUserRoleInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoleUpsertWithoutUserRoleInput = {
    update: XOR<RoleUpdateWithoutUserRoleInput, RoleUncheckedUpdateWithoutUserRoleInput>
    create: XOR<RoleCreateWithoutUserRoleInput, RoleUncheckedCreateWithoutUserRoleInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUserRoleInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUserRoleInput, RoleUncheckedUpdateWithoutUserRoleInput>
  }

  export type RoleUpdateWithoutUserRoleInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    RolePermission?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutUserRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    RolePermission?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    role: RoleCreateNestedOneWithoutRolePermissionInput
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    id?: number
    id_role: number
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutPermissionInput = {
    user: UserCreateNestedOneWithoutUserPermissionInput
  }

  export type UserPermissionUncheckedCreateWithoutPermissionInput = {
    id?: number
    id_user: number
  }

  export type UserPermissionCreateOrConnectWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionCreateManyPermissionInputEnvelope = {
    data: UserPermissionCreateManyPermissionInput | UserPermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type PermissionCreateWithoutRolePermissionInput = {
    name: string
    description: string
    created_at?: Date | string
    UserPermission?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutRolePermissionInput = {
    id?: number
    name: string
    description: string
    created_at?: Date | string
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutRolePermissionInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolePermissionInput, PermissionUncheckedCreateWithoutRolePermissionInput>
  }

  export type RoleCreateWithoutRolePermissionInput = {
    name: string
    description: string
    UserRole?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutRolePermissionInput = {
    id?: number
    name: string
    description: string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutRolePermissionInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutRolePermissionInput, RoleUncheckedCreateWithoutRolePermissionInput>
  }

  export type PermissionUpsertWithoutRolePermissionInput = {
    update: XOR<PermissionUpdateWithoutRolePermissionInput, PermissionUncheckedUpdateWithoutRolePermissionInput>
    create: XOR<PermissionCreateWithoutRolePermissionInput, PermissionUncheckedCreateWithoutRolePermissionInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolePermissionInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolePermissionInput, PermissionUncheckedUpdateWithoutRolePermissionInput>
  }

  export type PermissionUpdateWithoutRolePermissionInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserPermission?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutRolePermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type RoleUpsertWithoutRolePermissionInput = {
    update: XOR<RoleUpdateWithoutRolePermissionInput, RoleUncheckedUpdateWithoutRolePermissionInput>
    create: XOR<RoleCreateWithoutRolePermissionInput, RoleUncheckedCreateWithoutRolePermissionInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutRolePermissionInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutRolePermissionInput, RoleUncheckedUpdateWithoutRolePermissionInput>
  }

  export type RoleUpdateWithoutRolePermissionInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UserRole?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutRolePermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type UserCreateWithoutUserPermissionInput = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserPermissionInput = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserPermissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserPermissionInput, UserUncheckedCreateWithoutUserPermissionInput>
  }

  export type PermissionCreateWithoutUserPermissionInput = {
    name: string
    description: string
    created_at?: Date | string
    RolePermission?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutUserPermissionInput = {
    id?: number
    name: string
    description: string
    created_at?: Date | string
    RolePermission?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutUserPermissionInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUserPermissionInput, PermissionUncheckedCreateWithoutUserPermissionInput>
  }

  export type UserUpsertWithoutUserPermissionInput = {
    update: XOR<UserUpdateWithoutUserPermissionInput, UserUncheckedUpdateWithoutUserPermissionInput>
    create: XOR<UserCreateWithoutUserPermissionInput, UserUncheckedCreateWithoutUserPermissionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserPermissionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserPermissionInput, UserUncheckedUpdateWithoutUserPermissionInput>
  }

  export type UserUpdateWithoutUserPermissionInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PermissionUpsertWithoutUserPermissionInput = {
    update: XOR<PermissionUpdateWithoutUserPermissionInput, PermissionUncheckedUpdateWithoutUserPermissionInput>
    create: XOR<PermissionCreateWithoutUserPermissionInput, PermissionUncheckedCreateWithoutUserPermissionInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutUserPermissionInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutUserPermissionInput, PermissionUncheckedUpdateWithoutUserPermissionInput>
  }

  export type PermissionUpdateWithoutUserPermissionInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RolePermission?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutUserPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RolePermission?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type UserCreateWithoutDenunciaInput = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDenunciaInput = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDenunciaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDenunciaInput, UserUncheckedCreateWithoutDenunciaInput>
  }

  export type UserUpsertWithoutDenunciaInput = {
    update: XOR<UserUpdateWithoutDenunciaInput, UserUncheckedUpdateWithoutDenunciaInput>
    create: XOR<UserCreateWithoutDenunciaInput, UserUncheckedCreateWithoutDenunciaInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDenunciaInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDenunciaInput, UserUncheckedUpdateWithoutDenunciaInput>
  }

  export type UserUpdateWithoutDenunciaInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDenunciaInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type Prod_AgriCreateWithoutLinhaInput = {
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio1Input
  }

  export type Prod_AgriUncheckedCreateWithoutLinhaInput = {
    id?: number
    id_user: number
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private?: boolean
    medalha?: boolean
  }

  export type Prod_AgriCreateOrConnectWithoutLinhaInput = {
    where: Prod_AgriWhereUniqueInput
    create: XOR<Prod_AgriCreateWithoutLinhaInput, Prod_AgriUncheckedCreateWithoutLinhaInput>
  }

  export type Prod_AgriCreateManyLinhaInputEnvelope = {
    data: Prod_AgriCreateManyLinhaInput | Prod_AgriCreateManyLinhaInput[]
    skipDuplicates?: boolean
  }

  export type EmbalagemCreateWithoutLinhaInput = {
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio2Input
  }

  export type EmbalagemUncheckedCreateWithoutLinhaInput = {
    id?: number
    id_user: number
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private?: boolean
    medalha?: boolean
  }

  export type EmbalagemCreateOrConnectWithoutLinhaInput = {
    where: EmbalagemWhereUniqueInput
    create: XOR<EmbalagemCreateWithoutLinhaInput, EmbalagemUncheckedCreateWithoutLinhaInput>
  }

  export type EmbalagemCreateManyLinhaInputEnvelope = {
    data: EmbalagemCreateManyLinhaInput | EmbalagemCreateManyLinhaInput[]
    skipDuplicates?: boolean
  }

  export type TransporteCreateWithoutLinhaInput = {
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio3Input
  }

  export type TransporteUncheckedCreateWithoutLinhaInput = {
    id?: number
    id_user: number
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private?: boolean
    medalha?: boolean
  }

  export type TransporteCreateOrConnectWithoutLinhaInput = {
    where: TransporteWhereUniqueInput
    create: XOR<TransporteCreateWithoutLinhaInput, TransporteUncheckedCreateWithoutLinhaInput>
  }

  export type TransporteCreateManyLinhaInputEnvelope = {
    data: TransporteCreateManyLinhaInput | TransporteCreateManyLinhaInput[]
    skipDuplicates?: boolean
  }

  export type ArmazenamentoCreateWithoutLinhaInput = {
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio4Input
  }

  export type ArmazenamentoUncheckedCreateWithoutLinhaInput = {
    id?: number
    id_user: number
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private?: boolean
    medalha?: boolean
  }

  export type ArmazenamentoCreateOrConnectWithoutLinhaInput = {
    where: ArmazenamentoWhereUniqueInput
    create: XOR<ArmazenamentoCreateWithoutLinhaInput, ArmazenamentoUncheckedCreateWithoutLinhaInput>
  }

  export type ArmazenamentoCreateManyLinhaInputEnvelope = {
    data: ArmazenamentoCreateManyLinhaInput | ArmazenamentoCreateManyLinhaInput[]
    skipDuplicates?: boolean
  }

  export type VarejoCreateWithoutLinhaInput = {
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private?: boolean
    medalha?: boolean
    user: UserCreateNestedOneWithoutRelatorio5Input
  }

  export type VarejoUncheckedCreateWithoutLinhaInput = {
    id?: number
    id_user: number
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private?: boolean
    medalha?: boolean
  }

  export type VarejoCreateOrConnectWithoutLinhaInput = {
    where: VarejoWhereUniqueInput
    create: XOR<VarejoCreateWithoutLinhaInput, VarejoUncheckedCreateWithoutLinhaInput>
  }

  export type VarejoCreateManyLinhaInputEnvelope = {
    data: VarejoCreateManyLinhaInput | VarejoCreateManyLinhaInput[]
    skipDuplicates?: boolean
  }

  export type ProdutoCreateWithoutLinhaInput = {
    nome: string
    photo: string
    user: UserCreateNestedOneWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateWithoutLinhaInput = {
    id?: number
    id_user: number
    nome: string
    photo: string
  }

  export type ProdutoCreateOrConnectWithoutLinhaInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutLinhaInput, ProdutoUncheckedCreateWithoutLinhaInput>
  }

  export type Prod_AgriUpsertWithWhereUniqueWithoutLinhaInput = {
    where: Prod_AgriWhereUniqueInput
    update: XOR<Prod_AgriUpdateWithoutLinhaInput, Prod_AgriUncheckedUpdateWithoutLinhaInput>
    create: XOR<Prod_AgriCreateWithoutLinhaInput, Prod_AgriUncheckedCreateWithoutLinhaInput>
  }

  export type Prod_AgriUpdateWithWhereUniqueWithoutLinhaInput = {
    where: Prod_AgriWhereUniqueInput
    data: XOR<Prod_AgriUpdateWithoutLinhaInput, Prod_AgriUncheckedUpdateWithoutLinhaInput>
  }

  export type Prod_AgriUpdateManyWithWhereWithoutLinhaInput = {
    where: Prod_AgriScalarWhereInput
    data: XOR<Prod_AgriUpdateManyMutationInput, Prod_AgriUncheckedUpdateManyWithoutLinhaInput>
  }

  export type EmbalagemUpsertWithWhereUniqueWithoutLinhaInput = {
    where: EmbalagemWhereUniqueInput
    update: XOR<EmbalagemUpdateWithoutLinhaInput, EmbalagemUncheckedUpdateWithoutLinhaInput>
    create: XOR<EmbalagemCreateWithoutLinhaInput, EmbalagemUncheckedCreateWithoutLinhaInput>
  }

  export type EmbalagemUpdateWithWhereUniqueWithoutLinhaInput = {
    where: EmbalagemWhereUniqueInput
    data: XOR<EmbalagemUpdateWithoutLinhaInput, EmbalagemUncheckedUpdateWithoutLinhaInput>
  }

  export type EmbalagemUpdateManyWithWhereWithoutLinhaInput = {
    where: EmbalagemScalarWhereInput
    data: XOR<EmbalagemUpdateManyMutationInput, EmbalagemUncheckedUpdateManyWithoutLinhaInput>
  }

  export type TransporteUpsertWithWhereUniqueWithoutLinhaInput = {
    where: TransporteWhereUniqueInput
    update: XOR<TransporteUpdateWithoutLinhaInput, TransporteUncheckedUpdateWithoutLinhaInput>
    create: XOR<TransporteCreateWithoutLinhaInput, TransporteUncheckedCreateWithoutLinhaInput>
  }

  export type TransporteUpdateWithWhereUniqueWithoutLinhaInput = {
    where: TransporteWhereUniqueInput
    data: XOR<TransporteUpdateWithoutLinhaInput, TransporteUncheckedUpdateWithoutLinhaInput>
  }

  export type TransporteUpdateManyWithWhereWithoutLinhaInput = {
    where: TransporteScalarWhereInput
    data: XOR<TransporteUpdateManyMutationInput, TransporteUncheckedUpdateManyWithoutLinhaInput>
  }

  export type ArmazenamentoUpsertWithWhereUniqueWithoutLinhaInput = {
    where: ArmazenamentoWhereUniqueInput
    update: XOR<ArmazenamentoUpdateWithoutLinhaInput, ArmazenamentoUncheckedUpdateWithoutLinhaInput>
    create: XOR<ArmazenamentoCreateWithoutLinhaInput, ArmazenamentoUncheckedCreateWithoutLinhaInput>
  }

  export type ArmazenamentoUpdateWithWhereUniqueWithoutLinhaInput = {
    where: ArmazenamentoWhereUniqueInput
    data: XOR<ArmazenamentoUpdateWithoutLinhaInput, ArmazenamentoUncheckedUpdateWithoutLinhaInput>
  }

  export type ArmazenamentoUpdateManyWithWhereWithoutLinhaInput = {
    where: ArmazenamentoScalarWhereInput
    data: XOR<ArmazenamentoUpdateManyMutationInput, ArmazenamentoUncheckedUpdateManyWithoutLinhaInput>
  }

  export type VarejoUpsertWithWhereUniqueWithoutLinhaInput = {
    where: VarejoWhereUniqueInput
    update: XOR<VarejoUpdateWithoutLinhaInput, VarejoUncheckedUpdateWithoutLinhaInput>
    create: XOR<VarejoCreateWithoutLinhaInput, VarejoUncheckedCreateWithoutLinhaInput>
  }

  export type VarejoUpdateWithWhereUniqueWithoutLinhaInput = {
    where: VarejoWhereUniqueInput
    data: XOR<VarejoUpdateWithoutLinhaInput, VarejoUncheckedUpdateWithoutLinhaInput>
  }

  export type VarejoUpdateManyWithWhereWithoutLinhaInput = {
    where: VarejoScalarWhereInput
    data: XOR<VarejoUpdateManyMutationInput, VarejoUncheckedUpdateManyWithoutLinhaInput>
  }

  export type ProdutoUpsertWithoutLinhaInput = {
    update: XOR<ProdutoUpdateWithoutLinhaInput, ProdutoUncheckedUpdateWithoutLinhaInput>
    create: XOR<ProdutoCreateWithoutLinhaInput, ProdutoUncheckedCreateWithoutLinhaInput>
    where?: ProdutoWhereInput
  }

  export type ProdutoUpdateToOneWithWhereWithoutLinhaInput = {
    where?: ProdutoWhereInput
    data: XOR<ProdutoUpdateWithoutLinhaInput, ProdutoUncheckedUpdateWithoutLinhaInput>
  }

  export type ProdutoUpdateWithoutLinhaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutRelatorio1Input = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRelatorio1Input = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRelatorio1Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRelatorio1Input, UserUncheckedCreateWithoutRelatorio1Input>
  }

  export type LinhaCreateWithoutRelatorio1Input = {
    date: string
    qrcode?: string | null
    Relatorio2?: EmbalagemCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoCreateNestedManyWithoutLinhaInput
    produto: ProdutoCreateNestedOneWithoutLinhaInput
  }

  export type LinhaUncheckedCreateWithoutRelatorio1Input = {
    id?: number
    date: string
    qrcode?: string | null
    id_produto: number
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutLinhaInput
  }

  export type LinhaCreateOrConnectWithoutRelatorio1Input = {
    where: LinhaWhereUniqueInput
    create: XOR<LinhaCreateWithoutRelatorio1Input, LinhaUncheckedCreateWithoutRelatorio1Input>
  }

  export type UserUpsertWithoutRelatorio1Input = {
    update: XOR<UserUpdateWithoutRelatorio1Input, UserUncheckedUpdateWithoutRelatorio1Input>
    create: XOR<UserCreateWithoutRelatorio1Input, UserUncheckedCreateWithoutRelatorio1Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRelatorio1Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRelatorio1Input, UserUncheckedUpdateWithoutRelatorio1Input>
  }

  export type UserUpdateWithoutRelatorio1Input = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRelatorio1Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LinhaUpsertWithoutRelatorio1Input = {
    update: XOR<LinhaUpdateWithoutRelatorio1Input, LinhaUncheckedUpdateWithoutRelatorio1Input>
    create: XOR<LinhaCreateWithoutRelatorio1Input, LinhaUncheckedCreateWithoutRelatorio1Input>
    where?: LinhaWhereInput
  }

  export type LinhaUpdateToOneWithWhereWithoutRelatorio1Input = {
    where?: LinhaWhereInput
    data: XOR<LinhaUpdateWithoutRelatorio1Input, LinhaUncheckedUpdateWithoutRelatorio1Input>
  }

  export type LinhaUpdateWithoutRelatorio1Input = {
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    Relatorio2?: EmbalagemUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUpdateManyWithoutLinhaNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutLinhaNestedInput
  }

  export type LinhaUncheckedUpdateWithoutRelatorio1Input = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    id_produto?: IntFieldUpdateOperationsInput | number
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutLinhaNestedInput
  }

  export type UserCreateWithoutRelatorio2Input = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRelatorio2Input = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRelatorio2Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRelatorio2Input, UserUncheckedCreateWithoutRelatorio2Input>
  }

  export type LinhaCreateWithoutRelatorio2Input = {
    date: string
    qrcode?: string | null
    Relatorio1?: Prod_AgriCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoCreateNestedManyWithoutLinhaInput
    produto: ProdutoCreateNestedOneWithoutLinhaInput
  }

  export type LinhaUncheckedCreateWithoutRelatorio2Input = {
    id?: number
    date: string
    qrcode?: string | null
    id_produto: number
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutLinhaInput
  }

  export type LinhaCreateOrConnectWithoutRelatorio2Input = {
    where: LinhaWhereUniqueInput
    create: XOR<LinhaCreateWithoutRelatorio2Input, LinhaUncheckedCreateWithoutRelatorio2Input>
  }

  export type UserUpsertWithoutRelatorio2Input = {
    update: XOR<UserUpdateWithoutRelatorio2Input, UserUncheckedUpdateWithoutRelatorio2Input>
    create: XOR<UserCreateWithoutRelatorio2Input, UserUncheckedCreateWithoutRelatorio2Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRelatorio2Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRelatorio2Input, UserUncheckedUpdateWithoutRelatorio2Input>
  }

  export type UserUpdateWithoutRelatorio2Input = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRelatorio2Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LinhaUpsertWithoutRelatorio2Input = {
    update: XOR<LinhaUpdateWithoutRelatorio2Input, LinhaUncheckedUpdateWithoutRelatorio2Input>
    create: XOR<LinhaCreateWithoutRelatorio2Input, LinhaUncheckedCreateWithoutRelatorio2Input>
    where?: LinhaWhereInput
  }

  export type LinhaUpdateToOneWithWhereWithoutRelatorio2Input = {
    where?: LinhaWhereInput
    data: XOR<LinhaUpdateWithoutRelatorio2Input, LinhaUncheckedUpdateWithoutRelatorio2Input>
  }

  export type LinhaUpdateWithoutRelatorio2Input = {
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    Relatorio1?: Prod_AgriUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUpdateManyWithoutLinhaNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutLinhaNestedInput
  }

  export type LinhaUncheckedUpdateWithoutRelatorio2Input = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    id_produto?: IntFieldUpdateOperationsInput | number
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutLinhaNestedInput
  }

  export type UserCreateWithoutRelatorio3Input = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRelatorio3Input = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRelatorio3Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRelatorio3Input, UserUncheckedCreateWithoutRelatorio3Input>
  }

  export type LinhaCreateWithoutRelatorio3Input = {
    date: string
    qrcode?: string | null
    Relatorio1?: Prod_AgriCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoCreateNestedManyWithoutLinhaInput
    produto: ProdutoCreateNestedOneWithoutLinhaInput
  }

  export type LinhaUncheckedCreateWithoutRelatorio3Input = {
    id?: number
    date: string
    qrcode?: string | null
    id_produto: number
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutLinhaInput
  }

  export type LinhaCreateOrConnectWithoutRelatorio3Input = {
    where: LinhaWhereUniqueInput
    create: XOR<LinhaCreateWithoutRelatorio3Input, LinhaUncheckedCreateWithoutRelatorio3Input>
  }

  export type UserUpsertWithoutRelatorio3Input = {
    update: XOR<UserUpdateWithoutRelatorio3Input, UserUncheckedUpdateWithoutRelatorio3Input>
    create: XOR<UserCreateWithoutRelatorio3Input, UserUncheckedCreateWithoutRelatorio3Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRelatorio3Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRelatorio3Input, UserUncheckedUpdateWithoutRelatorio3Input>
  }

  export type UserUpdateWithoutRelatorio3Input = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRelatorio3Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LinhaUpsertWithoutRelatorio3Input = {
    update: XOR<LinhaUpdateWithoutRelatorio3Input, LinhaUncheckedUpdateWithoutRelatorio3Input>
    create: XOR<LinhaCreateWithoutRelatorio3Input, LinhaUncheckedCreateWithoutRelatorio3Input>
    where?: LinhaWhereInput
  }

  export type LinhaUpdateToOneWithWhereWithoutRelatorio3Input = {
    where?: LinhaWhereInput
    data: XOR<LinhaUpdateWithoutRelatorio3Input, LinhaUncheckedUpdateWithoutRelatorio3Input>
  }

  export type LinhaUpdateWithoutRelatorio3Input = {
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    Relatorio1?: Prod_AgriUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUpdateManyWithoutLinhaNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutLinhaNestedInput
  }

  export type LinhaUncheckedUpdateWithoutRelatorio3Input = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    id_produto?: IntFieldUpdateOperationsInput | number
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutLinhaNestedInput
  }

  export type UserCreateWithoutRelatorio4Input = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRelatorio4Input = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRelatorio4Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRelatorio4Input, UserUncheckedCreateWithoutRelatorio4Input>
  }

  export type LinhaCreateWithoutRelatorio4Input = {
    date: string
    qrcode?: string | null
    Relatorio1?: Prod_AgriCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoCreateNestedManyWithoutLinhaInput
    produto: ProdutoCreateNestedOneWithoutLinhaInput
  }

  export type LinhaUncheckedCreateWithoutRelatorio4Input = {
    id?: number
    date: string
    qrcode?: string | null
    id_produto: number
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutLinhaInput
  }

  export type LinhaCreateOrConnectWithoutRelatorio4Input = {
    where: LinhaWhereUniqueInput
    create: XOR<LinhaCreateWithoutRelatorio4Input, LinhaUncheckedCreateWithoutRelatorio4Input>
  }

  export type UserUpsertWithoutRelatorio4Input = {
    update: XOR<UserUpdateWithoutRelatorio4Input, UserUncheckedUpdateWithoutRelatorio4Input>
    create: XOR<UserCreateWithoutRelatorio4Input, UserUncheckedCreateWithoutRelatorio4Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRelatorio4Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRelatorio4Input, UserUncheckedUpdateWithoutRelatorio4Input>
  }

  export type UserUpdateWithoutRelatorio4Input = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRelatorio4Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LinhaUpsertWithoutRelatorio4Input = {
    update: XOR<LinhaUpdateWithoutRelatorio4Input, LinhaUncheckedUpdateWithoutRelatorio4Input>
    create: XOR<LinhaCreateWithoutRelatorio4Input, LinhaUncheckedCreateWithoutRelatorio4Input>
    where?: LinhaWhereInput
  }

  export type LinhaUpdateToOneWithWhereWithoutRelatorio4Input = {
    where?: LinhaWhereInput
    data: XOR<LinhaUpdateWithoutRelatorio4Input, LinhaUncheckedUpdateWithoutRelatorio4Input>
  }

  export type LinhaUpdateWithoutRelatorio4Input = {
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    Relatorio1?: Prod_AgriUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUpdateManyWithoutLinhaNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutLinhaNestedInput
  }

  export type LinhaUncheckedUpdateWithoutRelatorio4Input = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    id_produto?: IntFieldUpdateOperationsInput | number
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutLinhaNestedInput
  }

  export type UserCreateWithoutRelatorio5Input = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRelatorio5Input = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRelatorio5Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRelatorio5Input, UserUncheckedCreateWithoutRelatorio5Input>
  }

  export type LinhaCreateWithoutRelatorio5Input = {
    date: string
    qrcode?: string | null
    Relatorio1?: Prod_AgriCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutLinhaInput
    produto: ProdutoCreateNestedOneWithoutLinhaInput
  }

  export type LinhaUncheckedCreateWithoutRelatorio5Input = {
    id?: number
    date: string
    qrcode?: string | null
    id_produto: number
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutLinhaInput
  }

  export type LinhaCreateOrConnectWithoutRelatorio5Input = {
    where: LinhaWhereUniqueInput
    create: XOR<LinhaCreateWithoutRelatorio5Input, LinhaUncheckedCreateWithoutRelatorio5Input>
  }

  export type UserUpsertWithoutRelatorio5Input = {
    update: XOR<UserUpdateWithoutRelatorio5Input, UserUncheckedUpdateWithoutRelatorio5Input>
    create: XOR<UserCreateWithoutRelatorio5Input, UserUncheckedCreateWithoutRelatorio5Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRelatorio5Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRelatorio5Input, UserUncheckedUpdateWithoutRelatorio5Input>
  }

  export type UserUpdateWithoutRelatorio5Input = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRelatorio5Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LinhaUpsertWithoutRelatorio5Input = {
    update: XOR<LinhaUpdateWithoutRelatorio5Input, LinhaUncheckedUpdateWithoutRelatorio5Input>
    create: XOR<LinhaCreateWithoutRelatorio5Input, LinhaUncheckedCreateWithoutRelatorio5Input>
    where?: LinhaWhereInput
  }

  export type LinhaUpdateToOneWithWhereWithoutRelatorio5Input = {
    where?: LinhaWhereInput
    data: XOR<LinhaUpdateWithoutRelatorio5Input, LinhaUncheckedUpdateWithoutRelatorio5Input>
  }

  export type LinhaUpdateWithoutRelatorio5Input = {
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    Relatorio1?: Prod_AgriUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutLinhaNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutLinhaNestedInput
  }

  export type LinhaUncheckedUpdateWithoutRelatorio5Input = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    id_produto?: IntFieldUpdateOperationsInput | number
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutLinhaNestedInput
  }

  export type UserCreateWithoutProdutoInput = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Feed?: FeedCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProdutoInput = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Feed?: FeedUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProdutoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProdutoInput, UserUncheckedCreateWithoutProdutoInput>
  }

  export type LinhaCreateWithoutProdutoInput = {
    date: string
    qrcode?: string | null
    Relatorio1?: Prod_AgriCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoCreateNestedManyWithoutLinhaInput
  }

  export type LinhaUncheckedCreateWithoutProdutoInput = {
    id?: number
    date: string
    qrcode?: string | null
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutLinhaInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutLinhaInput
  }

  export type LinhaCreateOrConnectWithoutProdutoInput = {
    where: LinhaWhereUniqueInput
    create: XOR<LinhaCreateWithoutProdutoInput, LinhaUncheckedCreateWithoutProdutoInput>
  }

  export type LinhaCreateManyProdutoInputEnvelope = {
    data: LinhaCreateManyProdutoInput | LinhaCreateManyProdutoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProdutoInput = {
    update: XOR<UserUpdateWithoutProdutoInput, UserUncheckedUpdateWithoutProdutoInput>
    create: XOR<UserCreateWithoutProdutoInput, UserUncheckedCreateWithoutProdutoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProdutoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProdutoInput, UserUncheckedUpdateWithoutProdutoInput>
  }

  export type UserUpdateWithoutProdutoInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Feed?: FeedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Feed?: FeedUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LinhaUpsertWithWhereUniqueWithoutProdutoInput = {
    where: LinhaWhereUniqueInput
    update: XOR<LinhaUpdateWithoutProdutoInput, LinhaUncheckedUpdateWithoutProdutoInput>
    create: XOR<LinhaCreateWithoutProdutoInput, LinhaUncheckedCreateWithoutProdutoInput>
  }

  export type LinhaUpdateWithWhereUniqueWithoutProdutoInput = {
    where: LinhaWhereUniqueInput
    data: XOR<LinhaUpdateWithoutProdutoInput, LinhaUncheckedUpdateWithoutProdutoInput>
  }

  export type LinhaUpdateManyWithWhereWithoutProdutoInput = {
    where: LinhaScalarWhereInput
    data: XOR<LinhaUpdateManyMutationInput, LinhaUncheckedUpdateManyWithoutProdutoInput>
  }

  export type LinhaScalarWhereInput = {
    AND?: LinhaScalarWhereInput | LinhaScalarWhereInput[]
    OR?: LinhaScalarWhereInput[]
    NOT?: LinhaScalarWhereInput | LinhaScalarWhereInput[]
    id?: IntFilter<"Linha"> | number
    date?: StringFilter<"Linha"> | string
    qrcode?: StringNullableFilter<"Linha"> | string | null
    id_produto?: IntFilter<"Linha"> | number
  }

  export type UserCreateWithoutFeedInput = {
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoCreateNestedManyWithoutUserInput
    Produto?: ProdutoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedInput = {
    id?: number
    name?: string | null
    password: string
    email: string
    cnpj?: string | null
    photo?: string | null
    local?: string | null
    telefone?: string | null
    gerente?: boolean
    fiscal?: boolean
    ban?: boolean
    created_at?: Date | string
    UserRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Denuncia?: DenunciaUncheckedCreateNestedManyWithoutUserInput
    Relatorio1?: Prod_AgriUncheckedCreateNestedManyWithoutUserInput
    Relatorio2?: EmbalagemUncheckedCreateNestedManyWithoutUserInput
    Relatorio3?: TransporteUncheckedCreateNestedManyWithoutUserInput
    Relatorio4?: ArmazenamentoUncheckedCreateNestedManyWithoutUserInput
    Relatorio5?: VarejoUncheckedCreateNestedManyWithoutUserInput
    Produto?: ProdutoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedInput, UserUncheckedCreateWithoutFeedInput>
  }

  export type UserUpsertWithoutFeedInput = {
    update: XOR<UserUpdateWithoutFeedInput, UserUncheckedUpdateWithoutFeedInput>
    create: XOR<UserCreateWithoutFeedInput, UserUncheckedCreateWithoutFeedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedInput, UserUncheckedUpdateWithoutFeedInput>
  }

  export type UserUpdateWithoutFeedInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    local?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    gerente?: BoolFieldUpdateOperationsInput | boolean
    fiscal?: BoolFieldUpdateOperationsInput | boolean
    ban?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Denuncia?: DenunciaUncheckedUpdateManyWithoutUserNestedInput
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutUserNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutUserNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutUserNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutUserNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutUserNestedInput
    Produto?: ProdutoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserRoleCreateManyUserInput = {
    id?: number
    id_role: number
    responsavel_email?: string
  }

  export type UserPermissionCreateManyUserInput = {
    id?: number
    id_permission: number
  }

  export type DenunciaCreateManyUserInput = {
    id?: number
    description: string
    alvo: string
  }

  export type Prod_AgriCreateManyUserInput = {
    id?: number
    id_linha: number
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private?: boolean
    medalha?: boolean
  }

  export type EmbalagemCreateManyUserInput = {
    id?: number
    id_linha: number
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private?: boolean
    medalha?: boolean
  }

  export type TransporteCreateManyUserInput = {
    id?: number
    id_linha: number
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private?: boolean
    medalha?: boolean
  }

  export type ArmazenamentoCreateManyUserInput = {
    id?: number
    id_linha: number
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private?: boolean
    medalha?: boolean
  }

  export type VarejoCreateManyUserInput = {
    id?: number
    id_linha: number
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private?: boolean
    medalha?: boolean
  }

  export type FeedCreateManyUserInput = {
    id?: number
    description: string
  }

  export type ProdutoCreateManyUserInput = {
    id?: number
    nome: string
    photo: string
  }

  export type UserRoleUpdateWithoutUserInput = {
    responsavel_email?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUserRoleNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    responsavel_email?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    responsavel_email?: StringFieldUpdateOperationsInput | string
  }

  export type UserPermissionUpdateWithoutUserInput = {
    permission?: PermissionUpdateOneRequiredWithoutUserPermissionNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
  }

  export type DenunciaUpdateWithoutUserInput = {
    description?: StringFieldUpdateOperationsInput | string
    alvo?: StringFieldUpdateOperationsInput | string
  }

  export type DenunciaUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    alvo?: StringFieldUpdateOperationsInput | string
  }

  export type DenunciaUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    alvo?: StringFieldUpdateOperationsInput | string
  }

  export type Prod_AgriUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    linha?: LinhaUpdateOneRequiredWithoutRelatorio1NestedInput
  }

  export type Prod_AgriUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Prod_AgriUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmbalagemUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    linha?: LinhaUpdateOneRequiredWithoutRelatorio2NestedInput
  }

  export type EmbalagemUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmbalagemUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TransporteUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    linha?: LinhaUpdateOneRequiredWithoutRelatorio3NestedInput
  }

  export type TransporteUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TransporteUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArmazenamentoUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    linha?: LinhaUpdateOneRequiredWithoutRelatorio4NestedInput
  }

  export type ArmazenamentoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArmazenamentoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VarejoUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    linha?: LinhaUpdateOneRequiredWithoutRelatorio5NestedInput
  }

  export type VarejoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VarejoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linha?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FeedUpdateWithoutUserInput = {
    description?: StringFieldUpdateOperationsInput | string
  }

  export type FeedUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type FeedUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    Linha?: LinhaUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
    Linha?: LinhaUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    photo?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateManyRoleInput = {
    id?: number
    id_user: number
    responsavel_email?: string
  }

  export type RolePermissionCreateManyRoleInput = {
    id?: number
    id_permission: number
  }

  export type UserRoleUpdateWithoutRoleInput = {
    responsavel_email?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutUserRoleNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    responsavel_email?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    responsavel_email?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUpdateWithoutRoleInput = {
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
  }

  export type RolePermissionCreateManyPermissionInput = {
    id?: number
    id_role: number
  }

  export type UserPermissionCreateManyPermissionInput = {
    id?: number
    id_user: number
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    role?: RoleUpdateOneRequiredWithoutRolePermissionNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionUpdateWithoutPermissionInput = {
    user?: UserUpdateOneRequiredWithoutUserPermissionNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
  }

  export type Prod_AgriCreateManyLinhaInput = {
    id?: number
    id_user: number
    nome: string
    local: string
    dt_plantio: string
    dt_colheita: string
    insumo: string
    praticas: string
    private?: boolean
    medalha?: boolean
  }

  export type EmbalagemCreateManyLinhaInput = {
    id?: number
    id_user: number
    nome: string
    local: string
    ingrediente: string
    praticas: string
    dt_processamento: string
    dt_embalagem: string
    private?: boolean
    medalha?: boolean
  }

  export type TransporteCreateManyLinhaInput = {
    id?: number
    id_user: number
    nome: string
    praticas: string
    dt_carregamento: string
    dt_descarregamento: string
    origem: string
    destino: string
    private?: boolean
    medalha?: boolean
  }

  export type ArmazenamentoCreateManyLinhaInput = {
    id?: number
    id_user: number
    nome: string
    local: string
    praticas: string
    responsavel: string
    dt_entrada: string
    dt_saida: string
    private?: boolean
    medalha?: boolean
  }

  export type VarejoCreateManyLinhaInput = {
    id?: number
    id_user: number
    nome: string
    local: string
    dt_chegada: string
    dt_validade: string
    private?: boolean
    medalha?: boolean
  }

  export type Prod_AgriUpdateWithoutLinhaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio1NestedInput
  }

  export type Prod_AgriUncheckedUpdateWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Prod_AgriUncheckedUpdateManyWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_plantio?: StringFieldUpdateOperationsInput | string
    dt_colheita?: StringFieldUpdateOperationsInput | string
    insumo?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmbalagemUpdateWithoutLinhaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio2NestedInput
  }

  export type EmbalagemUncheckedUpdateWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmbalagemUncheckedUpdateManyWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    ingrediente?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_processamento?: StringFieldUpdateOperationsInput | string
    dt_embalagem?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TransporteUpdateWithoutLinhaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio3NestedInput
  }

  export type TransporteUncheckedUpdateWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TransporteUncheckedUpdateManyWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    dt_carregamento?: StringFieldUpdateOperationsInput | string
    dt_descarregamento?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArmazenamentoUpdateWithoutLinhaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio4NestedInput
  }

  export type ArmazenamentoUncheckedUpdateWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArmazenamentoUncheckedUpdateManyWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    praticas?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    dt_entrada?: StringFieldUpdateOperationsInput | string
    dt_saida?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VarejoUpdateWithoutLinhaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRelatorio5NestedInput
  }

  export type VarejoUncheckedUpdateWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VarejoUncheckedUpdateManyWithoutLinhaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    dt_chegada?: StringFieldUpdateOperationsInput | string
    dt_validade?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    medalha?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LinhaCreateManyProdutoInput = {
    id?: number
    date: string
    qrcode?: string | null
  }

  export type LinhaUpdateWithoutProdutoInput = {
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    Relatorio1?: Prod_AgriUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUpdateManyWithoutLinhaNestedInput
  }

  export type LinhaUncheckedUpdateWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    Relatorio1?: Prod_AgriUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio2?: EmbalagemUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio3?: TransporteUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio4?: ArmazenamentoUncheckedUpdateManyWithoutLinhaNestedInput
    Relatorio5?: VarejoUncheckedUpdateManyWithoutLinhaNestedInput
  }

  export type LinhaUncheckedUpdateManyWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LinhaCountOutputTypeDefaultArgs instead
     */
    export type LinhaCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = LinhaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoCountOutputTypeDefaultArgs instead
     */
    export type ProdutoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProdutoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRoleDefaultArgs instead
     */
    export type UserRoleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserRoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolePermissionDefaultArgs instead
     */
    export type RolePermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RolePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPermissionDefaultArgs instead
     */
    export type UserPermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserPermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DenunciaDefaultArgs instead
     */
    export type DenunciaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = DenunciaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LinhaDefaultArgs instead
     */
    export type LinhaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = LinhaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Prod_AgriDefaultArgs instead
     */
    export type Prod_AgriArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Prod_AgriDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmbalagemDefaultArgs instead
     */
    export type EmbalagemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = EmbalagemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransporteDefaultArgs instead
     */
    export type TransporteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TransporteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArmazenamentoDefaultArgs instead
     */
    export type ArmazenamentoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ArmazenamentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VarejoDefaultArgs instead
     */
    export type VarejoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = VarejoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoDefaultArgs instead
     */
    export type ProdutoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProdutoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedDefaultArgs instead
     */
    export type FeedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FeedDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}